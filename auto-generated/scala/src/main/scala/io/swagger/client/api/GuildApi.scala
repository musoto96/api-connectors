/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.Error
import io.swagger.client.model.Guild
import io.swagger.client.model.XAny
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class GuildApi(
  val defBasePath: String = "https://www.bitmex.com/api/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new GuildApiAsyncHelper(client, config)

  /**
   * Archive a guild
   * 
   *
   * @return Any
   */
  def guildArchive(): Option[Any] = {
    val await = Try(Await.result(guildArchiveAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Archive a guild asynchronously
   * 
   *
   * @return Future(Any)
   */
  def guildArchiveAsync(): Future[Any] = {
      helper.guildArchive()
  }

  /**
   * Edit guild new guild
   * 
   *
   * @param name Name of the guild, must be unique, must be at least 5 characters 
   * @param emoji Emoji name. 
   * @param potDistributionPercent How much of the pot should be distributed to the guild members, must be between 0 and 100 
   * @param potDistributionType How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM 
   * @param potTraderId User ID of the guild member with order write permission for the pot (optional)
   * @param description Guild description, can be used to explain the guild to other users. (optional)
   * @param twitter Guild twitter handle. (optional)
   * @param discord Guild discord link. (optional)
   * @param imgUrl URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)
   * @param isPrivate Guild privacy status (optional)
   * @return Guild
   */
  def guildEdit(name: String, emoji: String, potDistributionPercent: Double, potDistributionType: String, potTraderId: Option[Double] = None, description: Option[String] = None, twitter: Option[String] = None, discord: Option[String] = None, imgUrl: Option[String] = None, isPrivate: Option[Boolean] = None): Option[Guild] = {
    val await = Try(Await.result(guildEditAsync(name, emoji, potDistributionPercent, potDistributionType, potTraderId, description, twitter, discord, imgUrl, isPrivate), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Edit guild new guild asynchronously
   * 
   *
   * @param name Name of the guild, must be unique, must be at least 5 characters 
   * @param emoji Emoji name. 
   * @param potDistributionPercent How much of the pot should be distributed to the guild members, must be between 0 and 100 
   * @param potDistributionType How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM 
   * @param potTraderId User ID of the guild member with order write permission for the pot (optional)
   * @param description Guild description, can be used to explain the guild to other users. (optional)
   * @param twitter Guild twitter handle. (optional)
   * @param discord Guild discord link. (optional)
   * @param imgUrl URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)
   * @param isPrivate Guild privacy status (optional)
   * @return Future(Guild)
   */
  def guildEditAsync(name: String, emoji: String, potDistributionPercent: Double, potDistributionType: String, potTraderId: Option[Double] = None, description: Option[String] = None, twitter: Option[String] = None, discord: Option[String] = None, imgUrl: Option[String] = None, isPrivate: Option[Boolean] = None): Future[Guild] = {
      helper.guildEdit(name, emoji, potDistributionPercent, potDistributionType, potTraderId, description, twitter, discord, imgUrl, isPrivate)
  }

  /**
   * Get all guilds
   * 
   *
   * @return List[XAny]
   */
  def guildGet(): Option[List[XAny]] = {
    val await = Try(Await.result(guildGetAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get all guilds asynchronously
   * 
   *
   * @return Future(List[XAny])
   */
  def guildGetAsync(): Future[List[XAny]] = {
      helper.guildGet()
  }

  /**
   * Request to Join a private guild or join a public guild
   * 
   *
   * @param code  
   * @return Any
   */
  def guildJoin(code: String): Option[Any] = {
    val await = Try(Await.result(guildJoinAsync(code), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Request to Join a private guild or join a public guild asynchronously
   * 
   *
   * @param code  
   * @return Future(Any)
   */
  def guildJoinAsync(code: String): Future[Any] = {
      helper.guildJoin(code)
  }

  /**
   * Kick member from guild
   * 
   *
   * @param memberUserId  
   * @return Any
   */
  def guildKick(memberUserId: Double): Option[Any] = {
    val await = Try(Await.result(guildKickAsync(memberUserId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Kick member from guild asynchronously
   * 
   *
   * @param memberUserId  
   * @return Future(Any)
   */
  def guildKickAsync(memberUserId: Double): Future[Any] = {
      helper.guildKick(memberUserId)
  }

  /**
   * Leave guild or cancel guild join request
   * 
   *
   * @return Any
   */
  def guildLeave(): Option[Any] = {
    val await = Try(Await.result(guildLeaveAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Leave guild or cancel guild join request asynchronously
   * 
   *
   * @return Future(Any)
   */
  def guildLeaveAsync(): Future[Any] = {
      helper.guildLeave()
  }

  /**
   * Creates a new guild
   * 
   *
   * @param name Name of the guild, must be unique, must be at least 5 characters 
   * @param emoji Emoji name. 
   * @param potDistributionPercent How much of the pot should be distributed to the guild members, must be between 0 and 100 
   * @param potDistributionType How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM 
   * @param description Guild description, can be used to explain the guild to other users. (optional)
   * @param twitter Guild twitter handle. (optional)
   * @param discord Guild discord link. (optional)
   * @param imgUrl URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)
   * @param isPrivate Guild privacy status (optional)
   * @return Guild
   */
  def guildNew(name: String, emoji: String, potDistributionPercent: Double, potDistributionType: String, description: Option[String] = None, twitter: Option[String] = None, discord: Option[String] = None, imgUrl: Option[String] = None, isPrivate: Option[Boolean] = None): Option[Guild] = {
    val await = Try(Await.result(guildNewAsync(name, emoji, potDistributionPercent, potDistributionType, description, twitter, discord, imgUrl, isPrivate), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Creates a new guild asynchronously
   * 
   *
   * @param name Name of the guild, must be unique, must be at least 5 characters 
   * @param emoji Emoji name. 
   * @param potDistributionPercent How much of the pot should be distributed to the guild members, must be between 0 and 100 
   * @param potDistributionType How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM 
   * @param description Guild description, can be used to explain the guild to other users. (optional)
   * @param twitter Guild twitter handle. (optional)
   * @param discord Guild discord link. (optional)
   * @param imgUrl URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)
   * @param isPrivate Guild privacy status (optional)
   * @return Future(Guild)
   */
  def guildNewAsync(name: String, emoji: String, potDistributionPercent: Double, potDistributionType: String, description: Option[String] = None, twitter: Option[String] = None, discord: Option[String] = None, imgUrl: Option[String] = None, isPrivate: Option[Boolean] = None): Future[Guild] = {
      helper.guildNew(name, emoji, potDistributionPercent, potDistributionType, description, twitter, discord, imgUrl, isPrivate)
  }

  /**
   * Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI
   * 
   *
   * @param shareTrades  
   * @return Any
   */
  def guildShareTrades(shareTrades: Boolean): Option[Any] = {
    val await = Try(Await.result(guildShareTradesAsync(shareTrades), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI asynchronously
   * 
   *
   * @param shareTrades  
   * @return Future(Any)
   */
  def guildShareTradesAsync(shareTrades: Boolean): Future[Any] = {
      helper.guildShareTrades(shareTrades)
  }

}

class GuildApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def guildArchive()(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/guild/archive"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def guildEdit(name: String,
    emoji: String,
    potDistributionPercent: Double,
    potDistributionType: String,
    potTraderId: Option[Double] = None,
    description: Option[String] = None,
    twitter: Option[String] = None,
    discord: Option[String] = None,
    imgUrl: Option[String] = None,
    isPrivate: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[Guild]): Future[Guild] = {
    // create path and map variables
    val path = (addFmt("/guild"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling GuildApi->guildEdit")

    if (emoji == null) throw new Exception("Missing required parameter 'emoji' when calling GuildApi->guildEdit")

    if (potDistributionType == null) throw new Exception("Missing required parameter 'potDistributionType' when calling GuildApi->guildEdit")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def guildGet()(implicit reader: ClientResponseReader[List[XAny]]): Future[List[XAny]] = {
    // create path and map variables
    val path = (addFmt("/guild"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def guildJoin(code: String)(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/guild/join"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (code == null) throw new Exception("Missing required parameter 'code' when calling GuildApi->guildJoin")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def guildKick(memberUserId: Double)(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/guild/kick"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def guildLeave()(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/guild/leave"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def guildNew(name: String,
    emoji: String,
    potDistributionPercent: Double,
    potDistributionType: String,
    description: Option[String] = None,
    twitter: Option[String] = None,
    discord: Option[String] = None,
    imgUrl: Option[String] = None,
    isPrivate: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[Guild]): Future[Guild] = {
    // create path and map variables
    val path = (addFmt("/guild"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling GuildApi->guildNew")

    if (emoji == null) throw new Exception("Missing required parameter 'emoji' when calling GuildApi->guildNew")

    if (potDistributionType == null) throw new Exception("Missing required parameter 'potDistributionType' when calling GuildApi->guildNew")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def guildShareTrades(shareTrades: Boolean)(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/guild/shareTrades"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
