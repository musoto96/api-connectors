/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGuildApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archive a guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object GuildArchive ();

        /// <summary>
        /// Archive a guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GuildArchiveWithHttpInfo ();
        /// <summary>
        /// Edit guild new guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="potTraderId">User ID of the guild member with order write permission for the pot (optional)</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>Guild</returns>
        Guild GuildEdit (string name, string emoji, double? potDistributionPercent, string potDistributionType, double? potTraderId = null, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null);

        /// <summary>
        /// Edit guild new guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="potTraderId">User ID of the guild member with order write permission for the pot (optional)</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>ApiResponse of Guild</returns>
        ApiResponse<Guild> GuildEditWithHttpInfo (string name, string emoji, double? potDistributionPercent, string potDistributionType, double? potTraderId = null, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null);
        /// <summary>
        /// Get all guilds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;XAny&gt;</returns>
        List<XAny> GuildGet ();

        /// <summary>
        /// Get all guilds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;XAny&gt;</returns>
        ApiResponse<List<XAny>> GuildGetWithHttpInfo ();
        /// <summary>
        /// Request to Join a private guild or join a public guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <returns>Object</returns>
        Object GuildJoin (string code);

        /// <summary>
        /// Request to Join a private guild or join a public guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GuildJoinWithHttpInfo (string code);
        /// <summary>
        /// Kick member from guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberUserId"></param>
        /// <returns>Object</returns>
        Object GuildKick (double? memberUserId);

        /// <summary>
        /// Kick member from guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberUserId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GuildKickWithHttpInfo (double? memberUserId);
        /// <summary>
        /// Leave guild or cancel guild join request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object GuildLeave ();

        /// <summary>
        /// Leave guild or cancel guild join request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GuildLeaveWithHttpInfo ();
        /// <summary>
        /// Creates a new guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>Guild</returns>
        Guild GuildNew (string name, string emoji, double? potDistributionPercent, string potDistributionType, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null);

        /// <summary>
        /// Creates a new guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>ApiResponse of Guild</returns>
        ApiResponse<Guild> GuildNewWithHttpInfo (string name, string emoji, double? potDistributionPercent, string potDistributionType, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null);
        /// <summary>
        /// Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareTrades"></param>
        /// <returns>Object</returns>
        Object GuildShareTrades (bool? shareTrades);

        /// <summary>
        /// Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareTrades"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GuildShareTradesWithHttpInfo (bool? shareTrades);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Archive a guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GuildArchiveAsync ();

        /// <summary>
        /// Archive a guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GuildArchiveAsyncWithHttpInfo ();
        /// <summary>
        /// Edit guild new guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="potTraderId">User ID of the guild member with order write permission for the pot (optional)</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>Task of Guild</returns>
        System.Threading.Tasks.Task<Guild> GuildEditAsync (string name, string emoji, double? potDistributionPercent, string potDistributionType, double? potTraderId = null, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null);

        /// <summary>
        /// Edit guild new guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="potTraderId">User ID of the guild member with order write permission for the pot (optional)</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>Task of ApiResponse (Guild)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guild>> GuildEditAsyncWithHttpInfo (string name, string emoji, double? potDistributionPercent, string potDistributionType, double? potTraderId = null, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null);
        /// <summary>
        /// Get all guilds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;XAny&gt;</returns>
        System.Threading.Tasks.Task<List<XAny>> GuildGetAsync ();

        /// <summary>
        /// Get all guilds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;XAny&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<XAny>>> GuildGetAsyncWithHttpInfo ();
        /// <summary>
        /// Request to Join a private guild or join a public guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GuildJoinAsync (string code);

        /// <summary>
        /// Request to Join a private guild or join a public guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GuildJoinAsyncWithHttpInfo (string code);
        /// <summary>
        /// Kick member from guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberUserId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GuildKickAsync (double? memberUserId);

        /// <summary>
        /// Kick member from guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberUserId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GuildKickAsyncWithHttpInfo (double? memberUserId);
        /// <summary>
        /// Leave guild or cancel guild join request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GuildLeaveAsync ();

        /// <summary>
        /// Leave guild or cancel guild join request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GuildLeaveAsyncWithHttpInfo ();
        /// <summary>
        /// Creates a new guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>Task of Guild</returns>
        System.Threading.Tasks.Task<Guild> GuildNewAsync (string name, string emoji, double? potDistributionPercent, string potDistributionType, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null);

        /// <summary>
        /// Creates a new guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>Task of ApiResponse (Guild)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guild>> GuildNewAsyncWithHttpInfo (string name, string emoji, double? potDistributionPercent, string potDistributionType, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null);
        /// <summary>
        /// Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareTrades"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GuildShareTradesAsync (bool? shareTrades);

        /// <summary>
        /// Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareTrades"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GuildShareTradesAsyncWithHttpInfo (bool? shareTrades);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GuildApi : IGuildApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GuildApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GuildApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GuildApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GuildApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Archive a guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object GuildArchive ()
        {
             ApiResponse<Object> localVarResponse = GuildArchiveWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Archive a guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GuildArchiveWithHttpInfo ()
        {

            var localVarPath = "/guild/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiExpires) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-expires")))
            {
                localVarHeaderParams["api-expires"] = this.Configuration.GetApiKeyWithPrefix("api-expires");
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-signature")))
            {
                localVarHeaderParams["api-signature"] = this.Configuration.GetApiKeyWithPrefix("api-signature");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Archive a guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GuildArchiveAsync ()
        {
             ApiResponse<Object> localVarResponse = await GuildArchiveAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Archive a guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GuildArchiveAsyncWithHttpInfo ()
        {

            var localVarPath = "/guild/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiExpires) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-expires")))
            {
                localVarHeaderParams["api-expires"] = this.Configuration.GetApiKeyWithPrefix("api-expires");
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-signature")))
            {
                localVarHeaderParams["api-signature"] = this.Configuration.GetApiKeyWithPrefix("api-signature");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edit guild new guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="potTraderId">User ID of the guild member with order write permission for the pot (optional)</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>Guild</returns>
        public Guild GuildEdit (string name, string emoji, double? potDistributionPercent, string potDistributionType, double? potTraderId = null, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null)
        {
             ApiResponse<Guild> localVarResponse = GuildEditWithHttpInfo(name, emoji, potDistributionPercent, potDistributionType, potTraderId, description, twitter, discord, imgUrl, isPrivate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit guild new guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="potTraderId">User ID of the guild member with order write permission for the pot (optional)</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>ApiResponse of Guild</returns>
        public ApiResponse< Guild > GuildEditWithHttpInfo (string name, string emoji, double? potDistributionPercent, string potDistributionType, double? potTraderId = null, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling GuildApi->GuildEdit");
            // verify the required parameter 'emoji' is set
            if (emoji == null)
                throw new ApiException(400, "Missing required parameter 'emoji' when calling GuildApi->GuildEdit");
            // verify the required parameter 'potDistributionPercent' is set
            if (potDistributionPercent == null)
                throw new ApiException(400, "Missing required parameter 'potDistributionPercent' when calling GuildApi->GuildEdit");
            // verify the required parameter 'potDistributionType' is set
            if (potDistributionType == null)
                throw new ApiException(400, "Missing required parameter 'potDistributionType' when calling GuildApi->GuildEdit");

            var localVarPath = "/guild";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (emoji != null) localVarFormParams.Add("emoji", this.Configuration.ApiClient.ParameterToString(emoji)); // form parameter
            if (potDistributionPercent != null) localVarFormParams.Add("potDistributionPercent", this.Configuration.ApiClient.ParameterToString(potDistributionPercent)); // form parameter
            if (potDistributionType != null) localVarFormParams.Add("potDistributionType", this.Configuration.ApiClient.ParameterToString(potDistributionType)); // form parameter
            if (potTraderId != null) localVarFormParams.Add("potTraderId", this.Configuration.ApiClient.ParameterToString(potTraderId)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (twitter != null) localVarFormParams.Add("twitter", this.Configuration.ApiClient.ParameterToString(twitter)); // form parameter
            if (discord != null) localVarFormParams.Add("discord", this.Configuration.ApiClient.ParameterToString(discord)); // form parameter
            if (imgUrl != null) localVarFormParams.Add("imgUrl", this.Configuration.ApiClient.ParameterToString(imgUrl)); // form parameter
            if (isPrivate != null) localVarFormParams.Add("isPrivate", this.Configuration.ApiClient.ParameterToString(isPrivate)); // form parameter

            // authentication (apiExpires) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-expires")))
            {
                localVarHeaderParams["api-expires"] = this.Configuration.GetApiKeyWithPrefix("api-expires");
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-signature")))
            {
                localVarHeaderParams["api-signature"] = this.Configuration.GetApiKeyWithPrefix("api-signature");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guild>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Guild) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guild)));
        }

        /// <summary>
        /// Edit guild new guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="potTraderId">User ID of the guild member with order write permission for the pot (optional)</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>Task of Guild</returns>
        public async System.Threading.Tasks.Task<Guild> GuildEditAsync (string name, string emoji, double? potDistributionPercent, string potDistributionType, double? potTraderId = null, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null)
        {
             ApiResponse<Guild> localVarResponse = await GuildEditAsyncWithHttpInfo(name, emoji, potDistributionPercent, potDistributionType, potTraderId, description, twitter, discord, imgUrl, isPrivate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit guild new guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="potTraderId">User ID of the guild member with order write permission for the pot (optional)</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>Task of ApiResponse (Guild)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guild>> GuildEditAsyncWithHttpInfo (string name, string emoji, double? potDistributionPercent, string potDistributionType, double? potTraderId = null, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling GuildApi->GuildEdit");
            // verify the required parameter 'emoji' is set
            if (emoji == null)
                throw new ApiException(400, "Missing required parameter 'emoji' when calling GuildApi->GuildEdit");
            // verify the required parameter 'potDistributionPercent' is set
            if (potDistributionPercent == null)
                throw new ApiException(400, "Missing required parameter 'potDistributionPercent' when calling GuildApi->GuildEdit");
            // verify the required parameter 'potDistributionType' is set
            if (potDistributionType == null)
                throw new ApiException(400, "Missing required parameter 'potDistributionType' when calling GuildApi->GuildEdit");

            var localVarPath = "/guild";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (emoji != null) localVarFormParams.Add("emoji", this.Configuration.ApiClient.ParameterToString(emoji)); // form parameter
            if (potDistributionPercent != null) localVarFormParams.Add("potDistributionPercent", this.Configuration.ApiClient.ParameterToString(potDistributionPercent)); // form parameter
            if (potDistributionType != null) localVarFormParams.Add("potDistributionType", this.Configuration.ApiClient.ParameterToString(potDistributionType)); // form parameter
            if (potTraderId != null) localVarFormParams.Add("potTraderId", this.Configuration.ApiClient.ParameterToString(potTraderId)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (twitter != null) localVarFormParams.Add("twitter", this.Configuration.ApiClient.ParameterToString(twitter)); // form parameter
            if (discord != null) localVarFormParams.Add("discord", this.Configuration.ApiClient.ParameterToString(discord)); // form parameter
            if (imgUrl != null) localVarFormParams.Add("imgUrl", this.Configuration.ApiClient.ParameterToString(imgUrl)); // form parameter
            if (isPrivate != null) localVarFormParams.Add("isPrivate", this.Configuration.ApiClient.ParameterToString(isPrivate)); // form parameter

            // authentication (apiExpires) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-expires")))
            {
                localVarHeaderParams["api-expires"] = this.Configuration.GetApiKeyWithPrefix("api-expires");
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-signature")))
            {
                localVarHeaderParams["api-signature"] = this.Configuration.GetApiKeyWithPrefix("api-signature");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guild>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Guild) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guild)));
        }

        /// <summary>
        /// Get all guilds 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;XAny&gt;</returns>
        public List<XAny> GuildGet ()
        {
             ApiResponse<List<XAny>> localVarResponse = GuildGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all guilds 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;XAny&gt;</returns>
        public ApiResponse< List<XAny> > GuildGetWithHttpInfo ()
        {

            var localVarPath = "/guild";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<XAny>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<XAny>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<XAny>)));
        }

        /// <summary>
        /// Get all guilds 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;XAny&gt;</returns>
        public async System.Threading.Tasks.Task<List<XAny>> GuildGetAsync ()
        {
             ApiResponse<List<XAny>> localVarResponse = await GuildGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all guilds 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;XAny&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<XAny>>> GuildGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/guild";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<XAny>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<XAny>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<XAny>)));
        }

        /// <summary>
        /// Request to Join a private guild or join a public guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <returns>Object</returns>
        public Object GuildJoin (string code)
        {
             ApiResponse<Object> localVarResponse = GuildJoinWithHttpInfo(code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request to Join a private guild or join a public guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GuildJoinWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling GuildApi->GuildJoin");

            var localVarPath = "/guild/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarFormParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // form parameter

            // authentication (apiExpires) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-expires")))
            {
                localVarHeaderParams["api-expires"] = this.Configuration.GetApiKeyWithPrefix("api-expires");
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-signature")))
            {
                localVarHeaderParams["api-signature"] = this.Configuration.GetApiKeyWithPrefix("api-signature");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildJoin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Request to Join a private guild or join a public guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GuildJoinAsync (string code)
        {
             ApiResponse<Object> localVarResponse = await GuildJoinAsyncWithHttpInfo(code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request to Join a private guild or join a public guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GuildJoinAsyncWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling GuildApi->GuildJoin");

            var localVarPath = "/guild/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarFormParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // form parameter

            // authentication (apiExpires) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-expires")))
            {
                localVarHeaderParams["api-expires"] = this.Configuration.GetApiKeyWithPrefix("api-expires");
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-signature")))
            {
                localVarHeaderParams["api-signature"] = this.Configuration.GetApiKeyWithPrefix("api-signature");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildJoin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Kick member from guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberUserId"></param>
        /// <returns>Object</returns>
        public Object GuildKick (double? memberUserId)
        {
             ApiResponse<Object> localVarResponse = GuildKickWithHttpInfo(memberUserId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Kick member from guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberUserId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GuildKickWithHttpInfo (double? memberUserId)
        {
            // verify the required parameter 'memberUserId' is set
            if (memberUserId == null)
                throw new ApiException(400, "Missing required parameter 'memberUserId' when calling GuildApi->GuildKick");

            var localVarPath = "/guild/kick";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberUserId != null) localVarFormParams.Add("memberUserId", this.Configuration.ApiClient.ParameterToString(memberUserId)); // form parameter

            // authentication (apiExpires) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-expires")))
            {
                localVarHeaderParams["api-expires"] = this.Configuration.GetApiKeyWithPrefix("api-expires");
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-signature")))
            {
                localVarHeaderParams["api-signature"] = this.Configuration.GetApiKeyWithPrefix("api-signature");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildKick", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Kick member from guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberUserId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GuildKickAsync (double? memberUserId)
        {
             ApiResponse<Object> localVarResponse = await GuildKickAsyncWithHttpInfo(memberUserId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Kick member from guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberUserId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GuildKickAsyncWithHttpInfo (double? memberUserId)
        {
            // verify the required parameter 'memberUserId' is set
            if (memberUserId == null)
                throw new ApiException(400, "Missing required parameter 'memberUserId' when calling GuildApi->GuildKick");

            var localVarPath = "/guild/kick";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberUserId != null) localVarFormParams.Add("memberUserId", this.Configuration.ApiClient.ParameterToString(memberUserId)); // form parameter

            // authentication (apiExpires) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-expires")))
            {
                localVarHeaderParams["api-expires"] = this.Configuration.GetApiKeyWithPrefix("api-expires");
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-signature")))
            {
                localVarHeaderParams["api-signature"] = this.Configuration.GetApiKeyWithPrefix("api-signature");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildKick", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Leave guild or cancel guild join request 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object GuildLeave ()
        {
             ApiResponse<Object> localVarResponse = GuildLeaveWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Leave guild or cancel guild join request 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GuildLeaveWithHttpInfo ()
        {

            var localVarPath = "/guild/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiExpires) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-expires")))
            {
                localVarHeaderParams["api-expires"] = this.Configuration.GetApiKeyWithPrefix("api-expires");
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-signature")))
            {
                localVarHeaderParams["api-signature"] = this.Configuration.GetApiKeyWithPrefix("api-signature");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildLeave", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Leave guild or cancel guild join request 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GuildLeaveAsync ()
        {
             ApiResponse<Object> localVarResponse = await GuildLeaveAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Leave guild or cancel guild join request 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GuildLeaveAsyncWithHttpInfo ()
        {

            var localVarPath = "/guild/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiExpires) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-expires")))
            {
                localVarHeaderParams["api-expires"] = this.Configuration.GetApiKeyWithPrefix("api-expires");
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-signature")))
            {
                localVarHeaderParams["api-signature"] = this.Configuration.GetApiKeyWithPrefix("api-signature");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildLeave", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates a new guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>Guild</returns>
        public Guild GuildNew (string name, string emoji, double? potDistributionPercent, string potDistributionType, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null)
        {
             ApiResponse<Guild> localVarResponse = GuildNewWithHttpInfo(name, emoji, potDistributionPercent, potDistributionType, description, twitter, discord, imgUrl, isPrivate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>ApiResponse of Guild</returns>
        public ApiResponse< Guild > GuildNewWithHttpInfo (string name, string emoji, double? potDistributionPercent, string potDistributionType, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling GuildApi->GuildNew");
            // verify the required parameter 'emoji' is set
            if (emoji == null)
                throw new ApiException(400, "Missing required parameter 'emoji' when calling GuildApi->GuildNew");
            // verify the required parameter 'potDistributionPercent' is set
            if (potDistributionPercent == null)
                throw new ApiException(400, "Missing required parameter 'potDistributionPercent' when calling GuildApi->GuildNew");
            // verify the required parameter 'potDistributionType' is set
            if (potDistributionType == null)
                throw new ApiException(400, "Missing required parameter 'potDistributionType' when calling GuildApi->GuildNew");

            var localVarPath = "/guild";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (emoji != null) localVarFormParams.Add("emoji", this.Configuration.ApiClient.ParameterToString(emoji)); // form parameter
            if (potDistributionPercent != null) localVarFormParams.Add("potDistributionPercent", this.Configuration.ApiClient.ParameterToString(potDistributionPercent)); // form parameter
            if (potDistributionType != null) localVarFormParams.Add("potDistributionType", this.Configuration.ApiClient.ParameterToString(potDistributionType)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (twitter != null) localVarFormParams.Add("twitter", this.Configuration.ApiClient.ParameterToString(twitter)); // form parameter
            if (discord != null) localVarFormParams.Add("discord", this.Configuration.ApiClient.ParameterToString(discord)); // form parameter
            if (imgUrl != null) localVarFormParams.Add("imgUrl", this.Configuration.ApiClient.ParameterToString(imgUrl)); // form parameter
            if (isPrivate != null) localVarFormParams.Add("isPrivate", this.Configuration.ApiClient.ParameterToString(isPrivate)); // form parameter

            // authentication (apiExpires) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-expires")))
            {
                localVarHeaderParams["api-expires"] = this.Configuration.GetApiKeyWithPrefix("api-expires");
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-signature")))
            {
                localVarHeaderParams["api-signature"] = this.Configuration.GetApiKeyWithPrefix("api-signature");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guild>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Guild) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guild)));
        }

        /// <summary>
        /// Creates a new guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>Task of Guild</returns>
        public async System.Threading.Tasks.Task<Guild> GuildNewAsync (string name, string emoji, double? potDistributionPercent, string potDistributionType, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null)
        {
             ApiResponse<Guild> localVarResponse = await GuildNewAsyncWithHttpInfo(name, emoji, potDistributionPercent, potDistributionType, description, twitter, discord, imgUrl, isPrivate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new guild 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
        /// <param name="emoji">Emoji name.</param>
        /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
        /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
        /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
        /// <param name="twitter">Guild twitter handle. (optional)</param>
        /// <param name="discord">Guild discord link. (optional)</param>
        /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
        /// <param name="isPrivate">Guild privacy status (optional)</param>
        /// <returns>Task of ApiResponse (Guild)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guild>> GuildNewAsyncWithHttpInfo (string name, string emoji, double? potDistributionPercent, string potDistributionType, string description = null, string twitter = null, string discord = null, string imgUrl = null, bool? isPrivate = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling GuildApi->GuildNew");
            // verify the required parameter 'emoji' is set
            if (emoji == null)
                throw new ApiException(400, "Missing required parameter 'emoji' when calling GuildApi->GuildNew");
            // verify the required parameter 'potDistributionPercent' is set
            if (potDistributionPercent == null)
                throw new ApiException(400, "Missing required parameter 'potDistributionPercent' when calling GuildApi->GuildNew");
            // verify the required parameter 'potDistributionType' is set
            if (potDistributionType == null)
                throw new ApiException(400, "Missing required parameter 'potDistributionType' when calling GuildApi->GuildNew");

            var localVarPath = "/guild";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (emoji != null) localVarFormParams.Add("emoji", this.Configuration.ApiClient.ParameterToString(emoji)); // form parameter
            if (potDistributionPercent != null) localVarFormParams.Add("potDistributionPercent", this.Configuration.ApiClient.ParameterToString(potDistributionPercent)); // form parameter
            if (potDistributionType != null) localVarFormParams.Add("potDistributionType", this.Configuration.ApiClient.ParameterToString(potDistributionType)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (twitter != null) localVarFormParams.Add("twitter", this.Configuration.ApiClient.ParameterToString(twitter)); // form parameter
            if (discord != null) localVarFormParams.Add("discord", this.Configuration.ApiClient.ParameterToString(discord)); // form parameter
            if (imgUrl != null) localVarFormParams.Add("imgUrl", this.Configuration.ApiClient.ParameterToString(imgUrl)); // form parameter
            if (isPrivate != null) localVarFormParams.Add("isPrivate", this.Configuration.ApiClient.ParameterToString(isPrivate)); // form parameter

            // authentication (apiExpires) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-expires")))
            {
                localVarHeaderParams["api-expires"] = this.Configuration.GetApiKeyWithPrefix("api-expires");
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-signature")))
            {
                localVarHeaderParams["api-signature"] = this.Configuration.GetApiKeyWithPrefix("api-signature");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guild>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Guild) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guild)));
        }

        /// <summary>
        /// Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareTrades"></param>
        /// <returns>Object</returns>
        public Object GuildShareTrades (bool? shareTrades)
        {
             ApiResponse<Object> localVarResponse = GuildShareTradesWithHttpInfo(shareTrades);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareTrades"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GuildShareTradesWithHttpInfo (bool? shareTrades)
        {
            // verify the required parameter 'shareTrades' is set
            if (shareTrades == null)
                throw new ApiException(400, "Missing required parameter 'shareTrades' when calling GuildApi->GuildShareTrades");

            var localVarPath = "/guild/shareTrades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shareTrades != null) localVarFormParams.Add("shareTrades", this.Configuration.ApiClient.ParameterToString(shareTrades)); // form parameter

            // authentication (apiExpires) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-expires")))
            {
                localVarHeaderParams["api-expires"] = this.Configuration.GetApiKeyWithPrefix("api-expires");
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-signature")))
            {
                localVarHeaderParams["api-signature"] = this.Configuration.GetApiKeyWithPrefix("api-signature");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildShareTrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareTrades"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GuildShareTradesAsync (bool? shareTrades)
        {
             ApiResponse<Object> localVarResponse = await GuildShareTradesAsyncWithHttpInfo(shareTrades);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareTrades"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GuildShareTradesAsyncWithHttpInfo (bool? shareTrades)
        {
            // verify the required parameter 'shareTrades' is set
            if (shareTrades == null)
                throw new ApiException(400, "Missing required parameter 'shareTrades' when calling GuildApi->GuildShareTrades");

            var localVarPath = "/guild/shareTrades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shareTrades != null) localVarFormParams.Add("shareTrades", this.Configuration.ApiClient.ParameterToString(shareTrades)); // form parameter

            // authentication (apiExpires) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-expires")))
            {
                localVarHeaderParams["api-expires"] = this.Configuration.GetApiKeyWithPrefix("api-expires");
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-signature")))
            {
                localVarHeaderParams["api-signature"] = this.Configuration.GetApiKeyWithPrefix("api-signature");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GuildShareTrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
