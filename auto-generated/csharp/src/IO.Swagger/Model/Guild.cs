/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Guild
    /// </summary>
    [DataContract]
    public partial class Guild :  IEquatable<Guild>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Guild" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Guild() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Guild" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="created">created (required).</param>
        /// <param name="updated">updated (required).</param>
        /// <param name="archived">archived.</param>
        /// <param name="name">name (required).</param>
        /// <param name="imgUrl">imgUrl.</param>
        /// <param name="mobileHeroImgUrl">mobileHeroImgUrl.</param>
        /// <param name="emoji">emoji.</param>
        /// <param name="logoUrl">logoUrl.</param>
        /// <param name="description">description.</param>
        /// <param name="chatChannelId">chatChannelId (required).</param>
        /// <param name="isPrivate">isPrivate (required).</param>
        /// <param name="affiliateId">affiliateId.</param>
        /// <param name="potDistributionPreferences">potDistributionPreferences.</param>
        /// <param name="socials">socials.</param>
        /// <param name="deleted">deleted.</param>
        public Guild(decimal? id = default(decimal?), DateTime? created = default(DateTime?), DateTime? updated = default(DateTime?), bool? archived = default(bool?), string name = default(string), string imgUrl = default(string), string mobileHeroImgUrl = default(string), string emoji = default(string), string logoUrl = default(string), string description = default(string), double? chatChannelId = default(double?), bool? isPrivate = default(bool?), string affiliateId = default(string), Object potDistributionPreferences = default(Object), Object socials = default(Object), bool? deleted = default(bool?))
        {
            // to ensure "created" is required (not null)
            if (created == null)
            {
                throw new InvalidDataException("created is a required property for Guild and cannot be null");
            }
            else
            {
                this.Created = created;
            }
            // to ensure "updated" is required (not null)
            if (updated == null)
            {
                throw new InvalidDataException("updated is a required property for Guild and cannot be null");
            }
            else
            {
                this.Updated = updated;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Guild and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "chatChannelId" is required (not null)
            if (chatChannelId == null)
            {
                throw new InvalidDataException("chatChannelId is a required property for Guild and cannot be null");
            }
            else
            {
                this.ChatChannelId = chatChannelId;
            }
            // to ensure "isPrivate" is required (not null)
            if (isPrivate == null)
            {
                throw new InvalidDataException("isPrivate is a required property for Guild and cannot be null");
            }
            else
            {
                this.IsPrivate = isPrivate;
            }
            this.Id = id;
            this.Archived = archived;
            this.ImgUrl = imgUrl;
            this.MobileHeroImgUrl = mobileHeroImgUrl;
            this.Emoji = emoji;
            this.LogoUrl = logoUrl;
            this.Description = description;
            this.AffiliateId = affiliateId;
            this.PotDistributionPreferences = potDistributionPreferences;
            this.Socials = socials;
            this.Deleted = deleted;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public decimal? Id { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [DataMember(Name="archived", EmitDefaultValue=false)]
        public bool? Archived { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ImgUrl
        /// </summary>
        [DataMember(Name="imgUrl", EmitDefaultValue=false)]
        public string ImgUrl { get; set; }

        /// <summary>
        /// Gets or Sets MobileHeroImgUrl
        /// </summary>
        [DataMember(Name="mobileHeroImgUrl", EmitDefaultValue=false)]
        public string MobileHeroImgUrl { get; set; }

        /// <summary>
        /// Gets or Sets Emoji
        /// </summary>
        [DataMember(Name="emoji", EmitDefaultValue=false)]
        public string Emoji { get; set; }

        /// <summary>
        /// Gets or Sets LogoUrl
        /// </summary>
        [DataMember(Name="logoUrl", EmitDefaultValue=false)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ChatChannelId
        /// </summary>
        [DataMember(Name="chatChannelId", EmitDefaultValue=false)]
        public double? ChatChannelId { get; set; }

        /// <summary>
        /// Gets or Sets IsPrivate
        /// </summary>
        [DataMember(Name="isPrivate", EmitDefaultValue=false)]
        public bool? IsPrivate { get; set; }

        /// <summary>
        /// Gets or Sets AffiliateId
        /// </summary>
        [DataMember(Name="affiliateId", EmitDefaultValue=false)]
        public string AffiliateId { get; set; }

        /// <summary>
        /// Gets or Sets PotDistributionPreferences
        /// </summary>
        [DataMember(Name="potDistributionPreferences", EmitDefaultValue=false)]
        public Object PotDistributionPreferences { get; set; }

        /// <summary>
        /// Gets or Sets Socials
        /// </summary>
        [DataMember(Name="socials", EmitDefaultValue=false)]
        public Object Socials { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Guild {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ImgUrl: ").Append(ImgUrl).Append("\n");
            sb.Append("  MobileHeroImgUrl: ").Append(MobileHeroImgUrl).Append("\n");
            sb.Append("  Emoji: ").Append(Emoji).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ChatChannelId: ").Append(ChatChannelId).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  AffiliateId: ").Append(AffiliateId).Append("\n");
            sb.Append("  PotDistributionPreferences: ").Append(PotDistributionPreferences).Append("\n");
            sb.Append("  Socials: ").Append(Socials).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Guild);
        }

        /// <summary>
        /// Returns true if Guild instances are equal
        /// </summary>
        /// <param name="input">Instance of Guild to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Guild input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.Archived == input.Archived ||
                    (this.Archived != null &&
                    this.Archived.Equals(input.Archived))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ImgUrl == input.ImgUrl ||
                    (this.ImgUrl != null &&
                    this.ImgUrl.Equals(input.ImgUrl))
                ) && 
                (
                    this.MobileHeroImgUrl == input.MobileHeroImgUrl ||
                    (this.MobileHeroImgUrl != null &&
                    this.MobileHeroImgUrl.Equals(input.MobileHeroImgUrl))
                ) && 
                (
                    this.Emoji == input.Emoji ||
                    (this.Emoji != null &&
                    this.Emoji.Equals(input.Emoji))
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ChatChannelId == input.ChatChannelId ||
                    (this.ChatChannelId != null &&
                    this.ChatChannelId.Equals(input.ChatChannelId))
                ) && 
                (
                    this.IsPrivate == input.IsPrivate ||
                    (this.IsPrivate != null &&
                    this.IsPrivate.Equals(input.IsPrivate))
                ) && 
                (
                    this.AffiliateId == input.AffiliateId ||
                    (this.AffiliateId != null &&
                    this.AffiliateId.Equals(input.AffiliateId))
                ) && 
                (
                    this.PotDistributionPreferences == input.PotDistributionPreferences ||
                    (this.PotDistributionPreferences != null &&
                    this.PotDistributionPreferences.Equals(input.PotDistributionPreferences))
                ) && 
                (
                    this.Socials == input.Socials ||
                    (this.Socials != null &&
                    this.Socials.Equals(input.Socials))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.Archived != null)
                    hashCode = hashCode * 59 + this.Archived.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ImgUrl != null)
                    hashCode = hashCode * 59 + this.ImgUrl.GetHashCode();
                if (this.MobileHeroImgUrl != null)
                    hashCode = hashCode * 59 + this.MobileHeroImgUrl.GetHashCode();
                if (this.Emoji != null)
                    hashCode = hashCode * 59 + this.Emoji.GetHashCode();
                if (this.LogoUrl != null)
                    hashCode = hashCode * 59 + this.LogoUrl.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ChatChannelId != null)
                    hashCode = hashCode * 59 + this.ChatChannelId.GetHashCode();
                if (this.IsPrivate != null)
                    hashCode = hashCode * 59 + this.IsPrivate.GetHashCode();
                if (this.AffiliateId != null)
                    hashCode = hashCode * 59 + this.AffiliateId.GetHashCode();
                if (this.PotDistributionPreferences != null)
                    hashCode = hashCode * 59 + this.PotDistributionPreferences.GetHashCode();
                if (this.Socials != null)
                    hashCode = hashCode * 59 + this.Socials.GetHashCode();
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
