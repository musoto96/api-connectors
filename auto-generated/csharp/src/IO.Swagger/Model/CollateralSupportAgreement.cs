/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CollateralSupportAgreement
    /// </summary>
    [DataContract]
    public partial class CollateralSupportAgreement :  IEquatable<CollateralSupportAgreement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollateralSupportAgreement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CollateralSupportAgreement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CollateralSupportAgreement" /> class.
        /// </summary>
        /// <param name="csaID">csaID (required).</param>
        /// <param name="account">account.</param>
        /// <param name="currency">currency.</param>
        /// <param name="amount">amount.</param>
        /// <param name="minAmount">minAmount.</param>
        /// <param name="threshold">threshold.</param>
        /// <param name="mmRatioMarginCall">mmRatioMarginCall.</param>
        /// <param name="mmRatioLiquidation">mmRatioLiquidation.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="maturityTime">maturityTime.</param>
        /// <param name="maturityInstruction">maturityInstruction.</param>
        /// <param name="csaStatus">csaStatus.</param>
        /// <param name="requester">requester.</param>
        /// <param name="clientDetails">clientDetails.</param>
        /// <param name="text">text.</param>
        /// <param name="timestamp">timestamp.</param>
        public CollateralSupportAgreement(string csaID = default(string), decimal? account = default(decimal?), string currency = default(string), decimal? amount = default(decimal?), decimal? minAmount = default(decimal?), decimal? threshold = default(decimal?), decimal? mmRatioMarginCall = default(decimal?), decimal? mmRatioLiquidation = default(decimal?), string startTime = default(string), string maturityTime = default(string), string maturityInstruction = default(string), string csaStatus = default(string), string requester = default(string), string clientDetails = default(string), string text = default(string), string timestamp = default(string))
        {
            // to ensure "csaID" is required (not null)
            if (csaID == null)
            {
                throw new InvalidDataException("csaID is a required property for CollateralSupportAgreement and cannot be null");
            }
            else
            {
                this.CsaID = csaID;
            }
            this.Account = account;
            this.Currency = currency;
            this.Amount = amount;
            this.MinAmount = minAmount;
            this.Threshold = threshold;
            this.MmRatioMarginCall = mmRatioMarginCall;
            this.MmRatioLiquidation = mmRatioLiquidation;
            this.StartTime = startTime;
            this.MaturityTime = maturityTime;
            this.MaturityInstruction = maturityInstruction;
            this.CsaStatus = csaStatus;
            this.Requester = requester;
            this.ClientDetails = clientDetails;
            this.Text = text;
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// Gets or Sets CsaID
        /// </summary>
        [DataMember(Name="csaID", EmitDefaultValue=false)]
        public string CsaID { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public decimal? Account { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Gets or Sets MinAmount
        /// </summary>
        [DataMember(Name="minAmount", EmitDefaultValue=false)]
        public decimal? MinAmount { get; set; }

        /// <summary>
        /// Gets or Sets Threshold
        /// </summary>
        [DataMember(Name="threshold", EmitDefaultValue=false)]
        public decimal? Threshold { get; set; }

        /// <summary>
        /// Gets or Sets MmRatioMarginCall
        /// </summary>
        [DataMember(Name="mmRatioMarginCall", EmitDefaultValue=false)]
        public decimal? MmRatioMarginCall { get; set; }

        /// <summary>
        /// Gets or Sets MmRatioLiquidation
        /// </summary>
        [DataMember(Name="mmRatioLiquidation", EmitDefaultValue=false)]
        public decimal? MmRatioLiquidation { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets MaturityTime
        /// </summary>
        [DataMember(Name="maturityTime", EmitDefaultValue=false)]
        public string MaturityTime { get; set; }

        /// <summary>
        /// Gets or Sets MaturityInstruction
        /// </summary>
        [DataMember(Name="maturityInstruction", EmitDefaultValue=false)]
        public string MaturityInstruction { get; set; }

        /// <summary>
        /// Gets or Sets CsaStatus
        /// </summary>
        [DataMember(Name="csaStatus", EmitDefaultValue=false)]
        public string CsaStatus { get; set; }

        /// <summary>
        /// Gets or Sets Requester
        /// </summary>
        [DataMember(Name="requester", EmitDefaultValue=false)]
        public string Requester { get; set; }

        /// <summary>
        /// Gets or Sets ClientDetails
        /// </summary>
        [DataMember(Name="clientDetails", EmitDefaultValue=false)]
        public string ClientDetails { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollateralSupportAgreement {\n");
            sb.Append("  CsaID: ").Append(CsaID).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  MinAmount: ").Append(MinAmount).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("  MmRatioMarginCall: ").Append(MmRatioMarginCall).Append("\n");
            sb.Append("  MmRatioLiquidation: ").Append(MmRatioLiquidation).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  MaturityTime: ").Append(MaturityTime).Append("\n");
            sb.Append("  MaturityInstruction: ").Append(MaturityInstruction).Append("\n");
            sb.Append("  CsaStatus: ").Append(CsaStatus).Append("\n");
            sb.Append("  Requester: ").Append(Requester).Append("\n");
            sb.Append("  ClientDetails: ").Append(ClientDetails).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollateralSupportAgreement);
        }

        /// <summary>
        /// Returns true if CollateralSupportAgreement instances are equal
        /// </summary>
        /// <param name="input">Instance of CollateralSupportAgreement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollateralSupportAgreement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CsaID == input.CsaID ||
                    (this.CsaID != null &&
                    this.CsaID.Equals(input.CsaID))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.MinAmount == input.MinAmount ||
                    (this.MinAmount != null &&
                    this.MinAmount.Equals(input.MinAmount))
                ) && 
                (
                    this.Threshold == input.Threshold ||
                    (this.Threshold != null &&
                    this.Threshold.Equals(input.Threshold))
                ) && 
                (
                    this.MmRatioMarginCall == input.MmRatioMarginCall ||
                    (this.MmRatioMarginCall != null &&
                    this.MmRatioMarginCall.Equals(input.MmRatioMarginCall))
                ) && 
                (
                    this.MmRatioLiquidation == input.MmRatioLiquidation ||
                    (this.MmRatioLiquidation != null &&
                    this.MmRatioLiquidation.Equals(input.MmRatioLiquidation))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.MaturityTime == input.MaturityTime ||
                    (this.MaturityTime != null &&
                    this.MaturityTime.Equals(input.MaturityTime))
                ) && 
                (
                    this.MaturityInstruction == input.MaturityInstruction ||
                    (this.MaturityInstruction != null &&
                    this.MaturityInstruction.Equals(input.MaturityInstruction))
                ) && 
                (
                    this.CsaStatus == input.CsaStatus ||
                    (this.CsaStatus != null &&
                    this.CsaStatus.Equals(input.CsaStatus))
                ) && 
                (
                    this.Requester == input.Requester ||
                    (this.Requester != null &&
                    this.Requester.Equals(input.Requester))
                ) && 
                (
                    this.ClientDetails == input.ClientDetails ||
                    (this.ClientDetails != null &&
                    this.ClientDetails.Equals(input.ClientDetails))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CsaID != null)
                    hashCode = hashCode * 59 + this.CsaID.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.MinAmount != null)
                    hashCode = hashCode * 59 + this.MinAmount.GetHashCode();
                if (this.Threshold != null)
                    hashCode = hashCode * 59 + this.Threshold.GetHashCode();
                if (this.MmRatioMarginCall != null)
                    hashCode = hashCode * 59 + this.MmRatioMarginCall.GetHashCode();
                if (this.MmRatioLiquidation != null)
                    hashCode = hashCode * 59 + this.MmRatioLiquidation.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.MaturityTime != null)
                    hashCode = hashCode * 59 + this.MaturityTime.GetHashCode();
                if (this.MaturityInstruction != null)
                    hashCode = hashCode * 59 + this.MaturityInstruction.GetHashCode();
                if (this.CsaStatus != null)
                    hashCode = hashCode * 59 + this.CsaStatus.GetHashCode();
                if (this.Requester != null)
                    hashCode = hashCode * 59 + this.Requester.GetHashCode();
                if (this.ClientDetails != null)
                    hashCode = hashCode * 59 + this.ClientDetails.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
