/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AssetsConfig
    /// </summary>
    [DataContract]
    public partial class AssetsConfig :  IEquatable<AssetsConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssetsConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsConfig" /> class.
        /// </summary>
        /// <param name="asset">asset (required) (default to &quot;XBT&quot;).</param>
        /// <param name="currency">currency (default to &quot;XBt&quot;).</param>
        /// <param name="majorCurrency">majorCurrency (default to &quot;XBT&quot;).</param>
        /// <param name="name">name (default to &quot;Bitcoin&quot;).</param>
        /// <param name="currencyType">currencyType (default to &quot;Crypto&quot;).</param>
        /// <param name="scale">scale (default to 8.0).</param>
        /// <param name="enabled">enabled (default to true).</param>
        /// <param name="isMarginCurrency">isMarginCurrency (default to true).</param>
        /// <param name="networks">networks.</param>
        public AssetsConfig(string asset = "XBT", string currency = "XBt", string majorCurrency = "XBT", string name = "Bitcoin", string currencyType = "Crypto", double? scale = 8.0, bool? enabled = true, bool? isMarginCurrency = true, List<AssetsConfigNetworkItem> networks = default(List<AssetsConfigNetworkItem>))
        {
            // to ensure "asset" is required (not null)
            if (asset == null)
            {
                throw new InvalidDataException("asset is a required property for AssetsConfig and cannot be null");
            }
            else
            {
                this.Asset = asset;
            }
            // use default value if no "currency" provided
            if (currency == null)
            {
                this.Currency = "XBt";
            }
            else
            {
                this.Currency = currency;
            }
            // use default value if no "majorCurrency" provided
            if (majorCurrency == null)
            {
                this.MajorCurrency = "XBT";
            }
            else
            {
                this.MajorCurrency = majorCurrency;
            }
            // use default value if no "name" provided
            if (name == null)
            {
                this.Name = "Bitcoin";
            }
            else
            {
                this.Name = name;
            }
            // use default value if no "currencyType" provided
            if (currencyType == null)
            {
                this.CurrencyType = "Crypto";
            }
            else
            {
                this.CurrencyType = currencyType;
            }
            // use default value if no "scale" provided
            if (scale == null)
            {
                this.Scale = 8.0;
            }
            else
            {
                this.Scale = scale;
            }
            // use default value if no "enabled" provided
            if (enabled == null)
            {
                this.Enabled = true;
            }
            else
            {
                this.Enabled = enabled;
            }
            // use default value if no "isMarginCurrency" provided
            if (isMarginCurrency == null)
            {
                this.IsMarginCurrency = true;
            }
            else
            {
                this.IsMarginCurrency = isMarginCurrency;
            }
            this.Networks = networks;
        }
        
        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name="asset", EmitDefaultValue=false)]
        public string Asset { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets MajorCurrency
        /// </summary>
        [DataMember(Name="majorCurrency", EmitDefaultValue=false)]
        public string MajorCurrency { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyType
        /// </summary>
        [DataMember(Name="currencyType", EmitDefaultValue=false)]
        public string CurrencyType { get; set; }

        /// <summary>
        /// Gets or Sets Scale
        /// </summary>
        [DataMember(Name="scale", EmitDefaultValue=false)]
        public double? Scale { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets IsMarginCurrency
        /// </summary>
        [DataMember(Name="isMarginCurrency", EmitDefaultValue=false)]
        public bool? IsMarginCurrency { get; set; }

        /// <summary>
        /// Gets or Sets Networks
        /// </summary>
        [DataMember(Name="networks", EmitDefaultValue=false)]
        public List<AssetsConfigNetworkItem> Networks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetsConfig {\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  MajorCurrency: ").Append(MajorCurrency).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CurrencyType: ").Append(CurrencyType).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  IsMarginCurrency: ").Append(IsMarginCurrency).Append("\n");
            sb.Append("  Networks: ").Append(Networks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetsConfig);
        }

        /// <summary>
        /// Returns true if AssetsConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetsConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetsConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Asset == input.Asset ||
                    (this.Asset != null &&
                    this.Asset.Equals(input.Asset))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.MajorCurrency == input.MajorCurrency ||
                    (this.MajorCurrency != null &&
                    this.MajorCurrency.Equals(input.MajorCurrency))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CurrencyType == input.CurrencyType ||
                    (this.CurrencyType != null &&
                    this.CurrencyType.Equals(input.CurrencyType))
                ) && 
                (
                    this.Scale == input.Scale ||
                    (this.Scale != null &&
                    this.Scale.Equals(input.Scale))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.IsMarginCurrency == input.IsMarginCurrency ||
                    (this.IsMarginCurrency != null &&
                    this.IsMarginCurrency.Equals(input.IsMarginCurrency))
                ) && 
                (
                    this.Networks == input.Networks ||
                    this.Networks != null &&
                    this.Networks.SequenceEqual(input.Networks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Asset != null)
                    hashCode = hashCode * 59 + this.Asset.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.MajorCurrency != null)
                    hashCode = hashCode * 59 + this.MajorCurrency.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CurrencyType != null)
                    hashCode = hashCode * 59 + this.CurrencyType.GetHashCode();
                if (this.Scale != null)
                    hashCode = hashCode * 59 + this.Scale.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.IsMarginCurrency != null)
                    hashCode = hashCode * 59 + this.IsMarginCurrency.GetHashCode();
                if (this.Networks != null)
                    hashCode = hashCode * 59 + this.Networks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
