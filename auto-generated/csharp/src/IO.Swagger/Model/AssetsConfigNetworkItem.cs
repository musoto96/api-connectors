/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AssetsConfigNetworkItem
    /// </summary>
    [DataContract]
    public partial class AssetsConfigNetworkItem :  IEquatable<AssetsConfigNetworkItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsConfigNetworkItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssetsConfigNetworkItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsConfigNetworkItem" /> class.
        /// </summary>
        /// <param name="asset">asset (required) (default to &quot;BTC&quot;).</param>
        /// <param name="tokenAddress">tokenAddress (default to &quot;&quot;).</param>
        /// <param name="depositEnabled">depositEnabled (default to true).</param>
        /// <param name="withdrawalEnabled">withdrawalEnabled (default to true).</param>
        /// <param name="withdrawalFee">withdrawalFee.</param>
        /// <param name="minFee">minFee.</param>
        /// <param name="maxFee">maxFee.</param>
        public AssetsConfigNetworkItem(string asset = "BTC", string tokenAddress = "", bool? depositEnabled = true, bool? withdrawalEnabled = true, double? withdrawalFee = default(double?), double? minFee = default(double?), double? maxFee = default(double?))
        {
            // to ensure "asset" is required (not null)
            if (asset == null)
            {
                throw new InvalidDataException("asset is a required property for AssetsConfigNetworkItem and cannot be null");
            }
            else
            {
                this.Asset = asset;
            }
            // use default value if no "tokenAddress" provided
            if (tokenAddress == null)
            {
                this.TokenAddress = "";
            }
            else
            {
                this.TokenAddress = tokenAddress;
            }
            // use default value if no "depositEnabled" provided
            if (depositEnabled == null)
            {
                this.DepositEnabled = true;
            }
            else
            {
                this.DepositEnabled = depositEnabled;
            }
            // use default value if no "withdrawalEnabled" provided
            if (withdrawalEnabled == null)
            {
                this.WithdrawalEnabled = true;
            }
            else
            {
                this.WithdrawalEnabled = withdrawalEnabled;
            }
            this.WithdrawalFee = withdrawalFee;
            this.MinFee = minFee;
            this.MaxFee = maxFee;
        }
        
        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name="asset", EmitDefaultValue=false)]
        public string Asset { get; set; }

        /// <summary>
        /// Gets or Sets TokenAddress
        /// </summary>
        [DataMember(Name="tokenAddress", EmitDefaultValue=false)]
        public string TokenAddress { get; set; }

        /// <summary>
        /// Gets or Sets DepositEnabled
        /// </summary>
        [DataMember(Name="depositEnabled", EmitDefaultValue=false)]
        public bool? DepositEnabled { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawalEnabled
        /// </summary>
        [DataMember(Name="withdrawalEnabled", EmitDefaultValue=false)]
        public bool? WithdrawalEnabled { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawalFee
        /// </summary>
        [DataMember(Name="withdrawalFee", EmitDefaultValue=false)]
        public double? WithdrawalFee { get; set; }

        /// <summary>
        /// Gets or Sets MinFee
        /// </summary>
        [DataMember(Name="minFee", EmitDefaultValue=false)]
        public double? MinFee { get; set; }

        /// <summary>
        /// Gets or Sets MaxFee
        /// </summary>
        [DataMember(Name="maxFee", EmitDefaultValue=false)]
        public double? MaxFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetsConfigNetworkItem {\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  TokenAddress: ").Append(TokenAddress).Append("\n");
            sb.Append("  DepositEnabled: ").Append(DepositEnabled).Append("\n");
            sb.Append("  WithdrawalEnabled: ").Append(WithdrawalEnabled).Append("\n");
            sb.Append("  WithdrawalFee: ").Append(WithdrawalFee).Append("\n");
            sb.Append("  MinFee: ").Append(MinFee).Append("\n");
            sb.Append("  MaxFee: ").Append(MaxFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetsConfigNetworkItem);
        }

        /// <summary>
        /// Returns true if AssetsConfigNetworkItem instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetsConfigNetworkItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetsConfigNetworkItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Asset == input.Asset ||
                    (this.Asset != null &&
                    this.Asset.Equals(input.Asset))
                ) && 
                (
                    this.TokenAddress == input.TokenAddress ||
                    (this.TokenAddress != null &&
                    this.TokenAddress.Equals(input.TokenAddress))
                ) && 
                (
                    this.DepositEnabled == input.DepositEnabled ||
                    (this.DepositEnabled != null &&
                    this.DepositEnabled.Equals(input.DepositEnabled))
                ) && 
                (
                    this.WithdrawalEnabled == input.WithdrawalEnabled ||
                    (this.WithdrawalEnabled != null &&
                    this.WithdrawalEnabled.Equals(input.WithdrawalEnabled))
                ) && 
                (
                    this.WithdrawalFee == input.WithdrawalFee ||
                    (this.WithdrawalFee != null &&
                    this.WithdrawalFee.Equals(input.WithdrawalFee))
                ) && 
                (
                    this.MinFee == input.MinFee ||
                    (this.MinFee != null &&
                    this.MinFee.Equals(input.MinFee))
                ) && 
                (
                    this.MaxFee == input.MaxFee ||
                    (this.MaxFee != null &&
                    this.MaxFee.Equals(input.MaxFee))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Asset != null)
                    hashCode = hashCode * 59 + this.Asset.GetHashCode();
                if (this.TokenAddress != null)
                    hashCode = hashCode * 59 + this.TokenAddress.GetHashCode();
                if (this.DepositEnabled != null)
                    hashCode = hashCode * 59 + this.DepositEnabled.GetHashCode();
                if (this.WithdrawalEnabled != null)
                    hashCode = hashCode * 59 + this.WithdrawalEnabled.GetHashCode();
                if (this.WithdrawalFee != null)
                    hashCode = hashCode * 59 + this.WithdrawalFee.GetHashCode();
                if (this.MinFee != null)
                    hashCode = hashCode * 59 + this.MinFee.GetHashCode();
                if (this.MaxFee != null)
                    hashCode = hashCode * 59 + this.MaxFee.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
