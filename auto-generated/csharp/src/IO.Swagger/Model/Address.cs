/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Address
    /// </summary>
    [DataContract]
    public partial class Address :  IEquatable<Address>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Address() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="currency">currency.</param>
        /// <param name="created">created.</param>
        /// <param name="userId">userId.</param>
        /// <param name="address">address (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="note">note.</param>
        /// <param name="skipConfirm">skipConfirm.</param>
        /// <param name="skipConfirmVerified">skipConfirmVerified.</param>
        /// <param name="skip2FA">skip2FA.</param>
        /// <param name="skip2FAVerified">skip2FAVerified.</param>
        /// <param name="network">network (required).</param>
        public Address(decimal? id = default(decimal?), string currency = default(string), DateTime? created = default(DateTime?), double? userId = default(double?), string address = default(string), string name = default(string), string note = default(string), bool? skipConfirm = default(bool?), bool? skipConfirmVerified = default(bool?), bool? skip2FA = default(bool?), bool? skip2FAVerified = default(bool?), string network = default(string))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for Address and cannot be null");
            }
            else
            {
                this._Address = address;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Address and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "network" is required (not null)
            if (network == null)
            {
                throw new InvalidDataException("network is a required property for Address and cannot be null");
            }
            else
            {
                this.Network = network;
            }
            this.Id = id;
            this.Currency = currency;
            this.Created = created;
            this.UserId = userId;
            this.Note = note;
            this.SkipConfirm = skipConfirm;
            this.SkipConfirmVerified = skipConfirmVerified;
            this.Skip2FA = skip2FA;
            this.Skip2FAVerified = skip2FAVerified;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public decimal? Id { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public double? UserId { get; set; }

        /// <summary>
        /// Gets or Sets _Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string _Address { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets SkipConfirm
        /// </summary>
        [DataMember(Name="skipConfirm", EmitDefaultValue=false)]
        public bool? SkipConfirm { get; set; }

        /// <summary>
        /// Gets or Sets SkipConfirmVerified
        /// </summary>
        [DataMember(Name="skipConfirmVerified", EmitDefaultValue=false)]
        public bool? SkipConfirmVerified { get; set; }

        /// <summary>
        /// Gets or Sets Skip2FA
        /// </summary>
        [DataMember(Name="skip2FA", EmitDefaultValue=false)]
        public bool? Skip2FA { get; set; }

        /// <summary>
        /// Gets or Sets Skip2FAVerified
        /// </summary>
        [DataMember(Name="skip2FAVerified", EmitDefaultValue=false)]
        public bool? Skip2FAVerified { get; set; }

        /// <summary>
        /// Gets or Sets Network
        /// </summary>
        [DataMember(Name="network", EmitDefaultValue=false)]
        public string Network { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  _Address: ").Append(_Address).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  SkipConfirm: ").Append(SkipConfirm).Append("\n");
            sb.Append("  SkipConfirmVerified: ").Append(SkipConfirmVerified).Append("\n");
            sb.Append("  Skip2FA: ").Append(Skip2FA).Append("\n");
            sb.Append("  Skip2FAVerified: ").Append(Skip2FAVerified).Append("\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Address);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="input">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this._Address == input._Address ||
                    (this._Address != null &&
                    this._Address.Equals(input._Address))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.SkipConfirm == input.SkipConfirm ||
                    (this.SkipConfirm != null &&
                    this.SkipConfirm.Equals(input.SkipConfirm))
                ) && 
                (
                    this.SkipConfirmVerified == input.SkipConfirmVerified ||
                    (this.SkipConfirmVerified != null &&
                    this.SkipConfirmVerified.Equals(input.SkipConfirmVerified))
                ) && 
                (
                    this.Skip2FA == input.Skip2FA ||
                    (this.Skip2FA != null &&
                    this.Skip2FA.Equals(input.Skip2FA))
                ) && 
                (
                    this.Skip2FAVerified == input.Skip2FAVerified ||
                    (this.Skip2FAVerified != null &&
                    this.Skip2FAVerified.Equals(input.Skip2FAVerified))
                ) && 
                (
                    this.Network == input.Network ||
                    (this.Network != null &&
                    this.Network.Equals(input.Network))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this._Address != null)
                    hashCode = hashCode * 59 + this._Address.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.SkipConfirm != null)
                    hashCode = hashCode * 59 + this.SkipConfirm.GetHashCode();
                if (this.SkipConfirmVerified != null)
                    hashCode = hashCode * 59 + this.SkipConfirmVerified.GetHashCode();
                if (this.Skip2FA != null)
                    hashCode = hashCode * 59 + this.Skip2FA.GetHashCode();
                if (this.Skip2FAVerified != null)
                    hashCode = hashCode * 59 + this.Skip2FAVerified.GetHashCode();
                if (this.Network != null)
                    hashCode = hashCode * 59 + this.Network.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
