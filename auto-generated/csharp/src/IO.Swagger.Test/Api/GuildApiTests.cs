/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing GuildApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GuildApiTests
    {
        private GuildApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GuildApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GuildApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GuildApi
            //Assert.IsInstanceOfType(typeof(GuildApi), instance, "instance is a GuildApi");
        }

        
        /// <summary>
        /// Test GuildArchive
        /// </summary>
        [Test]
        public void GuildArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GuildArchive();
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GuildEdit
        /// </summary>
        [Test]
        public void GuildEditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string emoji = null;
            //double? potDistributionPercent = null;
            //string potDistributionType = null;
            //double? potTraderId = null;
            //string description = null;
            //string twitter = null;
            //string discord = null;
            //string imgUrl = null;
            //bool? isPrivate = null;
            //var response = instance.GuildEdit(name, emoji, potDistributionPercent, potDistributionType, potTraderId, description, twitter, discord, imgUrl, isPrivate);
            //Assert.IsInstanceOf<Guild> (response, "response is Guild");
        }
        
        /// <summary>
        /// Test GuildGet
        /// </summary>
        [Test]
        public void GuildGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GuildGet();
            //Assert.IsInstanceOf<List<XAny>> (response, "response is List<XAny>");
        }
        
        /// <summary>
        /// Test GuildJoin
        /// </summary>
        [Test]
        public void GuildJoinTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //var response = instance.GuildJoin(code);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GuildKick
        /// </summary>
        [Test]
        public void GuildKickTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //double? memberUserId = null;
            //var response = instance.GuildKick(memberUserId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GuildLeave
        /// </summary>
        [Test]
        public void GuildLeaveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GuildLeave();
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GuildNew
        /// </summary>
        [Test]
        public void GuildNewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string emoji = null;
            //double? potDistributionPercent = null;
            //string potDistributionType = null;
            //string description = null;
            //string twitter = null;
            //string discord = null;
            //string imgUrl = null;
            //bool? isPrivate = null;
            //var response = instance.GuildNew(name, emoji, potDistributionPercent, potDistributionType, description, twitter, discord, imgUrl, isPrivate);
            //Assert.IsInstanceOf<Guild> (response, "response is Guild");
        }
        
        /// <summary>
        /// Test GuildShareTrades
        /// </summary>
        [Test]
        public void GuildShareTradesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? shareTrades = null;
            //var response = instance.GuildShareTrades(shareTrades);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
    }

}
