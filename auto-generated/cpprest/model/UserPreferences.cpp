/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.38-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserPreferences.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

UserPreferences::UserPreferences()
{
    m_AlertOnLiquidations = false;
    m_AlertOnLiquidationsIsSet = false;
    m_AnimationsEnabled = false;
    m_AnimationsEnabledIsSet = false;
    m_AnnouncementsLastSeen = utility::datetime();
    m_AnnouncementsLastSeenIsSet = false;
    m_ChatChannelID = 0.0;
    m_ChatChannelIDIsSet = false;
    m_ColorTheme = utility::conversions::to_string_t("");
    m_ColorThemeIsSet = false;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_Debug = false;
    m_DebugIsSet = false;
    m_DisableEmailsIsSet = false;
    m_DisablePushIsSet = false;
    m_DisplayCorpEnrollUpsell = false;
    m_DisplayCorpEnrollUpsellIsSet = false;
    m_EquivalentCurrency = utility::conversions::to_string_t("");
    m_EquivalentCurrencyIsSet = false;
    m_FeaturesIsSet = false;
    m_FavouritesIsSet = false;
    m_FavouritesAssetsIsSet = false;
    m_FavouritesOrderedIsSet = false;
    m_HideConfirmDialogsIsSet = false;
    m_HideConnectionModal = false;
    m_HideConnectionModalIsSet = false;
    m_HideFromLeaderboard = false;
    m_HideFromLeaderboardIsSet = false;
    m_HideNameFromLeaderboard = false;
    m_HideNameFromLeaderboardIsSet = false;
    m_HideNotificationsIsSet = false;
    m_HidePhoneConfirm = false;
    m_HidePhoneConfirmIsSet = false;
    m_IsSensitiveInfoVisible = false;
    m_IsSensitiveInfoVisibleIsSet = false;
    m_IsWalletZeroBalanceHidden = false;
    m_IsWalletZeroBalanceHiddenIsSet = false;
    m_Locale = utility::conversions::to_string_t("");
    m_LocaleIsSet = false;
    m_LocaleSetTime = 0.0;
    m_LocaleSetTimeIsSet = false;
    m_MarginPnlRow = utility::conversions::to_string_t("");
    m_MarginPnlRowIsSet = false;
    m_MarginPnlRowKind = utility::conversions::to_string_t("");
    m_MarginPnlRowKindIsSet = false;
    m_MsgsSeenIsSet = false;
    m_NotificationsIsSet = false;
    m_OrderBookBinningIsSet = false;
    m_OrderBookType = utility::conversions::to_string_t("");
    m_OrderBookTypeIsSet = false;
    m_OrderClearImmediate = false;
    m_OrderClearImmediateIsSet = false;
    m_OrderControlsPlusMinus = false;
    m_OrderControlsPlusMinusIsSet = false;
    m_PlatformLayout = utility::conversions::to_string_t("");
    m_PlatformLayoutIsSet = false;
    m_SelectedFiatCurrency = utility::conversions::to_string_t("");
    m_SelectedFiatCurrencyIsSet = false;
    m_ShowChartBottomToolbar = false;
    m_ShowChartBottomToolbarIsSet = false;
    m_ShowLocaleNumbers = false;
    m_ShowLocaleNumbersIsSet = false;
    m_SoundsIsSet = false;
    m_StrictIPCheck = false;
    m_StrictIPCheckIsSet = false;
    m_StrictTimeout = false;
    m_StrictTimeoutIsSet = false;
    m_TickerGroup = utility::conversions::to_string_t("");
    m_TickerGroupIsSet = false;
    m_TickerPinned = false;
    m_TickerPinnedIsSet = false;
    m_TradeLayout = utility::conversions::to_string_t("");
    m_TradeLayoutIsSet = false;
    m_UserColor = utility::conversions::to_string_t("");
    m_UserColorIsSet = false;
}

UserPreferences::~UserPreferences()
{
}

void UserPreferences::validate()
{
    // TODO: implement validation
}

web::json::value UserPreferences::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AlertOnLiquidationsIsSet)
    {
        val[utility::conversions::to_string_t("alertOnLiquidations")] = ModelBase::toJson(m_AlertOnLiquidations);
    }
    if(m_AnimationsEnabledIsSet)
    {
        val[utility::conversions::to_string_t("animationsEnabled")] = ModelBase::toJson(m_AnimationsEnabled);
    }
    if(m_AnnouncementsLastSeenIsSet)
    {
        val[utility::conversions::to_string_t("announcementsLastSeen")] = ModelBase::toJson(m_AnnouncementsLastSeen);
    }
    if(m_ChatChannelIDIsSet)
    {
        val[utility::conversions::to_string_t("chatChannelID")] = ModelBase::toJson(m_ChatChannelID);
    }
    if(m_ColorThemeIsSet)
    {
        val[utility::conversions::to_string_t("colorTheme")] = ModelBase::toJson(m_ColorTheme);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    }
    if(m_DebugIsSet)
    {
        val[utility::conversions::to_string_t("debug")] = ModelBase::toJson(m_Debug);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_DisableEmails )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("disableEmails")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_DisablePush )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("disablePush")] = web::json::value::array(jsonArray);
        }
    }
    if(m_DisplayCorpEnrollUpsellIsSet)
    {
        val[utility::conversions::to_string_t("displayCorpEnrollUpsell")] = ModelBase::toJson(m_DisplayCorpEnrollUpsell);
    }
    if(m_EquivalentCurrencyIsSet)
    {
        val[utility::conversions::to_string_t("equivalentCurrency")] = ModelBase::toJson(m_EquivalentCurrency);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Features )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("features")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Favourites )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("favourites")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_FavouritesAssets )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("favouritesAssets")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_FavouritesOrdered )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("favouritesOrdered")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_HideConfirmDialogs )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("hideConfirmDialogs")] = web::json::value::array(jsonArray);
        }
    }
    if(m_HideConnectionModalIsSet)
    {
        val[utility::conversions::to_string_t("hideConnectionModal")] = ModelBase::toJson(m_HideConnectionModal);
    }
    if(m_HideFromLeaderboardIsSet)
    {
        val[utility::conversions::to_string_t("hideFromLeaderboard")] = ModelBase::toJson(m_HideFromLeaderboard);
    }
    if(m_HideNameFromLeaderboardIsSet)
    {
        val[utility::conversions::to_string_t("hideNameFromLeaderboard")] = ModelBase::toJson(m_HideNameFromLeaderboard);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_HideNotifications )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("hideNotifications")] = web::json::value::array(jsonArray);
        }
    }
    if(m_HidePhoneConfirmIsSet)
    {
        val[utility::conversions::to_string_t("hidePhoneConfirm")] = ModelBase::toJson(m_HidePhoneConfirm);
    }
    if(m_IsSensitiveInfoVisibleIsSet)
    {
        val[utility::conversions::to_string_t("isSensitiveInfoVisible")] = ModelBase::toJson(m_IsSensitiveInfoVisible);
    }
    if(m_IsWalletZeroBalanceHiddenIsSet)
    {
        val[utility::conversions::to_string_t("isWalletZeroBalanceHidden")] = ModelBase::toJson(m_IsWalletZeroBalanceHidden);
    }
    if(m_LocaleIsSet)
    {
        val[utility::conversions::to_string_t("locale")] = ModelBase::toJson(m_Locale);
    }
    if(m_LocaleSetTimeIsSet)
    {
        val[utility::conversions::to_string_t("localeSetTime")] = ModelBase::toJson(m_LocaleSetTime);
    }
    if(m_MarginPnlRowIsSet)
    {
        val[utility::conversions::to_string_t("marginPnlRow")] = ModelBase::toJson(m_MarginPnlRow);
    }
    if(m_MarginPnlRowKindIsSet)
    {
        val[utility::conversions::to_string_t("marginPnlRowKind")] = ModelBase::toJson(m_MarginPnlRowKind);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_MsgsSeen )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("msgsSeen")] = web::json::value::array(jsonArray);
        }
    }
    if(m_NotificationsIsSet)
    {
        val[utility::conversions::to_string_t("notifications")] = ModelBase::toJson(m_Notifications);
    }
    if(m_OrderBookBinningIsSet)
    {
        val[utility::conversions::to_string_t("orderBookBinning")] = ModelBase::toJson(m_OrderBookBinning);
    }
    if(m_OrderBookTypeIsSet)
    {
        val[utility::conversions::to_string_t("orderBookType")] = ModelBase::toJson(m_OrderBookType);
    }
    if(m_OrderClearImmediateIsSet)
    {
        val[utility::conversions::to_string_t("orderClearImmediate")] = ModelBase::toJson(m_OrderClearImmediate);
    }
    if(m_OrderControlsPlusMinusIsSet)
    {
        val[utility::conversions::to_string_t("orderControlsPlusMinus")] = ModelBase::toJson(m_OrderControlsPlusMinus);
    }
    if(m_PlatformLayoutIsSet)
    {
        val[utility::conversions::to_string_t("platformLayout")] = ModelBase::toJson(m_PlatformLayout);
    }
    if(m_SelectedFiatCurrencyIsSet)
    {
        val[utility::conversions::to_string_t("selectedFiatCurrency")] = ModelBase::toJson(m_SelectedFiatCurrency);
    }
    if(m_ShowChartBottomToolbarIsSet)
    {
        val[utility::conversions::to_string_t("showChartBottomToolbar")] = ModelBase::toJson(m_ShowChartBottomToolbar);
    }
    if(m_ShowLocaleNumbersIsSet)
    {
        val[utility::conversions::to_string_t("showLocaleNumbers")] = ModelBase::toJson(m_ShowLocaleNumbers);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Sounds )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("sounds")] = web::json::value::array(jsonArray);
        }
    }
    if(m_StrictIPCheckIsSet)
    {
        val[utility::conversions::to_string_t("strictIPCheck")] = ModelBase::toJson(m_StrictIPCheck);
    }
    if(m_StrictTimeoutIsSet)
    {
        val[utility::conversions::to_string_t("strictTimeout")] = ModelBase::toJson(m_StrictTimeout);
    }
    if(m_TickerGroupIsSet)
    {
        val[utility::conversions::to_string_t("tickerGroup")] = ModelBase::toJson(m_TickerGroup);
    }
    if(m_TickerPinnedIsSet)
    {
        val[utility::conversions::to_string_t("tickerPinned")] = ModelBase::toJson(m_TickerPinned);
    }
    if(m_TradeLayoutIsSet)
    {
        val[utility::conversions::to_string_t("tradeLayout")] = ModelBase::toJson(m_TradeLayout);
    }
    if(m_UserColorIsSet)
    {
        val[utility::conversions::to_string_t("userColor")] = ModelBase::toJson(m_UserColor);
    }

    return val;
}

void UserPreferences::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("alertOnLiquidations")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("alertOnLiquidations")];
        if(!fieldValue.is_null())
        {
            setAlertOnLiquidations(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("animationsEnabled")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("animationsEnabled")];
        if(!fieldValue.is_null())
        {
            setAnimationsEnabled(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("announcementsLastSeen")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("announcementsLastSeen")];
        if(!fieldValue.is_null())
        {
            setAnnouncementsLastSeen(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chatChannelID")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("chatChannelID")];
        if(!fieldValue.is_null())
        {
            setChatChannelID(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("colorTheme")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("colorTheme")];
        if(!fieldValue.is_null())
        {
            setColorTheme(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("currency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("currency")];
        if(!fieldValue.is_null())
        {
            setCurrency(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("debug")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("debug")];
        if(!fieldValue.is_null())
        {
            setDebug(ModelBase::boolFromJson(fieldValue));
        }
    }
    {
        m_DisableEmails.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("disableEmails")))
        {
        for( auto& item : val[utility::conversions::to_string_t("disableEmails")].as_array() )
        {
            m_DisableEmails.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_DisablePush.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("disablePush")))
        {
        for( auto& item : val[utility::conversions::to_string_t("disablePush")].as_array() )
        {
            m_DisablePush.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayCorpEnrollUpsell")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("displayCorpEnrollUpsell")];
        if(!fieldValue.is_null())
        {
            setDisplayCorpEnrollUpsell(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("equivalentCurrency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("equivalentCurrency")];
        if(!fieldValue.is_null())
        {
            setEquivalentCurrency(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_Features.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("features")))
        {
        for( auto& item : val[utility::conversions::to_string_t("features")].as_array() )
        {
            m_Features.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Favourites.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("favourites")))
        {
        for( auto& item : val[utility::conversions::to_string_t("favourites")].as_array() )
        {
            m_Favourites.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_FavouritesAssets.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("favouritesAssets")))
        {
        for( auto& item : val[utility::conversions::to_string_t("favouritesAssets")].as_array() )
        {
            m_FavouritesAssets.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_FavouritesOrdered.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("favouritesOrdered")))
        {
        for( auto& item : val[utility::conversions::to_string_t("favouritesOrdered")].as_array() )
        {
            m_FavouritesOrdered.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_HideConfirmDialogs.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("hideConfirmDialogs")))
        {
        for( auto& item : val[utility::conversions::to_string_t("hideConfirmDialogs")].as_array() )
        {
            m_HideConfirmDialogs.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hideConnectionModal")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("hideConnectionModal")];
        if(!fieldValue.is_null())
        {
            setHideConnectionModal(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hideFromLeaderboard")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("hideFromLeaderboard")];
        if(!fieldValue.is_null())
        {
            setHideFromLeaderboard(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hideNameFromLeaderboard")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("hideNameFromLeaderboard")];
        if(!fieldValue.is_null())
        {
            setHideNameFromLeaderboard(ModelBase::boolFromJson(fieldValue));
        }
    }
    {
        m_HideNotifications.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("hideNotifications")))
        {
        for( auto& item : val[utility::conversions::to_string_t("hideNotifications")].as_array() )
        {
            m_HideNotifications.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hidePhoneConfirm")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("hidePhoneConfirm")];
        if(!fieldValue.is_null())
        {
            setHidePhoneConfirm(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isSensitiveInfoVisible")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("isSensitiveInfoVisible")];
        if(!fieldValue.is_null())
        {
            setIsSensitiveInfoVisible(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isWalletZeroBalanceHidden")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("isWalletZeroBalanceHidden")];
        if(!fieldValue.is_null())
        {
            setIsWalletZeroBalanceHidden(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locale")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("locale")];
        if(!fieldValue.is_null())
        {
            setLocale(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("localeSetTime")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("localeSetTime")];
        if(!fieldValue.is_null())
        {
            setLocaleSetTime(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("marginPnlRow")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("marginPnlRow")];
        if(!fieldValue.is_null())
        {
            setMarginPnlRow(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("marginPnlRowKind")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("marginPnlRowKind")];
        if(!fieldValue.is_null())
        {
            setMarginPnlRowKind(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_MsgsSeen.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("msgsSeen")))
        {
        for( auto& item : val[utility::conversions::to_string_t("msgsSeen")].as_array() )
        {
            m_MsgsSeen.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notifications")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("notifications")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setNotifications( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("orderBookBinning")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("orderBookBinning")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setOrderBookBinning( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("orderBookType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("orderBookType")];
        if(!fieldValue.is_null())
        {
            setOrderBookType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("orderClearImmediate")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("orderClearImmediate")];
        if(!fieldValue.is_null())
        {
            setOrderClearImmediate(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("orderControlsPlusMinus")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("orderControlsPlusMinus")];
        if(!fieldValue.is_null())
        {
            setOrderControlsPlusMinus(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("platformLayout")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("platformLayout")];
        if(!fieldValue.is_null())
        {
            setPlatformLayout(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("selectedFiatCurrency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("selectedFiatCurrency")];
        if(!fieldValue.is_null())
        {
            setSelectedFiatCurrency(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("showChartBottomToolbar")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("showChartBottomToolbar")];
        if(!fieldValue.is_null())
        {
            setShowChartBottomToolbar(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("showLocaleNumbers")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("showLocaleNumbers")];
        if(!fieldValue.is_null())
        {
            setShowLocaleNumbers(ModelBase::boolFromJson(fieldValue));
        }
    }
    {
        m_Sounds.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("sounds")))
        {
        for( auto& item : val[utility::conversions::to_string_t("sounds")].as_array() )
        {
            m_Sounds.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("strictIPCheck")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("strictIPCheck")];
        if(!fieldValue.is_null())
        {
            setStrictIPCheck(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("strictTimeout")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("strictTimeout")];
        if(!fieldValue.is_null())
        {
            setStrictTimeout(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tickerGroup")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tickerGroup")];
        if(!fieldValue.is_null())
        {
            setTickerGroup(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tickerPinned")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tickerPinned")];
        if(!fieldValue.is_null())
        {
            setTickerPinned(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tradeLayout")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tradeLayout")];
        if(!fieldValue.is_null())
        {
            setTradeLayout(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userColor")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("userColor")];
        if(!fieldValue.is_null())
        {
            setUserColor(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void UserPreferences::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_AlertOnLiquidationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alertOnLiquidations"), m_AlertOnLiquidations));
    }
    if(m_AnimationsEnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("animationsEnabled"), m_AnimationsEnabled));
    }
    if(m_AnnouncementsLastSeenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("announcementsLastSeen"), m_AnnouncementsLastSeen));
        
    }
    if(m_ChatChannelIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chatChannelID"), m_ChatChannelID));
    }
    if(m_ColorThemeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("colorTheme"), m_ColorTheme));
        
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency"), m_Currency));
        
    }
    if(m_DebugIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("debug"), m_Debug));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_DisableEmails )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("disableEmails"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_DisablePush )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("disablePush"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_DisplayCorpEnrollUpsellIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayCorpEnrollUpsell"), m_DisplayCorpEnrollUpsell));
    }
    if(m_EquivalentCurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("equivalentCurrency"), m_EquivalentCurrency));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Features )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("features"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Favourites )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("favourites"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_FavouritesAssets )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("favouritesAssets"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_FavouritesOrdered )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("favouritesOrdered"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_HideConfirmDialogs )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hideConfirmDialogs"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_HideConnectionModalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hideConnectionModal"), m_HideConnectionModal));
    }
    if(m_HideFromLeaderboardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hideFromLeaderboard"), m_HideFromLeaderboard));
    }
    if(m_HideNameFromLeaderboardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hideNameFromLeaderboard"), m_HideNameFromLeaderboard));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_HideNotifications )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hideNotifications"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_HidePhoneConfirmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hidePhoneConfirm"), m_HidePhoneConfirm));
    }
    if(m_IsSensitiveInfoVisibleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isSensitiveInfoVisible"), m_IsSensitiveInfoVisible));
    }
    if(m_IsWalletZeroBalanceHiddenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isWalletZeroBalanceHidden"), m_IsWalletZeroBalanceHidden));
    }
    if(m_LocaleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locale"), m_Locale));
        
    }
    if(m_LocaleSetTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localeSetTime"), m_LocaleSetTime));
    }
    if(m_MarginPnlRowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("marginPnlRow"), m_MarginPnlRow));
        
    }
    if(m_MarginPnlRowKindIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("marginPnlRowKind"), m_MarginPnlRowKind));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_MsgsSeen )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("msgsSeen"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_NotificationsIsSet)
    {
        if (m_Notifications.get())
        {
            m_Notifications->toMultipart(multipart, utility::conversions::to_string_t("notifications."));
        }
        
    }
    if(m_OrderBookBinningIsSet)
    {
        if (m_OrderBookBinning.get())
        {
            m_OrderBookBinning->toMultipart(multipart, utility::conversions::to_string_t("orderBookBinning."));
        }
        
    }
    if(m_OrderBookTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("orderBookType"), m_OrderBookType));
        
    }
    if(m_OrderClearImmediateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("orderClearImmediate"), m_OrderClearImmediate));
    }
    if(m_OrderControlsPlusMinusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("orderControlsPlusMinus"), m_OrderControlsPlusMinus));
    }
    if(m_PlatformLayoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("platformLayout"), m_PlatformLayout));
        
    }
    if(m_SelectedFiatCurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("selectedFiatCurrency"), m_SelectedFiatCurrency));
        
    }
    if(m_ShowChartBottomToolbarIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("showChartBottomToolbar"), m_ShowChartBottomToolbar));
    }
    if(m_ShowLocaleNumbersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("showLocaleNumbers"), m_ShowLocaleNumbers));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Sounds )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sounds"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_StrictIPCheckIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("strictIPCheck"), m_StrictIPCheck));
    }
    if(m_StrictTimeoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("strictTimeout"), m_StrictTimeout));
    }
    if(m_TickerGroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tickerGroup"), m_TickerGroup));
        
    }
    if(m_TickerPinnedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tickerPinned"), m_TickerPinned));
    }
    if(m_TradeLayoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tradeLayout"), m_TradeLayout));
        
    }
    if(m_UserColorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userColor"), m_UserColor));
        
    }
}

void UserPreferences::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("alertOnLiquidations")))
    {
        setAlertOnLiquidations(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alertOnLiquidations"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("animationsEnabled")))
    {
        setAnimationsEnabled(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("animationsEnabled"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("announcementsLastSeen")))
    {
        setAnnouncementsLastSeen(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("announcementsLastSeen"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("chatChannelID")))
    {
        setChatChannelID(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chatChannelID"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("colorTheme")))
    {
        setColorTheme(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("colorTheme"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currency")))
    {
        setCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("debug")))
    {
        setDebug(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("debug"))));
    }
    {
        m_DisableEmails.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("disableEmails")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("disableEmails"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_DisableEmails.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_DisablePush.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("disablePush")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("disablePush"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_DisablePush.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayCorpEnrollUpsell")))
    {
        setDisplayCorpEnrollUpsell(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayCorpEnrollUpsell"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("equivalentCurrency")))
    {
        setEquivalentCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("equivalentCurrency"))));
    }
    {
        m_Features.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("features")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("features"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Features.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Favourites.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("favourites")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("favourites"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Favourites.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_FavouritesAssets.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("favouritesAssets")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("favouritesAssets"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_FavouritesAssets.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_FavouritesOrdered.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("favouritesOrdered")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("favouritesOrdered"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_FavouritesOrdered.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_HideConfirmDialogs.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("hideConfirmDialogs")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("hideConfirmDialogs"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_HideConfirmDialogs.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hideConnectionModal")))
    {
        setHideConnectionModal(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("hideConnectionModal"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hideFromLeaderboard")))
    {
        setHideFromLeaderboard(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("hideFromLeaderboard"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hideNameFromLeaderboard")))
    {
        setHideNameFromLeaderboard(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("hideNameFromLeaderboard"))));
    }
    {
        m_HideNotifications.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("hideNotifications")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("hideNotifications"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_HideNotifications.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hidePhoneConfirm")))
    {
        setHidePhoneConfirm(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("hidePhoneConfirm"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isSensitiveInfoVisible")))
    {
        setIsSensitiveInfoVisible(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isSensitiveInfoVisible"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isWalletZeroBalanceHidden")))
    {
        setIsWalletZeroBalanceHidden(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isWalletZeroBalanceHidden"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locale")))
    {
        setLocale(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("locale"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localeSetTime")))
    {
        setLocaleSetTime(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("localeSetTime"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("marginPnlRow")))
    {
        setMarginPnlRow(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("marginPnlRow"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("marginPnlRowKind")))
    {
        setMarginPnlRowKind(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("marginPnlRowKind"))));
    }
    {
        m_MsgsSeen.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("msgsSeen")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("msgsSeen"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_MsgsSeen.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notifications")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("notifications")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("notifications."));
            setNotifications( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("orderBookBinning")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("orderBookBinning")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("orderBookBinning."));
            setOrderBookBinning( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("orderBookType")))
    {
        setOrderBookType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("orderBookType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("orderClearImmediate")))
    {
        setOrderClearImmediate(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("orderClearImmediate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("orderControlsPlusMinus")))
    {
        setOrderControlsPlusMinus(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("orderControlsPlusMinus"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("platformLayout")))
    {
        setPlatformLayout(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("platformLayout"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("selectedFiatCurrency")))
    {
        setSelectedFiatCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("selectedFiatCurrency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("showChartBottomToolbar")))
    {
        setShowChartBottomToolbar(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("showChartBottomToolbar"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("showLocaleNumbers")))
    {
        setShowLocaleNumbers(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("showLocaleNumbers"))));
    }
    {
        m_Sounds.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("sounds")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sounds"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Sounds.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("strictIPCheck")))
    {
        setStrictIPCheck(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("strictIPCheck"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("strictTimeout")))
    {
        setStrictTimeout(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("strictTimeout"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tickerGroup")))
    {
        setTickerGroup(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tickerGroup"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tickerPinned")))
    {
        setTickerPinned(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tickerPinned"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tradeLayout")))
    {
        setTradeLayout(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tradeLayout"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userColor")))
    {
        setUserColor(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("userColor"))));
    }
}

bool UserPreferences::isAlertOnLiquidations() const
{
    return m_AlertOnLiquidations;
}


void UserPreferences::setAlertOnLiquidations(bool value)
{
    m_AlertOnLiquidations = value;
    m_AlertOnLiquidationsIsSet = true;
}
bool UserPreferences::alertOnLiquidationsIsSet() const
{
    return m_AlertOnLiquidationsIsSet;
}

void UserPreferences::unsetAlertOnLiquidations()
{
    m_AlertOnLiquidationsIsSet = false;
}

bool UserPreferences::isAnimationsEnabled() const
{
    return m_AnimationsEnabled;
}


void UserPreferences::setAnimationsEnabled(bool value)
{
    m_AnimationsEnabled = value;
    m_AnimationsEnabledIsSet = true;
}
bool UserPreferences::animationsEnabledIsSet() const
{
    return m_AnimationsEnabledIsSet;
}

void UserPreferences::unsetAnimationsEnabled()
{
    m_AnimationsEnabledIsSet = false;
}

utility::datetime UserPreferences::getAnnouncementsLastSeen() const
{
    return m_AnnouncementsLastSeen;
}


void UserPreferences::setAnnouncementsLastSeen(utility::datetime value)
{
    m_AnnouncementsLastSeen = value;
    m_AnnouncementsLastSeenIsSet = true;
}
bool UserPreferences::announcementsLastSeenIsSet() const
{
    return m_AnnouncementsLastSeenIsSet;
}

void UserPreferences::unsetAnnouncementsLastSeen()
{
    m_AnnouncementsLastSeenIsSet = false;
}

double UserPreferences::getChatChannelID() const
{
    return m_ChatChannelID;
}


void UserPreferences::setChatChannelID(double value)
{
    m_ChatChannelID = value;
    m_ChatChannelIDIsSet = true;
}
bool UserPreferences::chatChannelIDIsSet() const
{
    return m_ChatChannelIDIsSet;
}

void UserPreferences::unsetChatChannelID()
{
    m_ChatChannelIDIsSet = false;
}

utility::string_t UserPreferences::getColorTheme() const
{
    return m_ColorTheme;
}


void UserPreferences::setColorTheme(utility::string_t value)
{
    m_ColorTheme = value;
    m_ColorThemeIsSet = true;
}
bool UserPreferences::colorThemeIsSet() const
{
    return m_ColorThemeIsSet;
}

void UserPreferences::unsetColorTheme()
{
    m_ColorThemeIsSet = false;
}

utility::string_t UserPreferences::getCurrency() const
{
    return m_Currency;
}


void UserPreferences::setCurrency(utility::string_t value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool UserPreferences::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void UserPreferences::unsetCurrency()
{
    m_CurrencyIsSet = false;
}

bool UserPreferences::isDebug() const
{
    return m_Debug;
}


void UserPreferences::setDebug(bool value)
{
    m_Debug = value;
    m_DebugIsSet = true;
}
bool UserPreferences::debugIsSet() const
{
    return m_DebugIsSet;
}

void UserPreferences::unsetDebug()
{
    m_DebugIsSet = false;
}

std::vector<utility::string_t>& UserPreferences::getDisableEmails()
{
    return m_DisableEmails;
}

void UserPreferences::setDisableEmails(std::vector<utility::string_t> value)
{
    m_DisableEmails = value;
    m_DisableEmailsIsSet = true;
}
bool UserPreferences::disableEmailsIsSet() const
{
    return m_DisableEmailsIsSet;
}

void UserPreferences::unsetDisableEmails()
{
    m_DisableEmailsIsSet = false;
}

std::vector<utility::string_t>& UserPreferences::getDisablePush()
{
    return m_DisablePush;
}

void UserPreferences::setDisablePush(std::vector<utility::string_t> value)
{
    m_DisablePush = value;
    m_DisablePushIsSet = true;
}
bool UserPreferences::disablePushIsSet() const
{
    return m_DisablePushIsSet;
}

void UserPreferences::unsetDisablePush()
{
    m_DisablePushIsSet = false;
}

bool UserPreferences::isDisplayCorpEnrollUpsell() const
{
    return m_DisplayCorpEnrollUpsell;
}


void UserPreferences::setDisplayCorpEnrollUpsell(bool value)
{
    m_DisplayCorpEnrollUpsell = value;
    m_DisplayCorpEnrollUpsellIsSet = true;
}
bool UserPreferences::displayCorpEnrollUpsellIsSet() const
{
    return m_DisplayCorpEnrollUpsellIsSet;
}

void UserPreferences::unsetDisplayCorpEnrollUpsell()
{
    m_DisplayCorpEnrollUpsellIsSet = false;
}

utility::string_t UserPreferences::getEquivalentCurrency() const
{
    return m_EquivalentCurrency;
}


void UserPreferences::setEquivalentCurrency(utility::string_t value)
{
    m_EquivalentCurrency = value;
    m_EquivalentCurrencyIsSet = true;
}
bool UserPreferences::equivalentCurrencyIsSet() const
{
    return m_EquivalentCurrencyIsSet;
}

void UserPreferences::unsetEquivalentCurrency()
{
    m_EquivalentCurrencyIsSet = false;
}

std::vector<utility::string_t>& UserPreferences::getFeatures()
{
    return m_Features;
}

void UserPreferences::setFeatures(std::vector<utility::string_t> value)
{
    m_Features = value;
    m_FeaturesIsSet = true;
}
bool UserPreferences::featuresIsSet() const
{
    return m_FeaturesIsSet;
}

void UserPreferences::unsetFeatures()
{
    m_FeaturesIsSet = false;
}

std::vector<utility::string_t>& UserPreferences::getFavourites()
{
    return m_Favourites;
}

void UserPreferences::setFavourites(std::vector<utility::string_t> value)
{
    m_Favourites = value;
    m_FavouritesIsSet = true;
}
bool UserPreferences::favouritesIsSet() const
{
    return m_FavouritesIsSet;
}

void UserPreferences::unsetFavourites()
{
    m_FavouritesIsSet = false;
}

std::vector<utility::string_t>& UserPreferences::getFavouritesAssets()
{
    return m_FavouritesAssets;
}

void UserPreferences::setFavouritesAssets(std::vector<utility::string_t> value)
{
    m_FavouritesAssets = value;
    m_FavouritesAssetsIsSet = true;
}
bool UserPreferences::favouritesAssetsIsSet() const
{
    return m_FavouritesAssetsIsSet;
}

void UserPreferences::unsetFavouritesAssets()
{
    m_FavouritesAssetsIsSet = false;
}

std::vector<utility::string_t>& UserPreferences::getFavouritesOrdered()
{
    return m_FavouritesOrdered;
}

void UserPreferences::setFavouritesOrdered(std::vector<utility::string_t> value)
{
    m_FavouritesOrdered = value;
    m_FavouritesOrderedIsSet = true;
}
bool UserPreferences::favouritesOrderedIsSet() const
{
    return m_FavouritesOrderedIsSet;
}

void UserPreferences::unsetFavouritesOrdered()
{
    m_FavouritesOrderedIsSet = false;
}

std::vector<utility::string_t>& UserPreferences::getHideConfirmDialogs()
{
    return m_HideConfirmDialogs;
}

void UserPreferences::setHideConfirmDialogs(std::vector<utility::string_t> value)
{
    m_HideConfirmDialogs = value;
    m_HideConfirmDialogsIsSet = true;
}
bool UserPreferences::hideConfirmDialogsIsSet() const
{
    return m_HideConfirmDialogsIsSet;
}

void UserPreferences::unsetHideConfirmDialogs()
{
    m_HideConfirmDialogsIsSet = false;
}

bool UserPreferences::isHideConnectionModal() const
{
    return m_HideConnectionModal;
}


void UserPreferences::setHideConnectionModal(bool value)
{
    m_HideConnectionModal = value;
    m_HideConnectionModalIsSet = true;
}
bool UserPreferences::hideConnectionModalIsSet() const
{
    return m_HideConnectionModalIsSet;
}

void UserPreferences::unsetHideConnectionModal()
{
    m_HideConnectionModalIsSet = false;
}

bool UserPreferences::isHideFromLeaderboard() const
{
    return m_HideFromLeaderboard;
}


void UserPreferences::setHideFromLeaderboard(bool value)
{
    m_HideFromLeaderboard = value;
    m_HideFromLeaderboardIsSet = true;
}
bool UserPreferences::hideFromLeaderboardIsSet() const
{
    return m_HideFromLeaderboardIsSet;
}

void UserPreferences::unsetHideFromLeaderboard()
{
    m_HideFromLeaderboardIsSet = false;
}

bool UserPreferences::isHideNameFromLeaderboard() const
{
    return m_HideNameFromLeaderboard;
}


void UserPreferences::setHideNameFromLeaderboard(bool value)
{
    m_HideNameFromLeaderboard = value;
    m_HideNameFromLeaderboardIsSet = true;
}
bool UserPreferences::hideNameFromLeaderboardIsSet() const
{
    return m_HideNameFromLeaderboardIsSet;
}

void UserPreferences::unsetHideNameFromLeaderboard()
{
    m_HideNameFromLeaderboardIsSet = false;
}

std::vector<utility::string_t>& UserPreferences::getHideNotifications()
{
    return m_HideNotifications;
}

void UserPreferences::setHideNotifications(std::vector<utility::string_t> value)
{
    m_HideNotifications = value;
    m_HideNotificationsIsSet = true;
}
bool UserPreferences::hideNotificationsIsSet() const
{
    return m_HideNotificationsIsSet;
}

void UserPreferences::unsetHideNotifications()
{
    m_HideNotificationsIsSet = false;
}

bool UserPreferences::isHidePhoneConfirm() const
{
    return m_HidePhoneConfirm;
}


void UserPreferences::setHidePhoneConfirm(bool value)
{
    m_HidePhoneConfirm = value;
    m_HidePhoneConfirmIsSet = true;
}
bool UserPreferences::hidePhoneConfirmIsSet() const
{
    return m_HidePhoneConfirmIsSet;
}

void UserPreferences::unsetHidePhoneConfirm()
{
    m_HidePhoneConfirmIsSet = false;
}

bool UserPreferences::isIsSensitiveInfoVisible() const
{
    return m_IsSensitiveInfoVisible;
}


void UserPreferences::setIsSensitiveInfoVisible(bool value)
{
    m_IsSensitiveInfoVisible = value;
    m_IsSensitiveInfoVisibleIsSet = true;
}
bool UserPreferences::isSensitiveInfoVisibleIsSet() const
{
    return m_IsSensitiveInfoVisibleIsSet;
}

void UserPreferences::unsetIsSensitiveInfoVisible()
{
    m_IsSensitiveInfoVisibleIsSet = false;
}

bool UserPreferences::isIsWalletZeroBalanceHidden() const
{
    return m_IsWalletZeroBalanceHidden;
}


void UserPreferences::setIsWalletZeroBalanceHidden(bool value)
{
    m_IsWalletZeroBalanceHidden = value;
    m_IsWalletZeroBalanceHiddenIsSet = true;
}
bool UserPreferences::isWalletZeroBalanceHiddenIsSet() const
{
    return m_IsWalletZeroBalanceHiddenIsSet;
}

void UserPreferences::unsetIsWalletZeroBalanceHidden()
{
    m_IsWalletZeroBalanceHiddenIsSet = false;
}

utility::string_t UserPreferences::getLocale() const
{
    return m_Locale;
}


void UserPreferences::setLocale(utility::string_t value)
{
    m_Locale = value;
    m_LocaleIsSet = true;
}
bool UserPreferences::localeIsSet() const
{
    return m_LocaleIsSet;
}

void UserPreferences::unsetLocale()
{
    m_LocaleIsSet = false;
}

double UserPreferences::getLocaleSetTime() const
{
    return m_LocaleSetTime;
}


void UserPreferences::setLocaleSetTime(double value)
{
    m_LocaleSetTime = value;
    m_LocaleSetTimeIsSet = true;
}
bool UserPreferences::localeSetTimeIsSet() const
{
    return m_LocaleSetTimeIsSet;
}

void UserPreferences::unsetLocaleSetTime()
{
    m_LocaleSetTimeIsSet = false;
}

utility::string_t UserPreferences::getMarginPnlRow() const
{
    return m_MarginPnlRow;
}


void UserPreferences::setMarginPnlRow(utility::string_t value)
{
    m_MarginPnlRow = value;
    m_MarginPnlRowIsSet = true;
}
bool UserPreferences::marginPnlRowIsSet() const
{
    return m_MarginPnlRowIsSet;
}

void UserPreferences::unsetMarginPnlRow()
{
    m_MarginPnlRowIsSet = false;
}

utility::string_t UserPreferences::getMarginPnlRowKind() const
{
    return m_MarginPnlRowKind;
}


void UserPreferences::setMarginPnlRowKind(utility::string_t value)
{
    m_MarginPnlRowKind = value;
    m_MarginPnlRowKindIsSet = true;
}
bool UserPreferences::marginPnlRowKindIsSet() const
{
    return m_MarginPnlRowKindIsSet;
}

void UserPreferences::unsetMarginPnlRowKind()
{
    m_MarginPnlRowKindIsSet = false;
}

std::vector<utility::string_t>& UserPreferences::getMsgsSeen()
{
    return m_MsgsSeen;
}

void UserPreferences::setMsgsSeen(std::vector<utility::string_t> value)
{
    m_MsgsSeen = value;
    m_MsgsSeenIsSet = true;
}
bool UserPreferences::msgsSeenIsSet() const
{
    return m_MsgsSeenIsSet;
}

void UserPreferences::unsetMsgsSeen()
{
    m_MsgsSeenIsSet = false;
}

std::shared_ptr<Object> UserPreferences::getNotifications() const
{
    return m_Notifications;
}


void UserPreferences::setNotifications(std::shared_ptr<Object> value)
{
    m_Notifications = value;
    m_NotificationsIsSet = true;
}
bool UserPreferences::notificationsIsSet() const
{
    return m_NotificationsIsSet;
}

void UserPreferences::unsetNotifications()
{
    m_NotificationsIsSet = false;
}

std::shared_ptr<Object> UserPreferences::getOrderBookBinning() const
{
    return m_OrderBookBinning;
}


void UserPreferences::setOrderBookBinning(std::shared_ptr<Object> value)
{
    m_OrderBookBinning = value;
    m_OrderBookBinningIsSet = true;
}
bool UserPreferences::orderBookBinningIsSet() const
{
    return m_OrderBookBinningIsSet;
}

void UserPreferences::unsetOrderBookBinning()
{
    m_OrderBookBinningIsSet = false;
}

utility::string_t UserPreferences::getOrderBookType() const
{
    return m_OrderBookType;
}


void UserPreferences::setOrderBookType(utility::string_t value)
{
    m_OrderBookType = value;
    m_OrderBookTypeIsSet = true;
}
bool UserPreferences::orderBookTypeIsSet() const
{
    return m_OrderBookTypeIsSet;
}

void UserPreferences::unsetOrderBookType()
{
    m_OrderBookTypeIsSet = false;
}

bool UserPreferences::isOrderClearImmediate() const
{
    return m_OrderClearImmediate;
}


void UserPreferences::setOrderClearImmediate(bool value)
{
    m_OrderClearImmediate = value;
    m_OrderClearImmediateIsSet = true;
}
bool UserPreferences::orderClearImmediateIsSet() const
{
    return m_OrderClearImmediateIsSet;
}

void UserPreferences::unsetOrderClearImmediate()
{
    m_OrderClearImmediateIsSet = false;
}

bool UserPreferences::isOrderControlsPlusMinus() const
{
    return m_OrderControlsPlusMinus;
}


void UserPreferences::setOrderControlsPlusMinus(bool value)
{
    m_OrderControlsPlusMinus = value;
    m_OrderControlsPlusMinusIsSet = true;
}
bool UserPreferences::orderControlsPlusMinusIsSet() const
{
    return m_OrderControlsPlusMinusIsSet;
}

void UserPreferences::unsetOrderControlsPlusMinus()
{
    m_OrderControlsPlusMinusIsSet = false;
}

utility::string_t UserPreferences::getPlatformLayout() const
{
    return m_PlatformLayout;
}


void UserPreferences::setPlatformLayout(utility::string_t value)
{
    m_PlatformLayout = value;
    m_PlatformLayoutIsSet = true;
}
bool UserPreferences::platformLayoutIsSet() const
{
    return m_PlatformLayoutIsSet;
}

void UserPreferences::unsetPlatformLayout()
{
    m_PlatformLayoutIsSet = false;
}

utility::string_t UserPreferences::getSelectedFiatCurrency() const
{
    return m_SelectedFiatCurrency;
}


void UserPreferences::setSelectedFiatCurrency(utility::string_t value)
{
    m_SelectedFiatCurrency = value;
    m_SelectedFiatCurrencyIsSet = true;
}
bool UserPreferences::selectedFiatCurrencyIsSet() const
{
    return m_SelectedFiatCurrencyIsSet;
}

void UserPreferences::unsetSelectedFiatCurrency()
{
    m_SelectedFiatCurrencyIsSet = false;
}

bool UserPreferences::isShowChartBottomToolbar() const
{
    return m_ShowChartBottomToolbar;
}


void UserPreferences::setShowChartBottomToolbar(bool value)
{
    m_ShowChartBottomToolbar = value;
    m_ShowChartBottomToolbarIsSet = true;
}
bool UserPreferences::showChartBottomToolbarIsSet() const
{
    return m_ShowChartBottomToolbarIsSet;
}

void UserPreferences::unsetShowChartBottomToolbar()
{
    m_ShowChartBottomToolbarIsSet = false;
}

bool UserPreferences::isShowLocaleNumbers() const
{
    return m_ShowLocaleNumbers;
}


void UserPreferences::setShowLocaleNumbers(bool value)
{
    m_ShowLocaleNumbers = value;
    m_ShowLocaleNumbersIsSet = true;
}
bool UserPreferences::showLocaleNumbersIsSet() const
{
    return m_ShowLocaleNumbersIsSet;
}

void UserPreferences::unsetShowLocaleNumbers()
{
    m_ShowLocaleNumbersIsSet = false;
}

std::vector<utility::string_t>& UserPreferences::getSounds()
{
    return m_Sounds;
}

void UserPreferences::setSounds(std::vector<utility::string_t> value)
{
    m_Sounds = value;
    m_SoundsIsSet = true;
}
bool UserPreferences::soundsIsSet() const
{
    return m_SoundsIsSet;
}

void UserPreferences::unsetSounds()
{
    m_SoundsIsSet = false;
}

bool UserPreferences::isStrictIPCheck() const
{
    return m_StrictIPCheck;
}


void UserPreferences::setStrictIPCheck(bool value)
{
    m_StrictIPCheck = value;
    m_StrictIPCheckIsSet = true;
}
bool UserPreferences::strictIPCheckIsSet() const
{
    return m_StrictIPCheckIsSet;
}

void UserPreferences::unsetStrictIPCheck()
{
    m_StrictIPCheckIsSet = false;
}

bool UserPreferences::isStrictTimeout() const
{
    return m_StrictTimeout;
}


void UserPreferences::setStrictTimeout(bool value)
{
    m_StrictTimeout = value;
    m_StrictTimeoutIsSet = true;
}
bool UserPreferences::strictTimeoutIsSet() const
{
    return m_StrictTimeoutIsSet;
}

void UserPreferences::unsetStrictTimeout()
{
    m_StrictTimeoutIsSet = false;
}

utility::string_t UserPreferences::getTickerGroup() const
{
    return m_TickerGroup;
}


void UserPreferences::setTickerGroup(utility::string_t value)
{
    m_TickerGroup = value;
    m_TickerGroupIsSet = true;
}
bool UserPreferences::tickerGroupIsSet() const
{
    return m_TickerGroupIsSet;
}

void UserPreferences::unsetTickerGroup()
{
    m_TickerGroupIsSet = false;
}

bool UserPreferences::isTickerPinned() const
{
    return m_TickerPinned;
}


void UserPreferences::setTickerPinned(bool value)
{
    m_TickerPinned = value;
    m_TickerPinnedIsSet = true;
}
bool UserPreferences::tickerPinnedIsSet() const
{
    return m_TickerPinnedIsSet;
}

void UserPreferences::unsetTickerPinned()
{
    m_TickerPinnedIsSet = false;
}

utility::string_t UserPreferences::getTradeLayout() const
{
    return m_TradeLayout;
}


void UserPreferences::setTradeLayout(utility::string_t value)
{
    m_TradeLayout = value;
    m_TradeLayoutIsSet = true;
}
bool UserPreferences::tradeLayoutIsSet() const
{
    return m_TradeLayoutIsSet;
}

void UserPreferences::unsetTradeLayout()
{
    m_TradeLayoutIsSet = false;
}

utility::string_t UserPreferences::getUserColor() const
{
    return m_UserColor;
}


void UserPreferences::setUserColor(utility::string_t value)
{
    m_UserColor = value;
    m_UserColorIsSet = true;
}
bool UserPreferences::userColorIsSet() const
{
    return m_UserColorIsSet;
}

void UserPreferences::unsetUserColor()
{
    m_UserColorIsSet = false;
}

}
}
}
}

