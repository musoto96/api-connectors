/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.38-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Porl.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Porl::Porl()
{
    m_Account = 0.0;
    m_Nonce = utility::conversions::to_string_t("");
    m_NonceIsSet = false;
    m_AccountNonce = utility::conversions::to_string_t("");
    m_Total = 0.0;
    m_Balance = 0.0;
    m_Filename = utility::conversions::to_string_t("");
    m_FilenameIsSet = false;
    m_Height = 0.0;
    m_Created = utility::datetime();
}

Porl::~Porl()
{
}

void Porl::validate()
{
    // TODO: implement validation
}

web::json::value Porl::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("account")] = ModelBase::toJson(m_Account);
    if(m_NonceIsSet)
    {
        val[utility::conversions::to_string_t("nonce")] = ModelBase::toJson(m_Nonce);
    }
    val[utility::conversions::to_string_t("accountNonce")] = ModelBase::toJson(m_AccountNonce);
    val[utility::conversions::to_string_t("total")] = ModelBase::toJson(m_Total);
    val[utility::conversions::to_string_t("balance")] = ModelBase::toJson(m_Balance);
    if(m_FilenameIsSet)
    {
        val[utility::conversions::to_string_t("filename")] = ModelBase::toJson(m_Filename);
    }
    val[utility::conversions::to_string_t("height")] = ModelBase::toJson(m_Height);
    val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);

    return val;
}

void Porl::fromJson(web::json::value& val)
{
    setAccount(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("account")]));
    if(val.has_field(utility::conversions::to_string_t("nonce")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("nonce")];
        if(!fieldValue.is_null())
        {
            setNonce(ModelBase::stringFromJson(fieldValue));
        }
    }
    setAccountNonce(ModelBase::stringFromJson(val[utility::conversions::to_string_t("accountNonce")]));
    setTotal(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("total")]));
    setBalance(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("balance")]));
    if(val.has_field(utility::conversions::to_string_t("filename")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("filename")];
        if(!fieldValue.is_null())
        {
            setFilename(ModelBase::stringFromJson(fieldValue));
        }
    }
    setHeight(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("height")]));
    setCreated
    (ModelBase::dateFromJson(val[utility::conversions::to_string_t("created")]));
}

void Porl::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("account"), m_Account));
    if(m_NonceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nonce"), m_Nonce));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("accountNonce"), m_AccountNonce));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("total"), m_Total));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("balance"), m_Balance));
    if(m_FilenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("filename"), m_Filename));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("height"), m_Height));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
}

void Porl::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setAccount(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("account"))));
    if(multipart->hasContent(utility::conversions::to_string_t("nonce")))
    {
        setNonce(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nonce"))));
    }
    setAccountNonce(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("accountNonce"))));
    setTotal(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("total"))));
    setBalance(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("balance"))));
    if(multipart->hasContent(utility::conversions::to_string_t("filename")))
    {
        setFilename(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("filename"))));
    }
    setHeight(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("height"))));
    setCreated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created"))));
}

double Porl::getAccount() const
{
    return m_Account;
}


void Porl::setAccount(double value)
{
    m_Account = value;
    
}
utility::string_t Porl::getNonce() const
{
    return m_Nonce;
}


void Porl::setNonce(utility::string_t value)
{
    m_Nonce = value;
    m_NonceIsSet = true;
}
bool Porl::nonceIsSet() const
{
    return m_NonceIsSet;
}

void Porl::unsetNonce()
{
    m_NonceIsSet = false;
}

utility::string_t Porl::getAccountNonce() const
{
    return m_AccountNonce;
}


void Porl::setAccountNonce(utility::string_t value)
{
    m_AccountNonce = value;
    
}
double Porl::getTotal() const
{
    return m_Total;
}


void Porl::setTotal(double value)
{
    m_Total = value;
    
}
double Porl::getBalance() const
{
    return m_Balance;
}


void Porl::setBalance(double value)
{
    m_Balance = value;
    
}
utility::string_t Porl::getFilename() const
{
    return m_Filename;
}


void Porl::setFilename(utility::string_t value)
{
    m_Filename = value;
    m_FilenameIsSet = true;
}
bool Porl::filenameIsSet() const
{
    return m_FilenameIsSet;
}

void Porl::unsetFilename()
{
    m_FilenameIsSet = false;
}

double Porl::getHeight() const
{
    return m_Height;
}


void Porl::setHeight(double value)
{
    m_Height = value;
    
}
utility::datetime Porl::getCreated() const
{
    return m_Created;
}


void Porl::setCreated(utility::datetime value)
{
    m_Created = value;
    
}
}
}
}
}

