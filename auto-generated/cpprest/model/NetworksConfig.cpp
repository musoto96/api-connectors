/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.38-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NetworksConfig.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

NetworksConfig::NetworksConfig()
{
    m_Network = utility::conversions::to_string_t("");
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_NetworkSymbol = utility::conversions::to_string_t("");
    m_NetworkSymbolIsSet = false;
    m_TransactionExplorer = utility::conversions::to_string_t("");
    m_TransactionExplorerIsSet = false;
    m_TokenExplorer = utility::conversions::to_string_t("");
    m_TokenExplorerIsSet = false;
    m_DepositConfirmations = 0.0;
    m_DepositConfirmationsIsSet = false;
    m_Enabled = false;
    m_EnabledIsSet = false;
}

NetworksConfig::~NetworksConfig()
{
}

void NetworksConfig::validate()
{
    // TODO: implement validation
}

web::json::value NetworksConfig::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("network")] = ModelBase::toJson(m_Network);
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    }
    if(m_NetworkSymbolIsSet)
    {
        val[utility::conversions::to_string_t("networkSymbol")] = ModelBase::toJson(m_NetworkSymbol);
    }
    if(m_TransactionExplorerIsSet)
    {
        val[utility::conversions::to_string_t("transactionExplorer")] = ModelBase::toJson(m_TransactionExplorer);
    }
    if(m_TokenExplorerIsSet)
    {
        val[utility::conversions::to_string_t("tokenExplorer")] = ModelBase::toJson(m_TokenExplorer);
    }
    if(m_DepositConfirmationsIsSet)
    {
        val[utility::conversions::to_string_t("depositConfirmations")] = ModelBase::toJson(m_DepositConfirmations);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }

    return val;
}

void NetworksConfig::fromJson(web::json::value& val)
{
    setNetwork(ModelBase::stringFromJson(val[utility::conversions::to_string_t("network")]));
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("name")];
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("currency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("currency")];
        if(!fieldValue.is_null())
        {
            setCurrency(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("networkSymbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("networkSymbol")];
        if(!fieldValue.is_null())
        {
            setNetworkSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("transactionExplorer")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("transactionExplorer")];
        if(!fieldValue.is_null())
        {
            setTransactionExplorer(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tokenExplorer")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tokenExplorer")];
        if(!fieldValue.is_null())
        {
            setTokenExplorer(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("depositConfirmations")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("depositConfirmations")];
        if(!fieldValue.is_null())
        {
            setDepositConfirmations(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("enabled")];
        if(!fieldValue.is_null())
        {
            setEnabled(ModelBase::boolFromJson(fieldValue));
        }
    }
}

void NetworksConfig::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("network"), m_Network));
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
        
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency"), m_Currency));
        
    }
    if(m_NetworkSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("networkSymbol"), m_NetworkSymbol));
        
    }
    if(m_TransactionExplorerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("transactionExplorer"), m_TransactionExplorer));
        
    }
    if(m_TokenExplorerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tokenExplorer"), m_TokenExplorer));
        
    }
    if(m_DepositConfirmationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("depositConfirmations"), m_DepositConfirmations));
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enabled"), m_Enabled));
    }
}

void NetworksConfig::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setNetwork(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("network"))));
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currency")))
    {
        setCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("networkSymbol")))
    {
        setNetworkSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("networkSymbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("transactionExplorer")))
    {
        setTransactionExplorer(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("transactionExplorer"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tokenExplorer")))
    {
        setTokenExplorer(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tokenExplorer"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("depositConfirmations")))
    {
        setDepositConfirmations(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("depositConfirmations"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        setEnabled(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("enabled"))));
    }
}

utility::string_t NetworksConfig::getNetwork() const
{
    return m_Network;
}


void NetworksConfig::setNetwork(utility::string_t value)
{
    m_Network = value;
    
}
utility::string_t NetworksConfig::getName() const
{
    return m_Name;
}


void NetworksConfig::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool NetworksConfig::nameIsSet() const
{
    return m_NameIsSet;
}

void NetworksConfig::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t NetworksConfig::getCurrency() const
{
    return m_Currency;
}


void NetworksConfig::setCurrency(utility::string_t value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool NetworksConfig::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void NetworksConfig::unsetCurrency()
{
    m_CurrencyIsSet = false;
}

utility::string_t NetworksConfig::getNetworkSymbol() const
{
    return m_NetworkSymbol;
}


void NetworksConfig::setNetworkSymbol(utility::string_t value)
{
    m_NetworkSymbol = value;
    m_NetworkSymbolIsSet = true;
}
bool NetworksConfig::networkSymbolIsSet() const
{
    return m_NetworkSymbolIsSet;
}

void NetworksConfig::unsetNetworkSymbol()
{
    m_NetworkSymbolIsSet = false;
}

utility::string_t NetworksConfig::getTransactionExplorer() const
{
    return m_TransactionExplorer;
}


void NetworksConfig::setTransactionExplorer(utility::string_t value)
{
    m_TransactionExplorer = value;
    m_TransactionExplorerIsSet = true;
}
bool NetworksConfig::transactionExplorerIsSet() const
{
    return m_TransactionExplorerIsSet;
}

void NetworksConfig::unsetTransactionExplorer()
{
    m_TransactionExplorerIsSet = false;
}

utility::string_t NetworksConfig::getTokenExplorer() const
{
    return m_TokenExplorer;
}


void NetworksConfig::setTokenExplorer(utility::string_t value)
{
    m_TokenExplorer = value;
    m_TokenExplorerIsSet = true;
}
bool NetworksConfig::tokenExplorerIsSet() const
{
    return m_TokenExplorerIsSet;
}

void NetworksConfig::unsetTokenExplorer()
{
    m_TokenExplorerIsSet = false;
}

double NetworksConfig::getDepositConfirmations() const
{
    return m_DepositConfirmations;
}


void NetworksConfig::setDepositConfirmations(double value)
{
    m_DepositConfirmations = value;
    m_DepositConfirmationsIsSet = true;
}
bool NetworksConfig::depositConfirmationsIsSet() const
{
    return m_DepositConfirmationsIsSet;
}

void NetworksConfig::unsetDepositConfirmations()
{
    m_DepositConfirmationsIsSet = false;
}

bool NetworksConfig::isEnabled() const
{
    return m_Enabled;
}


void NetworksConfig::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool NetworksConfig::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void NetworksConfig::unsetEnabled()
{
    m_EnabledIsSet = false;
}

}
}
}
}

