/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.38-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Guild.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Guild::Guild()
{
    m_Id = 0.0;
    m_IdIsSet = false;
    m_Created = utility::datetime();
    m_Updated = utility::datetime();
    m_Archived = false;
    m_ArchivedIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_ImgUrl = utility::conversions::to_string_t("");
    m_ImgUrlIsSet = false;
    m_MobileHeroImgUrl = utility::conversions::to_string_t("");
    m_MobileHeroImgUrlIsSet = false;
    m_Emoji = utility::conversions::to_string_t("");
    m_EmojiIsSet = false;
    m_LogoUrl = utility::conversions::to_string_t("");
    m_LogoUrlIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_ChatChannelId = 0.0;
    m_IsPrivate = false;
    m_AffiliateId = utility::conversions::to_string_t("");
    m_AffiliateIdIsSet = false;
    m_PotDistributionPreferencesIsSet = false;
    m_SocialsIsSet = false;
    m_Deleted = false;
    m_DeletedIsSet = false;
}

Guild::~Guild()
{
}

void Guild::validate()
{
    // TODO: implement validation
}

web::json::value Guild::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    val[utility::conversions::to_string_t("updated")] = ModelBase::toJson(m_Updated);
    if(m_ArchivedIsSet)
    {
        val[utility::conversions::to_string_t("archived")] = ModelBase::toJson(m_Archived);
    }
    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    if(m_ImgUrlIsSet)
    {
        val[utility::conversions::to_string_t("imgUrl")] = ModelBase::toJson(m_ImgUrl);
    }
    if(m_MobileHeroImgUrlIsSet)
    {
        val[utility::conversions::to_string_t("mobileHeroImgUrl")] = ModelBase::toJson(m_MobileHeroImgUrl);
    }
    if(m_EmojiIsSet)
    {
        val[utility::conversions::to_string_t("emoji")] = ModelBase::toJson(m_Emoji);
    }
    if(m_LogoUrlIsSet)
    {
        val[utility::conversions::to_string_t("logoUrl")] = ModelBase::toJson(m_LogoUrl);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    val[utility::conversions::to_string_t("chatChannelId")] = ModelBase::toJson(m_ChatChannelId);
    val[utility::conversions::to_string_t("isPrivate")] = ModelBase::toJson(m_IsPrivate);
    if(m_AffiliateIdIsSet)
    {
        val[utility::conversions::to_string_t("affiliateId")] = ModelBase::toJson(m_AffiliateId);
    }
    if(m_PotDistributionPreferencesIsSet)
    {
        val[utility::conversions::to_string_t("potDistributionPreferences")] = ModelBase::toJson(m_PotDistributionPreferences);
    }
    if(m_SocialsIsSet)
    {
        val[utility::conversions::to_string_t("socials")] = ModelBase::toJson(m_Socials);
    }
    if(m_DeletedIsSet)
    {
        val[utility::conversions::to_string_t("deleted")] = ModelBase::toJson(m_Deleted);
    }

    return val;
}

void Guild::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::doubleFromJson(fieldValue));
        }
    }
    setCreated
    (ModelBase::dateFromJson(val[utility::conversions::to_string_t("created")]));
    setUpdated
    (ModelBase::dateFromJson(val[utility::conversions::to_string_t("updated")]));
    if(val.has_field(utility::conversions::to_string_t("archived")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("archived")];
        if(!fieldValue.is_null())
        {
            setArchived(ModelBase::boolFromJson(fieldValue));
        }
    }
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    if(val.has_field(utility::conversions::to_string_t("imgUrl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("imgUrl")];
        if(!fieldValue.is_null())
        {
            setImgUrl(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mobileHeroImgUrl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("mobileHeroImgUrl")];
        if(!fieldValue.is_null())
        {
            setMobileHeroImgUrl(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emoji")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("emoji")];
        if(!fieldValue.is_null())
        {
            setEmoji(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("logoUrl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("logoUrl")];
        if(!fieldValue.is_null())
        {
            setLogoUrl(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("description")];
        if(!fieldValue.is_null())
        {
            setDescription(ModelBase::stringFromJson(fieldValue));
        }
    }
    setChatChannelId(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("chatChannelId")]));
    setIsPrivate(ModelBase::boolFromJson(val[utility::conversions::to_string_t("isPrivate")]));
    if(val.has_field(utility::conversions::to_string_t("affiliateId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("affiliateId")];
        if(!fieldValue.is_null())
        {
            setAffiliateId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("potDistributionPreferences")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("potDistributionPreferences")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setPotDistributionPreferences( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("socials")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("socials")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setSocials( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deleted")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("deleted")];
        if(!fieldValue.is_null())
        {
            setDeleted(ModelBase::boolFromJson(fieldValue));
        }
    }
}

void Guild::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updated"), m_Updated));
    if(m_ArchivedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("archived"), m_Archived));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    if(m_ImgUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("imgUrl"), m_ImgUrl));
        
    }
    if(m_MobileHeroImgUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mobileHeroImgUrl"), m_MobileHeroImgUrl));
        
    }
    if(m_EmojiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emoji"), m_Emoji));
        
    }
    if(m_LogoUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("logoUrl"), m_LogoUrl));
        
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chatChannelId"), m_ChatChannelId));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isPrivate"), m_IsPrivate));
    if(m_AffiliateIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("affiliateId"), m_AffiliateId));
        
    }
    if(m_PotDistributionPreferencesIsSet)
    {
        if (m_PotDistributionPreferences.get())
        {
            m_PotDistributionPreferences->toMultipart(multipart, utility::conversions::to_string_t("potDistributionPreferences."));
        }
        
    }
    if(m_SocialsIsSet)
    {
        if (m_Socials.get())
        {
            m_Socials->toMultipart(multipart, utility::conversions::to_string_t("socials."));
        }
        
    }
    if(m_DeletedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deleted"), m_Deleted));
    }
}

void Guild::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    setCreated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created"))));
    setUpdated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updated"))));
    if(multipart->hasContent(utility::conversions::to_string_t("archived")))
    {
        setArchived(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("archived"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    if(multipart->hasContent(utility::conversions::to_string_t("imgUrl")))
    {
        setImgUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("imgUrl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mobileHeroImgUrl")))
    {
        setMobileHeroImgUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("mobileHeroImgUrl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emoji")))
    {
        setEmoji(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("emoji"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("logoUrl")))
    {
        setLogoUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("logoUrl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("description"))));
    }
    setChatChannelId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chatChannelId"))));
    setIsPrivate(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isPrivate"))));
    if(multipart->hasContent(utility::conversions::to_string_t("affiliateId")))
    {
        setAffiliateId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("affiliateId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("potDistributionPreferences")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("potDistributionPreferences")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("potDistributionPreferences."));
            setPotDistributionPreferences( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("socials")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("socials")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("socials."));
            setSocials( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deleted")))
    {
        setDeleted(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("deleted"))));
    }
}

double Guild::getId() const
{
    return m_Id;
}


void Guild::setId(double value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Guild::idIsSet() const
{
    return m_IdIsSet;
}

void Guild::unsetId()
{
    m_IdIsSet = false;
}

utility::datetime Guild::getCreated() const
{
    return m_Created;
}


void Guild::setCreated(utility::datetime value)
{
    m_Created = value;
    
}
utility::datetime Guild::getUpdated() const
{
    return m_Updated;
}


void Guild::setUpdated(utility::datetime value)
{
    m_Updated = value;
    
}
bool Guild::isArchived() const
{
    return m_Archived;
}


void Guild::setArchived(bool value)
{
    m_Archived = value;
    m_ArchivedIsSet = true;
}
bool Guild::archivedIsSet() const
{
    return m_ArchivedIsSet;
}

void Guild::unsetArchived()
{
    m_ArchivedIsSet = false;
}

utility::string_t Guild::getName() const
{
    return m_Name;
}


void Guild::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t Guild::getImgUrl() const
{
    return m_ImgUrl;
}


void Guild::setImgUrl(utility::string_t value)
{
    m_ImgUrl = value;
    m_ImgUrlIsSet = true;
}
bool Guild::imgUrlIsSet() const
{
    return m_ImgUrlIsSet;
}

void Guild::unsetImgUrl()
{
    m_ImgUrlIsSet = false;
}

utility::string_t Guild::getMobileHeroImgUrl() const
{
    return m_MobileHeroImgUrl;
}


void Guild::setMobileHeroImgUrl(utility::string_t value)
{
    m_MobileHeroImgUrl = value;
    m_MobileHeroImgUrlIsSet = true;
}
bool Guild::mobileHeroImgUrlIsSet() const
{
    return m_MobileHeroImgUrlIsSet;
}

void Guild::unsetMobileHeroImgUrl()
{
    m_MobileHeroImgUrlIsSet = false;
}

utility::string_t Guild::getEmoji() const
{
    return m_Emoji;
}


void Guild::setEmoji(utility::string_t value)
{
    m_Emoji = value;
    m_EmojiIsSet = true;
}
bool Guild::emojiIsSet() const
{
    return m_EmojiIsSet;
}

void Guild::unsetEmoji()
{
    m_EmojiIsSet = false;
}

utility::string_t Guild::getLogoUrl() const
{
    return m_LogoUrl;
}


void Guild::setLogoUrl(utility::string_t value)
{
    m_LogoUrl = value;
    m_LogoUrlIsSet = true;
}
bool Guild::logoUrlIsSet() const
{
    return m_LogoUrlIsSet;
}

void Guild::unsetLogoUrl()
{
    m_LogoUrlIsSet = false;
}

utility::string_t Guild::getDescription() const
{
    return m_Description;
}


void Guild::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Guild::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Guild::unsetDescription()
{
    m_DescriptionIsSet = false;
}

double Guild::getChatChannelId() const
{
    return m_ChatChannelId;
}


void Guild::setChatChannelId(double value)
{
    m_ChatChannelId = value;
    
}
bool Guild::isIsPrivate() const
{
    return m_IsPrivate;
}


void Guild::setIsPrivate(bool value)
{
    m_IsPrivate = value;
    
}
utility::string_t Guild::getAffiliateId() const
{
    return m_AffiliateId;
}


void Guild::setAffiliateId(utility::string_t value)
{
    m_AffiliateId = value;
    m_AffiliateIdIsSet = true;
}
bool Guild::affiliateIdIsSet() const
{
    return m_AffiliateIdIsSet;
}

void Guild::unsetAffiliateId()
{
    m_AffiliateIdIsSet = false;
}

std::shared_ptr<Object> Guild::getPotDistributionPreferences() const
{
    return m_PotDistributionPreferences;
}


void Guild::setPotDistributionPreferences(std::shared_ptr<Object> value)
{
    m_PotDistributionPreferences = value;
    m_PotDistributionPreferencesIsSet = true;
}
bool Guild::potDistributionPreferencesIsSet() const
{
    return m_PotDistributionPreferencesIsSet;
}

void Guild::unsetPotDistributionPreferences()
{
    m_PotDistributionPreferencesIsSet = false;
}

std::shared_ptr<Object> Guild::getSocials() const
{
    return m_Socials;
}


void Guild::setSocials(std::shared_ptr<Object> value)
{
    m_Socials = value;
    m_SocialsIsSet = true;
}
bool Guild::socialsIsSet() const
{
    return m_SocialsIsSet;
}

void Guild::unsetSocials()
{
    m_SocialsIsSet = false;
}

bool Guild::isDeleted() const
{
    return m_Deleted;
}


void Guild::setDeleted(bool value)
{
    m_Deleted = value;
    m_DeletedIsSet = true;
}
bool Guild::deletedIsSet() const
{
    return m_DeletedIsSet;
}

void Guild::unsetDeleted()
{
    m_DeletedIsSet = false;
}

}
}
}
}

