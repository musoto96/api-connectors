/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.38-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Address.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Address::Address()
{
    m_Id = 0.0;
    m_IdIsSet = false;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_Created = utility::datetime();
    m_CreatedIsSet = false;
    m_UserId = 0.0;
    m_UserIdIsSet = false;
    m_Address = utility::conversions::to_string_t("");
    m_Name = utility::conversions::to_string_t("");
    m_Note = utility::conversions::to_string_t("");
    m_NoteIsSet = false;
    m_SkipConfirm = false;
    m_SkipConfirmIsSet = false;
    m_SkipConfirmVerified = false;
    m_SkipConfirmVerifiedIsSet = false;
    m_Skip2FA = false;
    m_Skip2FAIsSet = false;
    m_Skip2FAVerified = false;
    m_Skip2FAVerifiedIsSet = false;
    m_Network = utility::conversions::to_string_t("");
}

Address::~Address()
{
}

void Address::validate()
{
    // TODO: implement validation
}

web::json::value Address::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }
    val[utility::conversions::to_string_t("address")] = ModelBase::toJson(m_Address);
    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    if(m_NoteIsSet)
    {
        val[utility::conversions::to_string_t("note")] = ModelBase::toJson(m_Note);
    }
    if(m_SkipConfirmIsSet)
    {
        val[utility::conversions::to_string_t("skipConfirm")] = ModelBase::toJson(m_SkipConfirm);
    }
    if(m_SkipConfirmVerifiedIsSet)
    {
        val[utility::conversions::to_string_t("skipConfirmVerified")] = ModelBase::toJson(m_SkipConfirmVerified);
    }
    if(m_Skip2FAIsSet)
    {
        val[utility::conversions::to_string_t("skip2FA")] = ModelBase::toJson(m_Skip2FA);
    }
    if(m_Skip2FAVerifiedIsSet)
    {
        val[utility::conversions::to_string_t("skip2FAVerified")] = ModelBase::toJson(m_Skip2FAVerified);
    }
    val[utility::conversions::to_string_t("network")] = ModelBase::toJson(m_Network);

    return val;
}

void Address::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("currency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("currency")];
        if(!fieldValue.is_null())
        {
            setCurrency(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created")];
        if(!fieldValue.is_null())
        {
            setCreated(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("userId")];
        if(!fieldValue.is_null())
        {
            setUserId(ModelBase::doubleFromJson(fieldValue));
        }
    }
    setAddress(ModelBase::stringFromJson(val[utility::conversions::to_string_t("address")]));
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    if(val.has_field(utility::conversions::to_string_t("note")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("note")];
        if(!fieldValue.is_null())
        {
            setNote(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("skipConfirm")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("skipConfirm")];
        if(!fieldValue.is_null())
        {
            setSkipConfirm(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("skipConfirmVerified")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("skipConfirmVerified")];
        if(!fieldValue.is_null())
        {
            setSkipConfirmVerified(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("skip2FA")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("skip2FA")];
        if(!fieldValue.is_null())
        {
            setSkip2FA(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("skip2FAVerified")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("skip2FAVerified")];
        if(!fieldValue.is_null())
        {
            setSkip2FAVerified(ModelBase::boolFromJson(fieldValue));
        }
    }
    setNetwork(ModelBase::stringFromJson(val[utility::conversions::to_string_t("network")]));
}

void Address::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency"), m_Currency));
        
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
        
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("address"), m_Address));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    if(m_NoteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("note"), m_Note));
        
    }
    if(m_SkipConfirmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("skipConfirm"), m_SkipConfirm));
    }
    if(m_SkipConfirmVerifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("skipConfirmVerified"), m_SkipConfirmVerified));
    }
    if(m_Skip2FAIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("skip2FA"), m_Skip2FA));
    }
    if(m_Skip2FAVerifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("skip2FAVerified"), m_Skip2FAVerified));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("network"), m_Network));
}

void Address::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currency")))
    {
        setCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        setCreated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        setUserId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId"))));
    }
    setAddress(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("address"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    if(multipart->hasContent(utility::conversions::to_string_t("note")))
    {
        setNote(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("note"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("skipConfirm")))
    {
        setSkipConfirm(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("skipConfirm"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("skipConfirmVerified")))
    {
        setSkipConfirmVerified(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("skipConfirmVerified"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("skip2FA")))
    {
        setSkip2FA(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("skip2FA"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("skip2FAVerified")))
    {
        setSkip2FAVerified(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("skip2FAVerified"))));
    }
    setNetwork(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("network"))));
}

double Address::getId() const
{
    return m_Id;
}


void Address::setId(double value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Address::idIsSet() const
{
    return m_IdIsSet;
}

void Address::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t Address::getCurrency() const
{
    return m_Currency;
}


void Address::setCurrency(utility::string_t value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool Address::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void Address::unsetCurrency()
{
    m_CurrencyIsSet = false;
}

utility::datetime Address::getCreated() const
{
    return m_Created;
}


void Address::setCreated(utility::datetime value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}
bool Address::createdIsSet() const
{
    return m_CreatedIsSet;
}

void Address::unsetCreated()
{
    m_CreatedIsSet = false;
}

double Address::getUserId() const
{
    return m_UserId;
}


void Address::setUserId(double value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}
bool Address::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void Address::unsetUserId()
{
    m_UserIdIsSet = false;
}

utility::string_t Address::getAddress() const
{
    return m_Address;
}


void Address::setAddress(utility::string_t value)
{
    m_Address = value;
    
}
utility::string_t Address::getName() const
{
    return m_Name;
}


void Address::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t Address::getNote() const
{
    return m_Note;
}


void Address::setNote(utility::string_t value)
{
    m_Note = value;
    m_NoteIsSet = true;
}
bool Address::noteIsSet() const
{
    return m_NoteIsSet;
}

void Address::unsetNote()
{
    m_NoteIsSet = false;
}

bool Address::isSkipConfirm() const
{
    return m_SkipConfirm;
}


void Address::setSkipConfirm(bool value)
{
    m_SkipConfirm = value;
    m_SkipConfirmIsSet = true;
}
bool Address::skipConfirmIsSet() const
{
    return m_SkipConfirmIsSet;
}

void Address::unsetSkipConfirm()
{
    m_SkipConfirmIsSet = false;
}

bool Address::isSkipConfirmVerified() const
{
    return m_SkipConfirmVerified;
}


void Address::setSkipConfirmVerified(bool value)
{
    m_SkipConfirmVerified = value;
    m_SkipConfirmVerifiedIsSet = true;
}
bool Address::skipConfirmVerifiedIsSet() const
{
    return m_SkipConfirmVerifiedIsSet;
}

void Address::unsetSkipConfirmVerified()
{
    m_SkipConfirmVerifiedIsSet = false;
}

bool Address::isSkip2FA() const
{
    return m_Skip2FA;
}


void Address::setSkip2FA(bool value)
{
    m_Skip2FA = value;
    m_Skip2FAIsSet = true;
}
bool Address::skip2FAIsSet() const
{
    return m_Skip2FAIsSet;
}

void Address::unsetSkip2FA()
{
    m_Skip2FAIsSet = false;
}

bool Address::isSkip2FAVerified() const
{
    return m_Skip2FAVerified;
}


void Address::setSkip2FAVerified(bool value)
{
    m_Skip2FAVerified = value;
    m_Skip2FAVerifiedIsSet = true;
}
bool Address::skip2FAVerifiedIsSet() const
{
    return m_Skip2FAVerifiedIsSet;
}

void Address::unsetSkip2FAVerified()
{
    m_Skip2FAVerifiedIsSet = false;
}

utility::string_t Address::getNetwork() const
{
    return m_Network;
}


void Address::setNetwork(utility::string_t value)
{
    m_Network = value;
    
}
}
}
}
}

