/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.38-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Position.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Position::Position()
{
    m_Account = 0.0;
    m_Symbol = utility::conversions::to_string_t("");
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_Underlying = utility::conversions::to_string_t("");
    m_UnderlyingIsSet = false;
    m_QuoteCurrency = utility::conversions::to_string_t("");
    m_QuoteCurrencyIsSet = false;
    m_Commission = 0.0;
    m_CommissionIsSet = false;
    m_InitMarginReq = 0.0;
    m_InitMarginReqIsSet = false;
    m_MaintMarginReq = 0.0;
    m_MaintMarginReqIsSet = false;
    m_RiskLimit = 0.0;
    m_RiskLimitIsSet = false;
    m_Leverage = 0.0;
    m_LeverageIsSet = false;
    m_CrossMargin = false;
    m_CrossMarginIsSet = false;
    m_DeleveragePercentile = 0.0;
    m_DeleveragePercentileIsSet = false;
    m_RebalancedPnl = 0.0;
    m_RebalancedPnlIsSet = false;
    m_PrevRealisedPnl = 0.0;
    m_PrevRealisedPnlIsSet = false;
    m_PrevUnrealisedPnl = 0.0;
    m_PrevUnrealisedPnlIsSet = false;
    m_OpeningQty = 0.0;
    m_OpeningQtyIsSet = false;
    m_OpenOrderBuyQty = 0.0;
    m_OpenOrderBuyQtyIsSet = false;
    m_OpenOrderBuyCost = 0.0;
    m_OpenOrderBuyCostIsSet = false;
    m_OpenOrderBuyPremium = 0.0;
    m_OpenOrderBuyPremiumIsSet = false;
    m_OpenOrderSellQty = 0.0;
    m_OpenOrderSellQtyIsSet = false;
    m_OpenOrderSellCost = 0.0;
    m_OpenOrderSellCostIsSet = false;
    m_OpenOrderSellPremium = 0.0;
    m_OpenOrderSellPremiumIsSet = false;
    m_CurrentQty = 0.0;
    m_CurrentQtyIsSet = false;
    m_CurrentCost = 0.0;
    m_CurrentCostIsSet = false;
    m_CurrentComm = 0.0;
    m_CurrentCommIsSet = false;
    m_RealisedCost = 0.0;
    m_RealisedCostIsSet = false;
    m_UnrealisedCost = 0.0;
    m_UnrealisedCostIsSet = false;
    m_GrossOpenPremium = 0.0;
    m_GrossOpenPremiumIsSet = false;
    m_IsOpen = false;
    m_IsOpenIsSet = false;
    m_MarkPrice = 0.0;
    m_MarkPriceIsSet = false;
    m_MarkValue = 0.0;
    m_MarkValueIsSet = false;
    m_RiskValue = 0.0;
    m_RiskValueIsSet = false;
    m_HomeNotional = 0.0;
    m_HomeNotionalIsSet = false;
    m_ForeignNotional = 0.0;
    m_ForeignNotionalIsSet = false;
    m_PosState = utility::conversions::to_string_t("");
    m_PosStateIsSet = false;
    m_PosCost = 0.0;
    m_PosCostIsSet = false;
    m_PosCross = 0.0;
    m_PosCrossIsSet = false;
    m_PosComm = 0.0;
    m_PosCommIsSet = false;
    m_PosLoss = 0.0;
    m_PosLossIsSet = false;
    m_PosMargin = 0.0;
    m_PosMarginIsSet = false;
    m_PosMaint = 0.0;
    m_PosMaintIsSet = false;
    m_InitMargin = 0.0;
    m_InitMarginIsSet = false;
    m_MaintMargin = 0.0;
    m_MaintMarginIsSet = false;
    m_RealisedPnl = 0.0;
    m_RealisedPnlIsSet = false;
    m_UnrealisedPnl = 0.0;
    m_UnrealisedPnlIsSet = false;
    m_UnrealisedPnlPcnt = 0.0;
    m_UnrealisedPnlPcntIsSet = false;
    m_UnrealisedRoePcnt = 0.0;
    m_UnrealisedRoePcntIsSet = false;
    m_AvgCostPrice = 0.0;
    m_AvgCostPriceIsSet = false;
    m_AvgEntryPrice = 0.0;
    m_AvgEntryPriceIsSet = false;
    m_BreakEvenPrice = 0.0;
    m_BreakEvenPriceIsSet = false;
    m_MarginCallPrice = 0.0;
    m_MarginCallPriceIsSet = false;
    m_LiquidationPrice = 0.0;
    m_LiquidationPriceIsSet = false;
    m_BankruptPrice = 0.0;
    m_BankruptPriceIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
}

Position::~Position()
{
}

void Position::validate()
{
    // TODO: implement validation
}

web::json::value Position::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("account")] = ModelBase::toJson(m_Account);
    val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    }
    if(m_UnderlyingIsSet)
    {
        val[utility::conversions::to_string_t("underlying")] = ModelBase::toJson(m_Underlying);
    }
    if(m_QuoteCurrencyIsSet)
    {
        val[utility::conversions::to_string_t("quoteCurrency")] = ModelBase::toJson(m_QuoteCurrency);
    }
    if(m_CommissionIsSet)
    {
        val[utility::conversions::to_string_t("commission")] = ModelBase::toJson(m_Commission);
    }
    if(m_InitMarginReqIsSet)
    {
        val[utility::conversions::to_string_t("initMarginReq")] = ModelBase::toJson(m_InitMarginReq);
    }
    if(m_MaintMarginReqIsSet)
    {
        val[utility::conversions::to_string_t("maintMarginReq")] = ModelBase::toJson(m_MaintMarginReq);
    }
    if(m_RiskLimitIsSet)
    {
        val[utility::conversions::to_string_t("riskLimit")] = ModelBase::toJson(m_RiskLimit);
    }
    if(m_LeverageIsSet)
    {
        val[utility::conversions::to_string_t("leverage")] = ModelBase::toJson(m_Leverage);
    }
    if(m_CrossMarginIsSet)
    {
        val[utility::conversions::to_string_t("crossMargin")] = ModelBase::toJson(m_CrossMargin);
    }
    if(m_DeleveragePercentileIsSet)
    {
        val[utility::conversions::to_string_t("deleveragePercentile")] = ModelBase::toJson(m_DeleveragePercentile);
    }
    if(m_RebalancedPnlIsSet)
    {
        val[utility::conversions::to_string_t("rebalancedPnl")] = ModelBase::toJson(m_RebalancedPnl);
    }
    if(m_PrevRealisedPnlIsSet)
    {
        val[utility::conversions::to_string_t("prevRealisedPnl")] = ModelBase::toJson(m_PrevRealisedPnl);
    }
    if(m_PrevUnrealisedPnlIsSet)
    {
        val[utility::conversions::to_string_t("prevUnrealisedPnl")] = ModelBase::toJson(m_PrevUnrealisedPnl);
    }
    if(m_OpeningQtyIsSet)
    {
        val[utility::conversions::to_string_t("openingQty")] = ModelBase::toJson(m_OpeningQty);
    }
    if(m_OpenOrderBuyQtyIsSet)
    {
        val[utility::conversions::to_string_t("openOrderBuyQty")] = ModelBase::toJson(m_OpenOrderBuyQty);
    }
    if(m_OpenOrderBuyCostIsSet)
    {
        val[utility::conversions::to_string_t("openOrderBuyCost")] = ModelBase::toJson(m_OpenOrderBuyCost);
    }
    if(m_OpenOrderBuyPremiumIsSet)
    {
        val[utility::conversions::to_string_t("openOrderBuyPremium")] = ModelBase::toJson(m_OpenOrderBuyPremium);
    }
    if(m_OpenOrderSellQtyIsSet)
    {
        val[utility::conversions::to_string_t("openOrderSellQty")] = ModelBase::toJson(m_OpenOrderSellQty);
    }
    if(m_OpenOrderSellCostIsSet)
    {
        val[utility::conversions::to_string_t("openOrderSellCost")] = ModelBase::toJson(m_OpenOrderSellCost);
    }
    if(m_OpenOrderSellPremiumIsSet)
    {
        val[utility::conversions::to_string_t("openOrderSellPremium")] = ModelBase::toJson(m_OpenOrderSellPremium);
    }
    if(m_CurrentQtyIsSet)
    {
        val[utility::conversions::to_string_t("currentQty")] = ModelBase::toJson(m_CurrentQty);
    }
    if(m_CurrentCostIsSet)
    {
        val[utility::conversions::to_string_t("currentCost")] = ModelBase::toJson(m_CurrentCost);
    }
    if(m_CurrentCommIsSet)
    {
        val[utility::conversions::to_string_t("currentComm")] = ModelBase::toJson(m_CurrentComm);
    }
    if(m_RealisedCostIsSet)
    {
        val[utility::conversions::to_string_t("realisedCost")] = ModelBase::toJson(m_RealisedCost);
    }
    if(m_UnrealisedCostIsSet)
    {
        val[utility::conversions::to_string_t("unrealisedCost")] = ModelBase::toJson(m_UnrealisedCost);
    }
    if(m_GrossOpenPremiumIsSet)
    {
        val[utility::conversions::to_string_t("grossOpenPremium")] = ModelBase::toJson(m_GrossOpenPremium);
    }
    if(m_IsOpenIsSet)
    {
        val[utility::conversions::to_string_t("isOpen")] = ModelBase::toJson(m_IsOpen);
    }
    if(m_MarkPriceIsSet)
    {
        val[utility::conversions::to_string_t("markPrice")] = ModelBase::toJson(m_MarkPrice);
    }
    if(m_MarkValueIsSet)
    {
        val[utility::conversions::to_string_t("markValue")] = ModelBase::toJson(m_MarkValue);
    }
    if(m_RiskValueIsSet)
    {
        val[utility::conversions::to_string_t("riskValue")] = ModelBase::toJson(m_RiskValue);
    }
    if(m_HomeNotionalIsSet)
    {
        val[utility::conversions::to_string_t("homeNotional")] = ModelBase::toJson(m_HomeNotional);
    }
    if(m_ForeignNotionalIsSet)
    {
        val[utility::conversions::to_string_t("foreignNotional")] = ModelBase::toJson(m_ForeignNotional);
    }
    if(m_PosStateIsSet)
    {
        val[utility::conversions::to_string_t("posState")] = ModelBase::toJson(m_PosState);
    }
    if(m_PosCostIsSet)
    {
        val[utility::conversions::to_string_t("posCost")] = ModelBase::toJson(m_PosCost);
    }
    if(m_PosCrossIsSet)
    {
        val[utility::conversions::to_string_t("posCross")] = ModelBase::toJson(m_PosCross);
    }
    if(m_PosCommIsSet)
    {
        val[utility::conversions::to_string_t("posComm")] = ModelBase::toJson(m_PosComm);
    }
    if(m_PosLossIsSet)
    {
        val[utility::conversions::to_string_t("posLoss")] = ModelBase::toJson(m_PosLoss);
    }
    if(m_PosMarginIsSet)
    {
        val[utility::conversions::to_string_t("posMargin")] = ModelBase::toJson(m_PosMargin);
    }
    if(m_PosMaintIsSet)
    {
        val[utility::conversions::to_string_t("posMaint")] = ModelBase::toJson(m_PosMaint);
    }
    if(m_InitMarginIsSet)
    {
        val[utility::conversions::to_string_t("initMargin")] = ModelBase::toJson(m_InitMargin);
    }
    if(m_MaintMarginIsSet)
    {
        val[utility::conversions::to_string_t("maintMargin")] = ModelBase::toJson(m_MaintMargin);
    }
    if(m_RealisedPnlIsSet)
    {
        val[utility::conversions::to_string_t("realisedPnl")] = ModelBase::toJson(m_RealisedPnl);
    }
    if(m_UnrealisedPnlIsSet)
    {
        val[utility::conversions::to_string_t("unrealisedPnl")] = ModelBase::toJson(m_UnrealisedPnl);
    }
    if(m_UnrealisedPnlPcntIsSet)
    {
        val[utility::conversions::to_string_t("unrealisedPnlPcnt")] = ModelBase::toJson(m_UnrealisedPnlPcnt);
    }
    if(m_UnrealisedRoePcntIsSet)
    {
        val[utility::conversions::to_string_t("unrealisedRoePcnt")] = ModelBase::toJson(m_UnrealisedRoePcnt);
    }
    if(m_AvgCostPriceIsSet)
    {
        val[utility::conversions::to_string_t("avgCostPrice")] = ModelBase::toJson(m_AvgCostPrice);
    }
    if(m_AvgEntryPriceIsSet)
    {
        val[utility::conversions::to_string_t("avgEntryPrice")] = ModelBase::toJson(m_AvgEntryPrice);
    }
    if(m_BreakEvenPriceIsSet)
    {
        val[utility::conversions::to_string_t("breakEvenPrice")] = ModelBase::toJson(m_BreakEvenPrice);
    }
    if(m_MarginCallPriceIsSet)
    {
        val[utility::conversions::to_string_t("marginCallPrice")] = ModelBase::toJson(m_MarginCallPrice);
    }
    if(m_LiquidationPriceIsSet)
    {
        val[utility::conversions::to_string_t("liquidationPrice")] = ModelBase::toJson(m_LiquidationPrice);
    }
    if(m_BankruptPriceIsSet)
    {
        val[utility::conversions::to_string_t("bankruptPrice")] = ModelBase::toJson(m_BankruptPrice);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

void Position::fromJson(web::json::value& val)
{
    setAccount(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("account")]));
    setSymbol(ModelBase::stringFromJson(val[utility::conversions::to_string_t("symbol")]));
    if(val.has_field(utility::conversions::to_string_t("currency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("currency")];
        if(!fieldValue.is_null())
        {
            setCurrency(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("underlying")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("underlying")];
        if(!fieldValue.is_null())
        {
            setUnderlying(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("quoteCurrency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("quoteCurrency")];
        if(!fieldValue.is_null())
        {
            setQuoteCurrency(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("commission")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("commission")];
        if(!fieldValue.is_null())
        {
            setCommission(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("initMarginReq")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("initMarginReq")];
        if(!fieldValue.is_null())
        {
            setInitMarginReq(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maintMarginReq")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("maintMarginReq")];
        if(!fieldValue.is_null())
        {
            setMaintMarginReq(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("riskLimit")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("riskLimit")];
        if(!fieldValue.is_null())
        {
            setRiskLimit(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("leverage")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("leverage")];
        if(!fieldValue.is_null())
        {
            setLeverage(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("crossMargin")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("crossMargin")];
        if(!fieldValue.is_null())
        {
            setCrossMargin(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deleveragePercentile")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("deleveragePercentile")];
        if(!fieldValue.is_null())
        {
            setDeleveragePercentile(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rebalancedPnl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("rebalancedPnl")];
        if(!fieldValue.is_null())
        {
            setRebalancedPnl(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("prevRealisedPnl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("prevRealisedPnl")];
        if(!fieldValue.is_null())
        {
            setPrevRealisedPnl(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("prevUnrealisedPnl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("prevUnrealisedPnl")];
        if(!fieldValue.is_null())
        {
            setPrevUnrealisedPnl(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("openingQty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("openingQty")];
        if(!fieldValue.is_null())
        {
            setOpeningQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("openOrderBuyQty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("openOrderBuyQty")];
        if(!fieldValue.is_null())
        {
            setOpenOrderBuyQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("openOrderBuyCost")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("openOrderBuyCost")];
        if(!fieldValue.is_null())
        {
            setOpenOrderBuyCost(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("openOrderBuyPremium")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("openOrderBuyPremium")];
        if(!fieldValue.is_null())
        {
            setOpenOrderBuyPremium(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("openOrderSellQty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("openOrderSellQty")];
        if(!fieldValue.is_null())
        {
            setOpenOrderSellQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("openOrderSellCost")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("openOrderSellCost")];
        if(!fieldValue.is_null())
        {
            setOpenOrderSellCost(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("openOrderSellPremium")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("openOrderSellPremium")];
        if(!fieldValue.is_null())
        {
            setOpenOrderSellPremium(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("currentQty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("currentQty")];
        if(!fieldValue.is_null())
        {
            setCurrentQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("currentCost")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("currentCost")];
        if(!fieldValue.is_null())
        {
            setCurrentCost(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("currentComm")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("currentComm")];
        if(!fieldValue.is_null())
        {
            setCurrentComm(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("realisedCost")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("realisedCost")];
        if(!fieldValue.is_null())
        {
            setRealisedCost(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unrealisedCost")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("unrealisedCost")];
        if(!fieldValue.is_null())
        {
            setUnrealisedCost(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("grossOpenPremium")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("grossOpenPremium")];
        if(!fieldValue.is_null())
        {
            setGrossOpenPremium(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isOpen")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("isOpen")];
        if(!fieldValue.is_null())
        {
            setIsOpen(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("markPrice")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("markPrice")];
        if(!fieldValue.is_null())
        {
            setMarkPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("markValue")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("markValue")];
        if(!fieldValue.is_null())
        {
            setMarkValue(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("riskValue")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("riskValue")];
        if(!fieldValue.is_null())
        {
            setRiskValue(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("homeNotional")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("homeNotional")];
        if(!fieldValue.is_null())
        {
            setHomeNotional(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("foreignNotional")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("foreignNotional")];
        if(!fieldValue.is_null())
        {
            setForeignNotional(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("posState")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("posState")];
        if(!fieldValue.is_null())
        {
            setPosState(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("posCost")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("posCost")];
        if(!fieldValue.is_null())
        {
            setPosCost(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("posCross")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("posCross")];
        if(!fieldValue.is_null())
        {
            setPosCross(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("posComm")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("posComm")];
        if(!fieldValue.is_null())
        {
            setPosComm(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("posLoss")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("posLoss")];
        if(!fieldValue.is_null())
        {
            setPosLoss(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("posMargin")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("posMargin")];
        if(!fieldValue.is_null())
        {
            setPosMargin(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("posMaint")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("posMaint")];
        if(!fieldValue.is_null())
        {
            setPosMaint(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("initMargin")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("initMargin")];
        if(!fieldValue.is_null())
        {
            setInitMargin(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maintMargin")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("maintMargin")];
        if(!fieldValue.is_null())
        {
            setMaintMargin(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("realisedPnl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("realisedPnl")];
        if(!fieldValue.is_null())
        {
            setRealisedPnl(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unrealisedPnl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("unrealisedPnl")];
        if(!fieldValue.is_null())
        {
            setUnrealisedPnl(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unrealisedPnlPcnt")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("unrealisedPnlPcnt")];
        if(!fieldValue.is_null())
        {
            setUnrealisedPnlPcnt(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unrealisedRoePcnt")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("unrealisedRoePcnt")];
        if(!fieldValue.is_null())
        {
            setUnrealisedRoePcnt(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avgCostPrice")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("avgCostPrice")];
        if(!fieldValue.is_null())
        {
            setAvgCostPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avgEntryPrice")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("avgEntryPrice")];
        if(!fieldValue.is_null())
        {
            setAvgEntryPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("breakEvenPrice")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("breakEvenPrice")];
        if(!fieldValue.is_null())
        {
            setBreakEvenPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("marginCallPrice")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("marginCallPrice")];
        if(!fieldValue.is_null())
        {
            setMarginCallPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("liquidationPrice")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("liquidationPrice")];
        if(!fieldValue.is_null())
        {
            setLiquidationPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bankruptPrice")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("bankruptPrice")];
        if(!fieldValue.is_null())
        {
            setBankruptPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("timestamp")];
        if(!fieldValue.is_null())
        {
            setTimestamp(ModelBase::dateFromJson(fieldValue));
        }
    }
}

void Position::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("account"), m_Account));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency"), m_Currency));
        
    }
    if(m_UnderlyingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("underlying"), m_Underlying));
        
    }
    if(m_QuoteCurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quoteCurrency"), m_QuoteCurrency));
        
    }
    if(m_CommissionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("commission"), m_Commission));
    }
    if(m_InitMarginReqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("initMarginReq"), m_InitMarginReq));
    }
    if(m_MaintMarginReqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maintMarginReq"), m_MaintMarginReq));
    }
    if(m_RiskLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("riskLimit"), m_RiskLimit));
    }
    if(m_LeverageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("leverage"), m_Leverage));
    }
    if(m_CrossMarginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("crossMargin"), m_CrossMargin));
    }
    if(m_DeleveragePercentileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deleveragePercentile"), m_DeleveragePercentile));
    }
    if(m_RebalancedPnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rebalancedPnl"), m_RebalancedPnl));
    }
    if(m_PrevRealisedPnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prevRealisedPnl"), m_PrevRealisedPnl));
    }
    if(m_PrevUnrealisedPnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prevUnrealisedPnl"), m_PrevUnrealisedPnl));
    }
    if(m_OpeningQtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openingQty"), m_OpeningQty));
    }
    if(m_OpenOrderBuyQtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openOrderBuyQty"), m_OpenOrderBuyQty));
    }
    if(m_OpenOrderBuyCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openOrderBuyCost"), m_OpenOrderBuyCost));
    }
    if(m_OpenOrderBuyPremiumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openOrderBuyPremium"), m_OpenOrderBuyPremium));
    }
    if(m_OpenOrderSellQtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openOrderSellQty"), m_OpenOrderSellQty));
    }
    if(m_OpenOrderSellCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openOrderSellCost"), m_OpenOrderSellCost));
    }
    if(m_OpenOrderSellPremiumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("openOrderSellPremium"), m_OpenOrderSellPremium));
    }
    if(m_CurrentQtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currentQty"), m_CurrentQty));
    }
    if(m_CurrentCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currentCost"), m_CurrentCost));
    }
    if(m_CurrentCommIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currentComm"), m_CurrentComm));
    }
    if(m_RealisedCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("realisedCost"), m_RealisedCost));
    }
    if(m_UnrealisedCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unrealisedCost"), m_UnrealisedCost));
    }
    if(m_GrossOpenPremiumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("grossOpenPremium"), m_GrossOpenPremium));
    }
    if(m_IsOpenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isOpen"), m_IsOpen));
    }
    if(m_MarkPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("markPrice"), m_MarkPrice));
    }
    if(m_MarkValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("markValue"), m_MarkValue));
    }
    if(m_RiskValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("riskValue"), m_RiskValue));
    }
    if(m_HomeNotionalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("homeNotional"), m_HomeNotional));
    }
    if(m_ForeignNotionalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("foreignNotional"), m_ForeignNotional));
    }
    if(m_PosStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posState"), m_PosState));
        
    }
    if(m_PosCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posCost"), m_PosCost));
    }
    if(m_PosCrossIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posCross"), m_PosCross));
    }
    if(m_PosCommIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posComm"), m_PosComm));
    }
    if(m_PosLossIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posLoss"), m_PosLoss));
    }
    if(m_PosMarginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posMargin"), m_PosMargin));
    }
    if(m_PosMaintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("posMaint"), m_PosMaint));
    }
    if(m_InitMarginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("initMargin"), m_InitMargin));
    }
    if(m_MaintMarginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maintMargin"), m_MaintMargin));
    }
    if(m_RealisedPnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("realisedPnl"), m_RealisedPnl));
    }
    if(m_UnrealisedPnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unrealisedPnl"), m_UnrealisedPnl));
    }
    if(m_UnrealisedPnlPcntIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unrealisedPnlPcnt"), m_UnrealisedPnlPcnt));
    }
    if(m_UnrealisedRoePcntIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unrealisedRoePcnt"), m_UnrealisedRoePcnt));
    }
    if(m_AvgCostPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avgCostPrice"), m_AvgCostPrice));
    }
    if(m_AvgEntryPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avgEntryPrice"), m_AvgEntryPrice));
    }
    if(m_BreakEvenPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("breakEvenPrice"), m_BreakEvenPrice));
    }
    if(m_MarginCallPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("marginCallPrice"), m_MarginCallPrice));
    }
    if(m_LiquidationPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("liquidationPrice"), m_LiquidationPrice));
    }
    if(m_BankruptPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bankruptPrice"), m_BankruptPrice));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
        
    }
}

void Position::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setAccount(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("account"))));
    setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    if(multipart->hasContent(utility::conversions::to_string_t("currency")))
    {
        setCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("underlying")))
    {
        setUnderlying(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("underlying"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("quoteCurrency")))
    {
        setQuoteCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("quoteCurrency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("commission")))
    {
        setCommission(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("commission"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("initMarginReq")))
    {
        setInitMarginReq(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("initMarginReq"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maintMarginReq")))
    {
        setMaintMarginReq(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("maintMarginReq"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("riskLimit")))
    {
        setRiskLimit(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("riskLimit"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("leverage")))
    {
        setLeverage(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("leverage"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("crossMargin")))
    {
        setCrossMargin(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("crossMargin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deleveragePercentile")))
    {
        setDeleveragePercentile(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("deleveragePercentile"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rebalancedPnl")))
    {
        setRebalancedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("rebalancedPnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prevRealisedPnl")))
    {
        setPrevRealisedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("prevRealisedPnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prevUnrealisedPnl")))
    {
        setPrevUnrealisedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("prevUnrealisedPnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openingQty")))
    {
        setOpeningQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openingQty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openOrderBuyQty")))
    {
        setOpenOrderBuyQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openOrderBuyQty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openOrderBuyCost")))
    {
        setOpenOrderBuyCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openOrderBuyCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openOrderBuyPremium")))
    {
        setOpenOrderBuyPremium(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openOrderBuyPremium"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openOrderSellQty")))
    {
        setOpenOrderSellQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openOrderSellQty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openOrderSellCost")))
    {
        setOpenOrderSellCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openOrderSellCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("openOrderSellPremium")))
    {
        setOpenOrderSellPremium(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("openOrderSellPremium"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currentQty")))
    {
        setCurrentQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currentQty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currentCost")))
    {
        setCurrentCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currentCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currentComm")))
    {
        setCurrentComm(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currentComm"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("realisedCost")))
    {
        setRealisedCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("realisedCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unrealisedCost")))
    {
        setUnrealisedCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unrealisedCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("grossOpenPremium")))
    {
        setGrossOpenPremium(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("grossOpenPremium"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isOpen")))
    {
        setIsOpen(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isOpen"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("markPrice")))
    {
        setMarkPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("markPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("markValue")))
    {
        setMarkValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("markValue"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("riskValue")))
    {
        setRiskValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("riskValue"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("homeNotional")))
    {
        setHomeNotional(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("homeNotional"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("foreignNotional")))
    {
        setForeignNotional(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("foreignNotional"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posState")))
    {
        setPosState(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posState"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posCost")))
    {
        setPosCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posCost"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posCross")))
    {
        setPosCross(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posCross"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posComm")))
    {
        setPosComm(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posComm"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posLoss")))
    {
        setPosLoss(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posLoss"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posMargin")))
    {
        setPosMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posMargin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("posMaint")))
    {
        setPosMaint(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("posMaint"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("initMargin")))
    {
        setInitMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("initMargin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maintMargin")))
    {
        setMaintMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("maintMargin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("realisedPnl")))
    {
        setRealisedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("realisedPnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unrealisedPnl")))
    {
        setUnrealisedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unrealisedPnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unrealisedPnlPcnt")))
    {
        setUnrealisedPnlPcnt(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unrealisedPnlPcnt"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unrealisedRoePcnt")))
    {
        setUnrealisedRoePcnt(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unrealisedRoePcnt"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avgCostPrice")))
    {
        setAvgCostPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("avgCostPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avgEntryPrice")))
    {
        setAvgEntryPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("avgEntryPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("breakEvenPrice")))
    {
        setBreakEvenPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("breakEvenPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("marginCallPrice")))
    {
        setMarginCallPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("marginCallPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("liquidationPrice")))
    {
        setLiquidationPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("liquidationPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bankruptPrice")))
    {
        setBankruptPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("bankruptPrice"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp"))));
    }
}

double Position::getAccount() const
{
    return m_Account;
}


void Position::setAccount(double value)
{
    m_Account = value;
    
}
utility::string_t Position::getSymbol() const
{
    return m_Symbol;
}


void Position::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    
}
utility::string_t Position::getCurrency() const
{
    return m_Currency;
}


void Position::setCurrency(utility::string_t value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool Position::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void Position::unsetCurrency()
{
    m_CurrencyIsSet = false;
}

utility::string_t Position::getUnderlying() const
{
    return m_Underlying;
}


void Position::setUnderlying(utility::string_t value)
{
    m_Underlying = value;
    m_UnderlyingIsSet = true;
}
bool Position::underlyingIsSet() const
{
    return m_UnderlyingIsSet;
}

void Position::unsetUnderlying()
{
    m_UnderlyingIsSet = false;
}

utility::string_t Position::getQuoteCurrency() const
{
    return m_QuoteCurrency;
}


void Position::setQuoteCurrency(utility::string_t value)
{
    m_QuoteCurrency = value;
    m_QuoteCurrencyIsSet = true;
}
bool Position::quoteCurrencyIsSet() const
{
    return m_QuoteCurrencyIsSet;
}

void Position::unsetQuoteCurrency()
{
    m_QuoteCurrencyIsSet = false;
}

double Position::getCommission() const
{
    return m_Commission;
}


void Position::setCommission(double value)
{
    m_Commission = value;
    m_CommissionIsSet = true;
}
bool Position::commissionIsSet() const
{
    return m_CommissionIsSet;
}

void Position::unsetCommission()
{
    m_CommissionIsSet = false;
}

double Position::getInitMarginReq() const
{
    return m_InitMarginReq;
}


void Position::setInitMarginReq(double value)
{
    m_InitMarginReq = value;
    m_InitMarginReqIsSet = true;
}
bool Position::initMarginReqIsSet() const
{
    return m_InitMarginReqIsSet;
}

void Position::unsetInitMarginReq()
{
    m_InitMarginReqIsSet = false;
}

double Position::getMaintMarginReq() const
{
    return m_MaintMarginReq;
}


void Position::setMaintMarginReq(double value)
{
    m_MaintMarginReq = value;
    m_MaintMarginReqIsSet = true;
}
bool Position::maintMarginReqIsSet() const
{
    return m_MaintMarginReqIsSet;
}

void Position::unsetMaintMarginReq()
{
    m_MaintMarginReqIsSet = false;
}

double Position::getRiskLimit() const
{
    return m_RiskLimit;
}


void Position::setRiskLimit(double value)
{
    m_RiskLimit = value;
    m_RiskLimitIsSet = true;
}
bool Position::riskLimitIsSet() const
{
    return m_RiskLimitIsSet;
}

void Position::unsetRiskLimit()
{
    m_RiskLimitIsSet = false;
}

double Position::getLeverage() const
{
    return m_Leverage;
}


void Position::setLeverage(double value)
{
    m_Leverage = value;
    m_LeverageIsSet = true;
}
bool Position::leverageIsSet() const
{
    return m_LeverageIsSet;
}

void Position::unsetLeverage()
{
    m_LeverageIsSet = false;
}

bool Position::isCrossMargin() const
{
    return m_CrossMargin;
}


void Position::setCrossMargin(bool value)
{
    m_CrossMargin = value;
    m_CrossMarginIsSet = true;
}
bool Position::crossMarginIsSet() const
{
    return m_CrossMarginIsSet;
}

void Position::unsetCrossMargin()
{
    m_CrossMarginIsSet = false;
}

double Position::getDeleveragePercentile() const
{
    return m_DeleveragePercentile;
}


void Position::setDeleveragePercentile(double value)
{
    m_DeleveragePercentile = value;
    m_DeleveragePercentileIsSet = true;
}
bool Position::deleveragePercentileIsSet() const
{
    return m_DeleveragePercentileIsSet;
}

void Position::unsetDeleveragePercentile()
{
    m_DeleveragePercentileIsSet = false;
}

double Position::getRebalancedPnl() const
{
    return m_RebalancedPnl;
}


void Position::setRebalancedPnl(double value)
{
    m_RebalancedPnl = value;
    m_RebalancedPnlIsSet = true;
}
bool Position::rebalancedPnlIsSet() const
{
    return m_RebalancedPnlIsSet;
}

void Position::unsetRebalancedPnl()
{
    m_RebalancedPnlIsSet = false;
}

double Position::getPrevRealisedPnl() const
{
    return m_PrevRealisedPnl;
}


void Position::setPrevRealisedPnl(double value)
{
    m_PrevRealisedPnl = value;
    m_PrevRealisedPnlIsSet = true;
}
bool Position::prevRealisedPnlIsSet() const
{
    return m_PrevRealisedPnlIsSet;
}

void Position::unsetPrevRealisedPnl()
{
    m_PrevRealisedPnlIsSet = false;
}

double Position::getPrevUnrealisedPnl() const
{
    return m_PrevUnrealisedPnl;
}


void Position::setPrevUnrealisedPnl(double value)
{
    m_PrevUnrealisedPnl = value;
    m_PrevUnrealisedPnlIsSet = true;
}
bool Position::prevUnrealisedPnlIsSet() const
{
    return m_PrevUnrealisedPnlIsSet;
}

void Position::unsetPrevUnrealisedPnl()
{
    m_PrevUnrealisedPnlIsSet = false;
}

double Position::getOpeningQty() const
{
    return m_OpeningQty;
}


void Position::setOpeningQty(double value)
{
    m_OpeningQty = value;
    m_OpeningQtyIsSet = true;
}
bool Position::openingQtyIsSet() const
{
    return m_OpeningQtyIsSet;
}

void Position::unsetOpeningQty()
{
    m_OpeningQtyIsSet = false;
}

double Position::getOpenOrderBuyQty() const
{
    return m_OpenOrderBuyQty;
}


void Position::setOpenOrderBuyQty(double value)
{
    m_OpenOrderBuyQty = value;
    m_OpenOrderBuyQtyIsSet = true;
}
bool Position::openOrderBuyQtyIsSet() const
{
    return m_OpenOrderBuyQtyIsSet;
}

void Position::unsetOpenOrderBuyQty()
{
    m_OpenOrderBuyQtyIsSet = false;
}

double Position::getOpenOrderBuyCost() const
{
    return m_OpenOrderBuyCost;
}


void Position::setOpenOrderBuyCost(double value)
{
    m_OpenOrderBuyCost = value;
    m_OpenOrderBuyCostIsSet = true;
}
bool Position::openOrderBuyCostIsSet() const
{
    return m_OpenOrderBuyCostIsSet;
}

void Position::unsetOpenOrderBuyCost()
{
    m_OpenOrderBuyCostIsSet = false;
}

double Position::getOpenOrderBuyPremium() const
{
    return m_OpenOrderBuyPremium;
}


void Position::setOpenOrderBuyPremium(double value)
{
    m_OpenOrderBuyPremium = value;
    m_OpenOrderBuyPremiumIsSet = true;
}
bool Position::openOrderBuyPremiumIsSet() const
{
    return m_OpenOrderBuyPremiumIsSet;
}

void Position::unsetOpenOrderBuyPremium()
{
    m_OpenOrderBuyPremiumIsSet = false;
}

double Position::getOpenOrderSellQty() const
{
    return m_OpenOrderSellQty;
}


void Position::setOpenOrderSellQty(double value)
{
    m_OpenOrderSellQty = value;
    m_OpenOrderSellQtyIsSet = true;
}
bool Position::openOrderSellQtyIsSet() const
{
    return m_OpenOrderSellQtyIsSet;
}

void Position::unsetOpenOrderSellQty()
{
    m_OpenOrderSellQtyIsSet = false;
}

double Position::getOpenOrderSellCost() const
{
    return m_OpenOrderSellCost;
}


void Position::setOpenOrderSellCost(double value)
{
    m_OpenOrderSellCost = value;
    m_OpenOrderSellCostIsSet = true;
}
bool Position::openOrderSellCostIsSet() const
{
    return m_OpenOrderSellCostIsSet;
}

void Position::unsetOpenOrderSellCost()
{
    m_OpenOrderSellCostIsSet = false;
}

double Position::getOpenOrderSellPremium() const
{
    return m_OpenOrderSellPremium;
}


void Position::setOpenOrderSellPremium(double value)
{
    m_OpenOrderSellPremium = value;
    m_OpenOrderSellPremiumIsSet = true;
}
bool Position::openOrderSellPremiumIsSet() const
{
    return m_OpenOrderSellPremiumIsSet;
}

void Position::unsetOpenOrderSellPremium()
{
    m_OpenOrderSellPremiumIsSet = false;
}

double Position::getCurrentQty() const
{
    return m_CurrentQty;
}


void Position::setCurrentQty(double value)
{
    m_CurrentQty = value;
    m_CurrentQtyIsSet = true;
}
bool Position::currentQtyIsSet() const
{
    return m_CurrentQtyIsSet;
}

void Position::unsetCurrentQty()
{
    m_CurrentQtyIsSet = false;
}

double Position::getCurrentCost() const
{
    return m_CurrentCost;
}


void Position::setCurrentCost(double value)
{
    m_CurrentCost = value;
    m_CurrentCostIsSet = true;
}
bool Position::currentCostIsSet() const
{
    return m_CurrentCostIsSet;
}

void Position::unsetCurrentCost()
{
    m_CurrentCostIsSet = false;
}

double Position::getCurrentComm() const
{
    return m_CurrentComm;
}


void Position::setCurrentComm(double value)
{
    m_CurrentComm = value;
    m_CurrentCommIsSet = true;
}
bool Position::currentCommIsSet() const
{
    return m_CurrentCommIsSet;
}

void Position::unsetCurrentComm()
{
    m_CurrentCommIsSet = false;
}

double Position::getRealisedCost() const
{
    return m_RealisedCost;
}


void Position::setRealisedCost(double value)
{
    m_RealisedCost = value;
    m_RealisedCostIsSet = true;
}
bool Position::realisedCostIsSet() const
{
    return m_RealisedCostIsSet;
}

void Position::unsetRealisedCost()
{
    m_RealisedCostIsSet = false;
}

double Position::getUnrealisedCost() const
{
    return m_UnrealisedCost;
}


void Position::setUnrealisedCost(double value)
{
    m_UnrealisedCost = value;
    m_UnrealisedCostIsSet = true;
}
bool Position::unrealisedCostIsSet() const
{
    return m_UnrealisedCostIsSet;
}

void Position::unsetUnrealisedCost()
{
    m_UnrealisedCostIsSet = false;
}

double Position::getGrossOpenPremium() const
{
    return m_GrossOpenPremium;
}


void Position::setGrossOpenPremium(double value)
{
    m_GrossOpenPremium = value;
    m_GrossOpenPremiumIsSet = true;
}
bool Position::grossOpenPremiumIsSet() const
{
    return m_GrossOpenPremiumIsSet;
}

void Position::unsetGrossOpenPremium()
{
    m_GrossOpenPremiumIsSet = false;
}

bool Position::isIsOpen() const
{
    return m_IsOpen;
}


void Position::setIsOpen(bool value)
{
    m_IsOpen = value;
    m_IsOpenIsSet = true;
}
bool Position::isOpenIsSet() const
{
    return m_IsOpenIsSet;
}

void Position::unsetIsOpen()
{
    m_IsOpenIsSet = false;
}

double Position::getMarkPrice() const
{
    return m_MarkPrice;
}


void Position::setMarkPrice(double value)
{
    m_MarkPrice = value;
    m_MarkPriceIsSet = true;
}
bool Position::markPriceIsSet() const
{
    return m_MarkPriceIsSet;
}

void Position::unsetMarkPrice()
{
    m_MarkPriceIsSet = false;
}

double Position::getMarkValue() const
{
    return m_MarkValue;
}


void Position::setMarkValue(double value)
{
    m_MarkValue = value;
    m_MarkValueIsSet = true;
}
bool Position::markValueIsSet() const
{
    return m_MarkValueIsSet;
}

void Position::unsetMarkValue()
{
    m_MarkValueIsSet = false;
}

double Position::getRiskValue() const
{
    return m_RiskValue;
}


void Position::setRiskValue(double value)
{
    m_RiskValue = value;
    m_RiskValueIsSet = true;
}
bool Position::riskValueIsSet() const
{
    return m_RiskValueIsSet;
}

void Position::unsetRiskValue()
{
    m_RiskValueIsSet = false;
}

double Position::getHomeNotional() const
{
    return m_HomeNotional;
}


void Position::setHomeNotional(double value)
{
    m_HomeNotional = value;
    m_HomeNotionalIsSet = true;
}
bool Position::homeNotionalIsSet() const
{
    return m_HomeNotionalIsSet;
}

void Position::unsetHomeNotional()
{
    m_HomeNotionalIsSet = false;
}

double Position::getForeignNotional() const
{
    return m_ForeignNotional;
}


void Position::setForeignNotional(double value)
{
    m_ForeignNotional = value;
    m_ForeignNotionalIsSet = true;
}
bool Position::foreignNotionalIsSet() const
{
    return m_ForeignNotionalIsSet;
}

void Position::unsetForeignNotional()
{
    m_ForeignNotionalIsSet = false;
}

utility::string_t Position::getPosState() const
{
    return m_PosState;
}


void Position::setPosState(utility::string_t value)
{
    m_PosState = value;
    m_PosStateIsSet = true;
}
bool Position::posStateIsSet() const
{
    return m_PosStateIsSet;
}

void Position::unsetPosState()
{
    m_PosStateIsSet = false;
}

double Position::getPosCost() const
{
    return m_PosCost;
}


void Position::setPosCost(double value)
{
    m_PosCost = value;
    m_PosCostIsSet = true;
}
bool Position::posCostIsSet() const
{
    return m_PosCostIsSet;
}

void Position::unsetPosCost()
{
    m_PosCostIsSet = false;
}

double Position::getPosCross() const
{
    return m_PosCross;
}


void Position::setPosCross(double value)
{
    m_PosCross = value;
    m_PosCrossIsSet = true;
}
bool Position::posCrossIsSet() const
{
    return m_PosCrossIsSet;
}

void Position::unsetPosCross()
{
    m_PosCrossIsSet = false;
}

double Position::getPosComm() const
{
    return m_PosComm;
}


void Position::setPosComm(double value)
{
    m_PosComm = value;
    m_PosCommIsSet = true;
}
bool Position::posCommIsSet() const
{
    return m_PosCommIsSet;
}

void Position::unsetPosComm()
{
    m_PosCommIsSet = false;
}

double Position::getPosLoss() const
{
    return m_PosLoss;
}


void Position::setPosLoss(double value)
{
    m_PosLoss = value;
    m_PosLossIsSet = true;
}
bool Position::posLossIsSet() const
{
    return m_PosLossIsSet;
}

void Position::unsetPosLoss()
{
    m_PosLossIsSet = false;
}

double Position::getPosMargin() const
{
    return m_PosMargin;
}


void Position::setPosMargin(double value)
{
    m_PosMargin = value;
    m_PosMarginIsSet = true;
}
bool Position::posMarginIsSet() const
{
    return m_PosMarginIsSet;
}

void Position::unsetPosMargin()
{
    m_PosMarginIsSet = false;
}

double Position::getPosMaint() const
{
    return m_PosMaint;
}


void Position::setPosMaint(double value)
{
    m_PosMaint = value;
    m_PosMaintIsSet = true;
}
bool Position::posMaintIsSet() const
{
    return m_PosMaintIsSet;
}

void Position::unsetPosMaint()
{
    m_PosMaintIsSet = false;
}

double Position::getInitMargin() const
{
    return m_InitMargin;
}


void Position::setInitMargin(double value)
{
    m_InitMargin = value;
    m_InitMarginIsSet = true;
}
bool Position::initMarginIsSet() const
{
    return m_InitMarginIsSet;
}

void Position::unsetInitMargin()
{
    m_InitMarginIsSet = false;
}

double Position::getMaintMargin() const
{
    return m_MaintMargin;
}


void Position::setMaintMargin(double value)
{
    m_MaintMargin = value;
    m_MaintMarginIsSet = true;
}
bool Position::maintMarginIsSet() const
{
    return m_MaintMarginIsSet;
}

void Position::unsetMaintMargin()
{
    m_MaintMarginIsSet = false;
}

double Position::getRealisedPnl() const
{
    return m_RealisedPnl;
}


void Position::setRealisedPnl(double value)
{
    m_RealisedPnl = value;
    m_RealisedPnlIsSet = true;
}
bool Position::realisedPnlIsSet() const
{
    return m_RealisedPnlIsSet;
}

void Position::unsetRealisedPnl()
{
    m_RealisedPnlIsSet = false;
}

double Position::getUnrealisedPnl() const
{
    return m_UnrealisedPnl;
}


void Position::setUnrealisedPnl(double value)
{
    m_UnrealisedPnl = value;
    m_UnrealisedPnlIsSet = true;
}
bool Position::unrealisedPnlIsSet() const
{
    return m_UnrealisedPnlIsSet;
}

void Position::unsetUnrealisedPnl()
{
    m_UnrealisedPnlIsSet = false;
}

double Position::getUnrealisedPnlPcnt() const
{
    return m_UnrealisedPnlPcnt;
}


void Position::setUnrealisedPnlPcnt(double value)
{
    m_UnrealisedPnlPcnt = value;
    m_UnrealisedPnlPcntIsSet = true;
}
bool Position::unrealisedPnlPcntIsSet() const
{
    return m_UnrealisedPnlPcntIsSet;
}

void Position::unsetUnrealisedPnlPcnt()
{
    m_UnrealisedPnlPcntIsSet = false;
}

double Position::getUnrealisedRoePcnt() const
{
    return m_UnrealisedRoePcnt;
}


void Position::setUnrealisedRoePcnt(double value)
{
    m_UnrealisedRoePcnt = value;
    m_UnrealisedRoePcntIsSet = true;
}
bool Position::unrealisedRoePcntIsSet() const
{
    return m_UnrealisedRoePcntIsSet;
}

void Position::unsetUnrealisedRoePcnt()
{
    m_UnrealisedRoePcntIsSet = false;
}

double Position::getAvgCostPrice() const
{
    return m_AvgCostPrice;
}


void Position::setAvgCostPrice(double value)
{
    m_AvgCostPrice = value;
    m_AvgCostPriceIsSet = true;
}
bool Position::avgCostPriceIsSet() const
{
    return m_AvgCostPriceIsSet;
}

void Position::unsetAvgCostPrice()
{
    m_AvgCostPriceIsSet = false;
}

double Position::getAvgEntryPrice() const
{
    return m_AvgEntryPrice;
}


void Position::setAvgEntryPrice(double value)
{
    m_AvgEntryPrice = value;
    m_AvgEntryPriceIsSet = true;
}
bool Position::avgEntryPriceIsSet() const
{
    return m_AvgEntryPriceIsSet;
}

void Position::unsetAvgEntryPrice()
{
    m_AvgEntryPriceIsSet = false;
}

double Position::getBreakEvenPrice() const
{
    return m_BreakEvenPrice;
}


void Position::setBreakEvenPrice(double value)
{
    m_BreakEvenPrice = value;
    m_BreakEvenPriceIsSet = true;
}
bool Position::breakEvenPriceIsSet() const
{
    return m_BreakEvenPriceIsSet;
}

void Position::unsetBreakEvenPrice()
{
    m_BreakEvenPriceIsSet = false;
}

double Position::getMarginCallPrice() const
{
    return m_MarginCallPrice;
}


void Position::setMarginCallPrice(double value)
{
    m_MarginCallPrice = value;
    m_MarginCallPriceIsSet = true;
}
bool Position::marginCallPriceIsSet() const
{
    return m_MarginCallPriceIsSet;
}

void Position::unsetMarginCallPrice()
{
    m_MarginCallPriceIsSet = false;
}

double Position::getLiquidationPrice() const
{
    return m_LiquidationPrice;
}


void Position::setLiquidationPrice(double value)
{
    m_LiquidationPrice = value;
    m_LiquidationPriceIsSet = true;
}
bool Position::liquidationPriceIsSet() const
{
    return m_LiquidationPriceIsSet;
}

void Position::unsetLiquidationPrice()
{
    m_LiquidationPriceIsSet = false;
}

double Position::getBankruptPrice() const
{
    return m_BankruptPrice;
}


void Position::setBankruptPrice(double value)
{
    m_BankruptPrice = value;
    m_BankruptPriceIsSet = true;
}
bool Position::bankruptPriceIsSet() const
{
    return m_BankruptPriceIsSet;
}

void Position::unsetBankruptPrice()
{
    m_BankruptPriceIsSet = false;
}

utility::datetime Position::getTimestamp() const
{
    return m_Timestamp;
}


void Position::setTimestamp(utility::datetime value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool Position::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Position::unsetTimestamp()
{
    m_TimestampIsSet = false;
}

}
}
}
}

