/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.38-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PinnedMessage.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PinnedMessage::PinnedMessage()
{
    m_Id = 0.0;
    m_ChannelID = 0.0;
    m_MessageId = 0.0;
    m_Created = utility::datetime();
    m_CreatedIsSet = false;
    m_Ended = utility::datetime();
    m_EndedIsSet = false;
    m_CreatedUserId = 0.0;
    m_CreatedUserIdIsSet = false;
    m_EndedUserId = 0.0;
    m_EndedUserIdIsSet = false;
}

PinnedMessage::~PinnedMessage()
{
}

void PinnedMessage::validate()
{
    // TODO: implement validation
}

web::json::value PinnedMessage::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("channelID")] = ModelBase::toJson(m_ChannelID);
    val[utility::conversions::to_string_t("messageId")] = ModelBase::toJson(m_MessageId);
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_EndedIsSet)
    {
        val[utility::conversions::to_string_t("ended")] = ModelBase::toJson(m_Ended);
    }
    if(m_CreatedUserIdIsSet)
    {
        val[utility::conversions::to_string_t("createdUserId")] = ModelBase::toJson(m_CreatedUserId);
    }
    if(m_EndedUserIdIsSet)
    {
        val[utility::conversions::to_string_t("endedUserId")] = ModelBase::toJson(m_EndedUserId);
    }

    return val;
}

void PinnedMessage::fromJson(web::json::value& val)
{
    setId(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("id")]));
    setChannelID(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("channelID")]));
    setMessageId(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("messageId")]));
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created")];
        if(!fieldValue.is_null())
        {
            setCreated(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ended")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ended")];
        if(!fieldValue.is_null())
        {
            setEnded(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdUserId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("createdUserId")];
        if(!fieldValue.is_null())
        {
            setCreatedUserId(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endedUserId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("endedUserId")];
        if(!fieldValue.is_null())
        {
            setEndedUserId(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void PinnedMessage::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("channelID"), m_ChannelID));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageId"), m_MessageId));
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
        
    }
    if(m_EndedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ended"), m_Ended));
        
    }
    if(m_CreatedUserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdUserId"), m_CreatedUserId));
    }
    if(m_EndedUserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endedUserId"), m_EndedUserId));
    }
}

void PinnedMessage::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setChannelID(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("channelID"))));
    setMessageId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageId"))));
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        setCreated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ended")))
    {
        setEnded(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ended"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdUserId")))
    {
        setCreatedUserId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdUserId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endedUserId")))
    {
        setEndedUserId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("endedUserId"))));
    }
}

double PinnedMessage::getId() const
{
    return m_Id;
}


void PinnedMessage::setId(double value)
{
    m_Id = value;
    
}
double PinnedMessage::getChannelID() const
{
    return m_ChannelID;
}


void PinnedMessage::setChannelID(double value)
{
    m_ChannelID = value;
    
}
double PinnedMessage::getMessageId() const
{
    return m_MessageId;
}


void PinnedMessage::setMessageId(double value)
{
    m_MessageId = value;
    
}
utility::datetime PinnedMessage::getCreated() const
{
    return m_Created;
}


void PinnedMessage::setCreated(utility::datetime value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}
bool PinnedMessage::createdIsSet() const
{
    return m_CreatedIsSet;
}

void PinnedMessage::unsetCreated()
{
    m_CreatedIsSet = false;
}

utility::datetime PinnedMessage::getEnded() const
{
    return m_Ended;
}


void PinnedMessage::setEnded(utility::datetime value)
{
    m_Ended = value;
    m_EndedIsSet = true;
}
bool PinnedMessage::endedIsSet() const
{
    return m_EndedIsSet;
}

void PinnedMessage::unsetEnded()
{
    m_EndedIsSet = false;
}

double PinnedMessage::getCreatedUserId() const
{
    return m_CreatedUserId;
}


void PinnedMessage::setCreatedUserId(double value)
{
    m_CreatedUserId = value;
    m_CreatedUserIdIsSet = true;
}
bool PinnedMessage::createdUserIdIsSet() const
{
    return m_CreatedUserIdIsSet;
}

void PinnedMessage::unsetCreatedUserId()
{
    m_CreatedUserIdIsSet = false;
}

double PinnedMessage::getEndedUserId() const
{
    return m_EndedUserId;
}


void PinnedMessage::setEndedUserId(double value)
{
    m_EndedUserId = value;
    m_EndedUserIdIsSet = true;
}
bool PinnedMessage::endedUserIdIsSet() const
{
    return m_EndedUserIdIsSet;
}

void PinnedMessage::unsetEndedUserId()
{
    m_EndedUserIdIsSet = false;
}

}
}
}
}

