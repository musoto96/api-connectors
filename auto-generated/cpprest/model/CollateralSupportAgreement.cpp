/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.38-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CollateralSupportAgreement.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CollateralSupportAgreement::CollateralSupportAgreement()
{
    m_CsaID = utility::conversions::to_string_t("");
    m_Account = 0.0;
    m_AccountIsSet = false;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_Amount = 0.0;
    m_AmountIsSet = false;
    m_MinAmount = 0.0;
    m_MinAmountIsSet = false;
    m_Threshold = 0.0;
    m_ThresholdIsSet = false;
    m_MmRatioMarginCall = 0.0;
    m_MmRatioMarginCallIsSet = false;
    m_MmRatioLiquidation = 0.0;
    m_MmRatioLiquidationIsSet = false;
    m_StartTime = utility::conversions::to_string_t("");
    m_StartTimeIsSet = false;
    m_MaturityTime = utility::conversions::to_string_t("");
    m_MaturityTimeIsSet = false;
    m_MaturityInstruction = utility::conversions::to_string_t("");
    m_MaturityInstructionIsSet = false;
    m_CsaStatus = utility::conversions::to_string_t("");
    m_CsaStatusIsSet = false;
    m_Requester = utility::conversions::to_string_t("");
    m_RequesterIsSet = false;
    m_ClientDetails = utility::conversions::to_string_t("");
    m_ClientDetailsIsSet = false;
    m_Text = utility::conversions::to_string_t("");
    m_TextIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
}

CollateralSupportAgreement::~CollateralSupportAgreement()
{
}

void CollateralSupportAgreement::validate()
{
    // TODO: implement validation
}

web::json::value CollateralSupportAgreement::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("csaID")] = ModelBase::toJson(m_CsaID);
    if(m_AccountIsSet)
    {
        val[utility::conversions::to_string_t("account")] = ModelBase::toJson(m_Account);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    }
    if(m_AmountIsSet)
    {
        val[utility::conversions::to_string_t("amount")] = ModelBase::toJson(m_Amount);
    }
    if(m_MinAmountIsSet)
    {
        val[utility::conversions::to_string_t("minAmount")] = ModelBase::toJson(m_MinAmount);
    }
    if(m_ThresholdIsSet)
    {
        val[utility::conversions::to_string_t("threshold")] = ModelBase::toJson(m_Threshold);
    }
    if(m_MmRatioMarginCallIsSet)
    {
        val[utility::conversions::to_string_t("mmRatioMarginCall")] = ModelBase::toJson(m_MmRatioMarginCall);
    }
    if(m_MmRatioLiquidationIsSet)
    {
        val[utility::conversions::to_string_t("mmRatioLiquidation")] = ModelBase::toJson(m_MmRatioLiquidation);
    }
    if(m_StartTimeIsSet)
    {
        val[utility::conversions::to_string_t("startTime")] = ModelBase::toJson(m_StartTime);
    }
    if(m_MaturityTimeIsSet)
    {
        val[utility::conversions::to_string_t("maturityTime")] = ModelBase::toJson(m_MaturityTime);
    }
    if(m_MaturityInstructionIsSet)
    {
        val[utility::conversions::to_string_t("maturityInstruction")] = ModelBase::toJson(m_MaturityInstruction);
    }
    if(m_CsaStatusIsSet)
    {
        val[utility::conversions::to_string_t("csaStatus")] = ModelBase::toJson(m_CsaStatus);
    }
    if(m_RequesterIsSet)
    {
        val[utility::conversions::to_string_t("requester")] = ModelBase::toJson(m_Requester);
    }
    if(m_ClientDetailsIsSet)
    {
        val[utility::conversions::to_string_t("clientDetails")] = ModelBase::toJson(m_ClientDetails);
    }
    if(m_TextIsSet)
    {
        val[utility::conversions::to_string_t("text")] = ModelBase::toJson(m_Text);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

void CollateralSupportAgreement::fromJson(web::json::value& val)
{
    setCsaID(ModelBase::stringFromJson(val[utility::conversions::to_string_t("csaID")]));
    if(val.has_field(utility::conversions::to_string_t("account")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("account")];
        if(!fieldValue.is_null())
        {
            setAccount(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("currency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("currency")];
        if(!fieldValue.is_null())
        {
            setCurrency(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("amount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("amount")];
        if(!fieldValue.is_null())
        {
            setAmount(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("minAmount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("minAmount")];
        if(!fieldValue.is_null())
        {
            setMinAmount(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("threshold")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("threshold")];
        if(!fieldValue.is_null())
        {
            setThreshold(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mmRatioMarginCall")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("mmRatioMarginCall")];
        if(!fieldValue.is_null())
        {
            setMmRatioMarginCall(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mmRatioLiquidation")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("mmRatioLiquidation")];
        if(!fieldValue.is_null())
        {
            setMmRatioLiquidation(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("startTime")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("startTime")];
        if(!fieldValue.is_null())
        {
            setStartTime(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maturityTime")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("maturityTime")];
        if(!fieldValue.is_null())
        {
            setMaturityTime(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maturityInstruction")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("maturityInstruction")];
        if(!fieldValue.is_null())
        {
            setMaturityInstruction(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("csaStatus")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("csaStatus")];
        if(!fieldValue.is_null())
        {
            setCsaStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("requester")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("requester")];
        if(!fieldValue.is_null())
        {
            setRequester(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("clientDetails")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("clientDetails")];
        if(!fieldValue.is_null())
        {
            setClientDetails(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("text")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("text")];
        if(!fieldValue.is_null())
        {
            setText(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("timestamp")];
        if(!fieldValue.is_null())
        {
            setTimestamp(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void CollateralSupportAgreement::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("csaID"), m_CsaID));
    if(m_AccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("account"), m_Account));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency"), m_Currency));
        
    }
    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("amount"), m_Amount));
    }
    if(m_MinAmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("minAmount"), m_MinAmount));
    }
    if(m_ThresholdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("threshold"), m_Threshold));
    }
    if(m_MmRatioMarginCallIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mmRatioMarginCall"), m_MmRatioMarginCall));
    }
    if(m_MmRatioLiquidationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mmRatioLiquidation"), m_MmRatioLiquidation));
    }
    if(m_StartTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startTime"), m_StartTime));
        
    }
    if(m_MaturityTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maturityTime"), m_MaturityTime));
        
    }
    if(m_MaturityInstructionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maturityInstruction"), m_MaturityInstruction));
        
    }
    if(m_CsaStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("csaStatus"), m_CsaStatus));
        
    }
    if(m_RequesterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("requester"), m_Requester));
        
    }
    if(m_ClientDetailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("clientDetails"), m_ClientDetails));
        
    }
    if(m_TextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("text"), m_Text));
        
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
        
    }
}

void CollateralSupportAgreement::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setCsaID(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("csaID"))));
    if(multipart->hasContent(utility::conversions::to_string_t("account")))
    {
        setAccount(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("account"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currency")))
    {
        setCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("amount")))
    {
        setAmount(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("amount"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("minAmount")))
    {
        setMinAmount(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("minAmount"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("threshold")))
    {
        setThreshold(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("threshold"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mmRatioMarginCall")))
    {
        setMmRatioMarginCall(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("mmRatioMarginCall"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mmRatioLiquidation")))
    {
        setMmRatioLiquidation(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("mmRatioLiquidation"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startTime")))
    {
        setStartTime(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("startTime"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maturityTime")))
    {
        setMaturityTime(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("maturityTime"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maturityInstruction")))
    {
        setMaturityInstruction(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("maturityInstruction"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("csaStatus")))
    {
        setCsaStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("csaStatus"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("requester")))
    {
        setRequester(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("requester"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("clientDetails")))
    {
        setClientDetails(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("clientDetails"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("text")))
    {
        setText(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("text"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp"))));
    }
}

utility::string_t CollateralSupportAgreement::getCsaID() const
{
    return m_CsaID;
}


void CollateralSupportAgreement::setCsaID(utility::string_t value)
{
    m_CsaID = value;
    
}
double CollateralSupportAgreement::getAccount() const
{
    return m_Account;
}


void CollateralSupportAgreement::setAccount(double value)
{
    m_Account = value;
    m_AccountIsSet = true;
}
bool CollateralSupportAgreement::accountIsSet() const
{
    return m_AccountIsSet;
}

void CollateralSupportAgreement::unsetAccount()
{
    m_AccountIsSet = false;
}

utility::string_t CollateralSupportAgreement::getCurrency() const
{
    return m_Currency;
}


void CollateralSupportAgreement::setCurrency(utility::string_t value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool CollateralSupportAgreement::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void CollateralSupportAgreement::unsetCurrency()
{
    m_CurrencyIsSet = false;
}

double CollateralSupportAgreement::getAmount() const
{
    return m_Amount;
}


void CollateralSupportAgreement::setAmount(double value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}
bool CollateralSupportAgreement::amountIsSet() const
{
    return m_AmountIsSet;
}

void CollateralSupportAgreement::unsetAmount()
{
    m_AmountIsSet = false;
}

double CollateralSupportAgreement::getMinAmount() const
{
    return m_MinAmount;
}


void CollateralSupportAgreement::setMinAmount(double value)
{
    m_MinAmount = value;
    m_MinAmountIsSet = true;
}
bool CollateralSupportAgreement::minAmountIsSet() const
{
    return m_MinAmountIsSet;
}

void CollateralSupportAgreement::unsetMinAmount()
{
    m_MinAmountIsSet = false;
}

double CollateralSupportAgreement::getThreshold() const
{
    return m_Threshold;
}


void CollateralSupportAgreement::setThreshold(double value)
{
    m_Threshold = value;
    m_ThresholdIsSet = true;
}
bool CollateralSupportAgreement::thresholdIsSet() const
{
    return m_ThresholdIsSet;
}

void CollateralSupportAgreement::unsetThreshold()
{
    m_ThresholdIsSet = false;
}

double CollateralSupportAgreement::getMmRatioMarginCall() const
{
    return m_MmRatioMarginCall;
}


void CollateralSupportAgreement::setMmRatioMarginCall(double value)
{
    m_MmRatioMarginCall = value;
    m_MmRatioMarginCallIsSet = true;
}
bool CollateralSupportAgreement::mmRatioMarginCallIsSet() const
{
    return m_MmRatioMarginCallIsSet;
}

void CollateralSupportAgreement::unsetMmRatioMarginCall()
{
    m_MmRatioMarginCallIsSet = false;
}

double CollateralSupportAgreement::getMmRatioLiquidation() const
{
    return m_MmRatioLiquidation;
}


void CollateralSupportAgreement::setMmRatioLiquidation(double value)
{
    m_MmRatioLiquidation = value;
    m_MmRatioLiquidationIsSet = true;
}
bool CollateralSupportAgreement::mmRatioLiquidationIsSet() const
{
    return m_MmRatioLiquidationIsSet;
}

void CollateralSupportAgreement::unsetMmRatioLiquidation()
{
    m_MmRatioLiquidationIsSet = false;
}

utility::string_t CollateralSupportAgreement::getStartTime() const
{
    return m_StartTime;
}


void CollateralSupportAgreement::setStartTime(utility::string_t value)
{
    m_StartTime = value;
    m_StartTimeIsSet = true;
}
bool CollateralSupportAgreement::startTimeIsSet() const
{
    return m_StartTimeIsSet;
}

void CollateralSupportAgreement::unsetStartTime()
{
    m_StartTimeIsSet = false;
}

utility::string_t CollateralSupportAgreement::getMaturityTime() const
{
    return m_MaturityTime;
}


void CollateralSupportAgreement::setMaturityTime(utility::string_t value)
{
    m_MaturityTime = value;
    m_MaturityTimeIsSet = true;
}
bool CollateralSupportAgreement::maturityTimeIsSet() const
{
    return m_MaturityTimeIsSet;
}

void CollateralSupportAgreement::unsetMaturityTime()
{
    m_MaturityTimeIsSet = false;
}

utility::string_t CollateralSupportAgreement::getMaturityInstruction() const
{
    return m_MaturityInstruction;
}


void CollateralSupportAgreement::setMaturityInstruction(utility::string_t value)
{
    m_MaturityInstruction = value;
    m_MaturityInstructionIsSet = true;
}
bool CollateralSupportAgreement::maturityInstructionIsSet() const
{
    return m_MaturityInstructionIsSet;
}

void CollateralSupportAgreement::unsetMaturityInstruction()
{
    m_MaturityInstructionIsSet = false;
}

utility::string_t CollateralSupportAgreement::getCsaStatus() const
{
    return m_CsaStatus;
}


void CollateralSupportAgreement::setCsaStatus(utility::string_t value)
{
    m_CsaStatus = value;
    m_CsaStatusIsSet = true;
}
bool CollateralSupportAgreement::csaStatusIsSet() const
{
    return m_CsaStatusIsSet;
}

void CollateralSupportAgreement::unsetCsaStatus()
{
    m_CsaStatusIsSet = false;
}

utility::string_t CollateralSupportAgreement::getRequester() const
{
    return m_Requester;
}


void CollateralSupportAgreement::setRequester(utility::string_t value)
{
    m_Requester = value;
    m_RequesterIsSet = true;
}
bool CollateralSupportAgreement::requesterIsSet() const
{
    return m_RequesterIsSet;
}

void CollateralSupportAgreement::unsetRequester()
{
    m_RequesterIsSet = false;
}

utility::string_t CollateralSupportAgreement::getClientDetails() const
{
    return m_ClientDetails;
}


void CollateralSupportAgreement::setClientDetails(utility::string_t value)
{
    m_ClientDetails = value;
    m_ClientDetailsIsSet = true;
}
bool CollateralSupportAgreement::clientDetailsIsSet() const
{
    return m_ClientDetailsIsSet;
}

void CollateralSupportAgreement::unsetClientDetails()
{
    m_ClientDetailsIsSet = false;
}

utility::string_t CollateralSupportAgreement::getText() const
{
    return m_Text;
}


void CollateralSupportAgreement::setText(utility::string_t value)
{
    m_Text = value;
    m_TextIsSet = true;
}
bool CollateralSupportAgreement::textIsSet() const
{
    return m_TextIsSet;
}

void CollateralSupportAgreement::unsetText()
{
    m_TextIsSet = false;
}

utility::string_t CollateralSupportAgreement::getTimestamp() const
{
    return m_Timestamp;
}


void CollateralSupportAgreement::setTimestamp(utility::string_t value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool CollateralSupportAgreement::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void CollateralSupportAgreement::unsetTimestamp()
{
    m_TimestampIsSet = false;
}

}
}
}
}

