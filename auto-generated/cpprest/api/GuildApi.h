/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.38-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * GuildApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_GuildApi_H_
#define IO_SWAGGER_CLIENT_API_GuildApi_H_


#include "../ApiClient.h"

#include "Error.h"
#include "Guild.h"
#include "Object.h"
#include "X-any.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  GuildApi
{
public:
    GuildApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~GuildApi();
    /// <summary>
    /// Archive a guild
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<Object>> guild_archive(
    );
    /// <summary>
    /// Edit guild new guild
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
    /// <param name="emoji">Emoji name.</param>
    /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
    /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
    /// <param name="potTraderId">User ID of the guild member with order write permission for the pot (optional)</param>
    /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
    /// <param name="twitter">Guild twitter handle. (optional)</param>
    /// <param name="discord">Guild discord link. (optional)</param>
    /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
    /// <param name="isPrivate">Guild privacy status (optional)</param>
    pplx::task<std::shared_ptr<Guild>> guild_edit(
        utility::string_t name,
        utility::string_t emoji,
        double potDistributionPercent,
        utility::string_t potDistributionType,
        boost::optional<double> potTraderId,
        boost::optional<utility::string_t> description,
        boost::optional<utility::string_t> twitter,
        boost::optional<utility::string_t> discord,
        boost::optional<utility::string_t> imgUrl,
        boost::optional<bool> isPrivate
    );
    /// <summary>
    /// Get all guilds
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<X-any>>> guild_get(
    );
    /// <summary>
    /// Request to Join a private guild or join a public guild
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="code"></param>
    pplx::task<std::shared_ptr<Object>> guild_join(
        utility::string_t code
    );
    /// <summary>
    /// Kick member from guild
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="memberUserId"></param>
    pplx::task<std::shared_ptr<Object>> guild_kick(
        double memberUserId
    );
    /// <summary>
    /// Leave guild or cancel guild join request
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<Object>> guild_leave(
    );
    /// <summary>
    /// Creates a new guild
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">Name of the guild, must be unique, must be at least 5 characters</param>
    /// <param name="emoji">Emoji name.</param>
    /// <param name="potDistributionPercent">How much of the pot should be distributed to the guild members, must be between 0 and 100</param>
    /// <param name="potDistributionType">How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM</param>
    /// <param name="description">Guild description, can be used to explain the guild to other users. (optional)</param>
    /// <param name="twitter">Guild twitter handle. (optional)</param>
    /// <param name="discord">Guild discord link. (optional)</param>
    /// <param name="imgUrl">URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)</param>
    /// <param name="isPrivate">Guild privacy status (optional)</param>
    pplx::task<std::shared_ptr<Guild>> guild_new(
        utility::string_t name,
        utility::string_t emoji,
        double potDistributionPercent,
        utility::string_t potDistributionType,
        boost::optional<utility::string_t> description,
        boost::optional<utility::string_t> twitter,
        boost::optional<utility::string_t> discord,
        boost::optional<utility::string_t> imgUrl,
        boost::optional<bool> isPrivate
    );
    /// <summary>
    /// Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="shareTrades"></param>
    pplx::task<std::shared_ptr<Object>> guild_shareTrades(
        bool shareTrades
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_GuildApi_H_ */

