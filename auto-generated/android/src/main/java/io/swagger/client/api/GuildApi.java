/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.Error;
import io.swagger.client.model.Guild;
import io.swagger.client.model.XAny;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class GuildApi {
  String basePath = "https://www.bitmex.com/api/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Archive a guild
  * 
   * @return Object
  */
  public Object guildArchive () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/guild/archive";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Archive a guild
   * 

  */
  public void guildArchive (final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/guild/archive".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit guild new guild
  * 
   * @param name Name of the guild, must be unique, must be at least 5 characters
   * @param emoji Emoji name.
   * @param potDistributionPercent How much of the pot should be distributed to the guild members, must be between 0 and 100
   * @param potDistributionType How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM
   * @param potTraderId User ID of the guild member with order write permission for the pot
   * @param description Guild description, can be used to explain the guild to other users.
   * @param twitter Guild twitter handle.
   * @param discord Guild discord link.
   * @param imgUrl URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used
   * @param isPrivate Guild privacy status
   * @return Guild
  */
  public Guild guildEdit (String name, String emoji, Double potDistributionPercent, String potDistributionType, Double potTraderId, String description, String twitter, String discord, String imgUrl, Boolean isPrivate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling guildEdit",
        new ApiException(400, "Missing the required parameter 'name' when calling guildEdit"));
    }
    // verify the required parameter 'emoji' is set
    if (emoji == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'emoji' when calling guildEdit",
        new ApiException(400, "Missing the required parameter 'emoji' when calling guildEdit"));
    }
    // verify the required parameter 'potDistributionPercent' is set
    if (potDistributionPercent == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'potDistributionPercent' when calling guildEdit",
        new ApiException(400, "Missing the required parameter 'potDistributionPercent' when calling guildEdit"));
    }
    // verify the required parameter 'potDistributionType' is set
    if (potDistributionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'potDistributionType' when calling guildEdit",
        new ApiException(400, "Missing the required parameter 'potDistributionType' when calling guildEdit"));
    }

    // create path and map variables
    String path = "/guild";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (name != null) {
        localVarBuilder.addTextBody("name", ApiInvoker.parameterToString(name), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (emoji != null) {
        localVarBuilder.addTextBody("emoji", ApiInvoker.parameterToString(emoji), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (potDistributionPercent != null) {
        localVarBuilder.addTextBody("potDistributionPercent", ApiInvoker.parameterToString(potDistributionPercent), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (potDistributionType != null) {
        localVarBuilder.addTextBody("potDistributionType", ApiInvoker.parameterToString(potDistributionType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (potTraderId != null) {
        localVarBuilder.addTextBody("potTraderId", ApiInvoker.parameterToString(potTraderId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (description != null) {
        localVarBuilder.addTextBody("description", ApiInvoker.parameterToString(description), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (twitter != null) {
        localVarBuilder.addTextBody("twitter", ApiInvoker.parameterToString(twitter), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (discord != null) {
        localVarBuilder.addTextBody("discord", ApiInvoker.parameterToString(discord), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (imgUrl != null) {
        localVarBuilder.addTextBody("imgUrl", ApiInvoker.parameterToString(imgUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (isPrivate != null) {
        localVarBuilder.addTextBody("isPrivate", ApiInvoker.parameterToString(isPrivate), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("name", ApiInvoker.parameterToString(name));
      formParams.put("emoji", ApiInvoker.parameterToString(emoji));
      formParams.put("potDistributionPercent", ApiInvoker.parameterToString(potDistributionPercent));
      formParams.put("potDistributionType", ApiInvoker.parameterToString(potDistributionType));
      formParams.put("potTraderId", ApiInvoker.parameterToString(potTraderId));
      formParams.put("description", ApiInvoker.parameterToString(description));
      formParams.put("twitter", ApiInvoker.parameterToString(twitter));
      formParams.put("discord", ApiInvoker.parameterToString(discord));
      formParams.put("imgUrl", ApiInvoker.parameterToString(imgUrl));
      formParams.put("isPrivate", ApiInvoker.parameterToString(isPrivate));
    }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Guild) ApiInvoker.deserialize(localVarResponse, "", Guild.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit guild new guild
   * 
   * @param name Name of the guild, must be unique, must be at least 5 characters   * @param emoji Emoji name.   * @param potDistributionPercent How much of the pot should be distributed to the guild members, must be between 0 and 100   * @param potDistributionType How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM   * @param potTraderId User ID of the guild member with order write permission for the pot   * @param description Guild description, can be used to explain the guild to other users.   * @param twitter Guild twitter handle.   * @param discord Guild discord link.   * @param imgUrl URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used   * @param isPrivate Guild privacy status
  */
  public void guildEdit (String name, String emoji, Double potDistributionPercent, String potDistributionType, Double potTraderId, String description, String twitter, String discord, String imgUrl, Boolean isPrivate, final Response.Listener<Guild> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling guildEdit",
        new ApiException(400, "Missing the required parameter 'name' when calling guildEdit"));
    }
    // verify the required parameter 'emoji' is set
    if (emoji == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'emoji' when calling guildEdit",
        new ApiException(400, "Missing the required parameter 'emoji' when calling guildEdit"));
    }
    // verify the required parameter 'potDistributionPercent' is set
    if (potDistributionPercent == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'potDistributionPercent' when calling guildEdit",
        new ApiException(400, "Missing the required parameter 'potDistributionPercent' when calling guildEdit"));
    }
    // verify the required parameter 'potDistributionType' is set
    if (potDistributionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'potDistributionType' when calling guildEdit",
        new ApiException(400, "Missing the required parameter 'potDistributionType' when calling guildEdit"));
    }

    // create path and map variables
    String path = "/guild".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (name != null) {
        localVarBuilder.addTextBody("name", ApiInvoker.parameterToString(name), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (emoji != null) {
        localVarBuilder.addTextBody("emoji", ApiInvoker.parameterToString(emoji), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (potDistributionPercent != null) {
        localVarBuilder.addTextBody("potDistributionPercent", ApiInvoker.parameterToString(potDistributionPercent), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (potDistributionType != null) {
        localVarBuilder.addTextBody("potDistributionType", ApiInvoker.parameterToString(potDistributionType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (potTraderId != null) {
        localVarBuilder.addTextBody("potTraderId", ApiInvoker.parameterToString(potTraderId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (description != null) {
        localVarBuilder.addTextBody("description", ApiInvoker.parameterToString(description), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (twitter != null) {
        localVarBuilder.addTextBody("twitter", ApiInvoker.parameterToString(twitter), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (discord != null) {
        localVarBuilder.addTextBody("discord", ApiInvoker.parameterToString(discord), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (imgUrl != null) {
        localVarBuilder.addTextBody("imgUrl", ApiInvoker.parameterToString(imgUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (isPrivate != null) {
        localVarBuilder.addTextBody("isPrivate", ApiInvoker.parameterToString(isPrivate), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("name", ApiInvoker.parameterToString(name));
formParams.put("emoji", ApiInvoker.parameterToString(emoji));
formParams.put("potDistributionPercent", ApiInvoker.parameterToString(potDistributionPercent));
formParams.put("potDistributionType", ApiInvoker.parameterToString(potDistributionType));
formParams.put("potTraderId", ApiInvoker.parameterToString(potTraderId));
formParams.put("description", ApiInvoker.parameterToString(description));
formParams.put("twitter", ApiInvoker.parameterToString(twitter));
formParams.put("discord", ApiInvoker.parameterToString(discord));
formParams.put("imgUrl", ApiInvoker.parameterToString(imgUrl));
formParams.put("isPrivate", ApiInvoker.parameterToString(isPrivate));
    }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Guild) ApiInvoker.deserialize(localVarResponse,  "", Guild.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all guilds
  * 
   * @return List<XAny>
  */
  public List<XAny> guildGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/guild";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<XAny>) ApiInvoker.deserialize(localVarResponse, "array", XAny.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all guilds
   * 

  */
  public void guildGet (final Response.Listener<List<XAny>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/guild".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<XAny>) ApiInvoker.deserialize(localVarResponse,  "array", XAny.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Request to Join a private guild or join a public guild
  * 
   * @param code 
   * @return Object
  */
  public Object guildJoin (String code) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'code' is set
    if (code == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'code' when calling guildJoin",
        new ApiException(400, "Missing the required parameter 'code' when calling guildJoin"));
    }

    // create path and map variables
    String path = "/guild/join";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (code != null) {
        localVarBuilder.addTextBody("code", ApiInvoker.parameterToString(code), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("code", ApiInvoker.parameterToString(code));
    }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Request to Join a private guild or join a public guild
   * 
   * @param code 
  */
  public void guildJoin (String code, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'code' is set
    if (code == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'code' when calling guildJoin",
        new ApiException(400, "Missing the required parameter 'code' when calling guildJoin"));
    }

    // create path and map variables
    String path = "/guild/join".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (code != null) {
        localVarBuilder.addTextBody("code", ApiInvoker.parameterToString(code), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("code", ApiInvoker.parameterToString(code));
    }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Kick member from guild
  * 
   * @param memberUserId 
   * @return Object
  */
  public Object guildKick (Double memberUserId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'memberUserId' is set
    if (memberUserId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'memberUserId' when calling guildKick",
        new ApiException(400, "Missing the required parameter 'memberUserId' when calling guildKick"));
    }

    // create path and map variables
    String path = "/guild/kick";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (memberUserId != null) {
        localVarBuilder.addTextBody("memberUserId", ApiInvoker.parameterToString(memberUserId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("memberUserId", ApiInvoker.parameterToString(memberUserId));
    }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Kick member from guild
   * 
   * @param memberUserId 
  */
  public void guildKick (Double memberUserId, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'memberUserId' is set
    if (memberUserId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'memberUserId' when calling guildKick",
        new ApiException(400, "Missing the required parameter 'memberUserId' when calling guildKick"));
    }

    // create path and map variables
    String path = "/guild/kick".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (memberUserId != null) {
        localVarBuilder.addTextBody("memberUserId", ApiInvoker.parameterToString(memberUserId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("memberUserId", ApiInvoker.parameterToString(memberUserId));
    }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Leave guild or cancel guild join request
  * 
   * @return Object
  */
  public Object guildLeave () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/guild/leave";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Leave guild or cancel guild join request
   * 

  */
  public void guildLeave (final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/guild/leave".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a new guild
  * 
   * @param name Name of the guild, must be unique, must be at least 5 characters
   * @param emoji Emoji name.
   * @param potDistributionPercent How much of the pot should be distributed to the guild members, must be between 0 and 100
   * @param potDistributionType How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM
   * @param description Guild description, can be used to explain the guild to other users.
   * @param twitter Guild twitter handle.
   * @param discord Guild discord link.
   * @param imgUrl URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used
   * @param isPrivate Guild privacy status
   * @return Guild
  */
  public Guild guildNew (String name, String emoji, Double potDistributionPercent, String potDistributionType, String description, String twitter, String discord, String imgUrl, Boolean isPrivate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling guildNew",
        new ApiException(400, "Missing the required parameter 'name' when calling guildNew"));
    }
    // verify the required parameter 'emoji' is set
    if (emoji == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'emoji' when calling guildNew",
        new ApiException(400, "Missing the required parameter 'emoji' when calling guildNew"));
    }
    // verify the required parameter 'potDistributionPercent' is set
    if (potDistributionPercent == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'potDistributionPercent' when calling guildNew",
        new ApiException(400, "Missing the required parameter 'potDistributionPercent' when calling guildNew"));
    }
    // verify the required parameter 'potDistributionType' is set
    if (potDistributionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'potDistributionType' when calling guildNew",
        new ApiException(400, "Missing the required parameter 'potDistributionType' when calling guildNew"));
    }

    // create path and map variables
    String path = "/guild";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (name != null) {
        localVarBuilder.addTextBody("name", ApiInvoker.parameterToString(name), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (emoji != null) {
        localVarBuilder.addTextBody("emoji", ApiInvoker.parameterToString(emoji), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (potDistributionPercent != null) {
        localVarBuilder.addTextBody("potDistributionPercent", ApiInvoker.parameterToString(potDistributionPercent), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (potDistributionType != null) {
        localVarBuilder.addTextBody("potDistributionType", ApiInvoker.parameterToString(potDistributionType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (description != null) {
        localVarBuilder.addTextBody("description", ApiInvoker.parameterToString(description), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (twitter != null) {
        localVarBuilder.addTextBody("twitter", ApiInvoker.parameterToString(twitter), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (discord != null) {
        localVarBuilder.addTextBody("discord", ApiInvoker.parameterToString(discord), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (imgUrl != null) {
        localVarBuilder.addTextBody("imgUrl", ApiInvoker.parameterToString(imgUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (isPrivate != null) {
        localVarBuilder.addTextBody("isPrivate", ApiInvoker.parameterToString(isPrivate), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("name", ApiInvoker.parameterToString(name));
      formParams.put("emoji", ApiInvoker.parameterToString(emoji));
      formParams.put("potDistributionPercent", ApiInvoker.parameterToString(potDistributionPercent));
      formParams.put("potDistributionType", ApiInvoker.parameterToString(potDistributionType));
      formParams.put("description", ApiInvoker.parameterToString(description));
      formParams.put("twitter", ApiInvoker.parameterToString(twitter));
      formParams.put("discord", ApiInvoker.parameterToString(discord));
      formParams.put("imgUrl", ApiInvoker.parameterToString(imgUrl));
      formParams.put("isPrivate", ApiInvoker.parameterToString(isPrivate));
    }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Guild) ApiInvoker.deserialize(localVarResponse, "", Guild.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a new guild
   * 
   * @param name Name of the guild, must be unique, must be at least 5 characters   * @param emoji Emoji name.   * @param potDistributionPercent How much of the pot should be distributed to the guild members, must be between 0 and 100   * @param potDistributionType How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM   * @param description Guild description, can be used to explain the guild to other users.   * @param twitter Guild twitter handle.   * @param discord Guild discord link.   * @param imgUrl URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used   * @param isPrivate Guild privacy status
  */
  public void guildNew (String name, String emoji, Double potDistributionPercent, String potDistributionType, String description, String twitter, String discord, String imgUrl, Boolean isPrivate, final Response.Listener<Guild> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling guildNew",
        new ApiException(400, "Missing the required parameter 'name' when calling guildNew"));
    }
    // verify the required parameter 'emoji' is set
    if (emoji == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'emoji' when calling guildNew",
        new ApiException(400, "Missing the required parameter 'emoji' when calling guildNew"));
    }
    // verify the required parameter 'potDistributionPercent' is set
    if (potDistributionPercent == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'potDistributionPercent' when calling guildNew",
        new ApiException(400, "Missing the required parameter 'potDistributionPercent' when calling guildNew"));
    }
    // verify the required parameter 'potDistributionType' is set
    if (potDistributionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'potDistributionType' when calling guildNew",
        new ApiException(400, "Missing the required parameter 'potDistributionType' when calling guildNew"));
    }

    // create path and map variables
    String path = "/guild".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (name != null) {
        localVarBuilder.addTextBody("name", ApiInvoker.parameterToString(name), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (emoji != null) {
        localVarBuilder.addTextBody("emoji", ApiInvoker.parameterToString(emoji), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (potDistributionPercent != null) {
        localVarBuilder.addTextBody("potDistributionPercent", ApiInvoker.parameterToString(potDistributionPercent), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (potDistributionType != null) {
        localVarBuilder.addTextBody("potDistributionType", ApiInvoker.parameterToString(potDistributionType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (description != null) {
        localVarBuilder.addTextBody("description", ApiInvoker.parameterToString(description), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (twitter != null) {
        localVarBuilder.addTextBody("twitter", ApiInvoker.parameterToString(twitter), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (discord != null) {
        localVarBuilder.addTextBody("discord", ApiInvoker.parameterToString(discord), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (imgUrl != null) {
        localVarBuilder.addTextBody("imgUrl", ApiInvoker.parameterToString(imgUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (isPrivate != null) {
        localVarBuilder.addTextBody("isPrivate", ApiInvoker.parameterToString(isPrivate), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("name", ApiInvoker.parameterToString(name));
formParams.put("emoji", ApiInvoker.parameterToString(emoji));
formParams.put("potDistributionPercent", ApiInvoker.parameterToString(potDistributionPercent));
formParams.put("potDistributionType", ApiInvoker.parameterToString(potDistributionType));
formParams.put("description", ApiInvoker.parameterToString(description));
formParams.put("twitter", ApiInvoker.parameterToString(twitter));
formParams.put("discord", ApiInvoker.parameterToString(discord));
formParams.put("imgUrl", ApiInvoker.parameterToString(imgUrl));
formParams.put("isPrivate", ApiInvoker.parameterToString(isPrivate));
    }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Guild) ApiInvoker.deserialize(localVarResponse,  "", Guild.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI
  * 
   * @param shareTrades 
   * @return Object
  */
  public Object guildShareTrades (Boolean shareTrades) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'shareTrades' is set
    if (shareTrades == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shareTrades' when calling guildShareTrades",
        new ApiException(400, "Missing the required parameter 'shareTrades' when calling guildShareTrades"));
    }

    // create path and map variables
    String path = "/guild/shareTrades";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (shareTrades != null) {
        localVarBuilder.addTextBody("shareTrades", ApiInvoker.parameterToString(shareTrades), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("shareTrades", ApiInvoker.parameterToString(shareTrades));
    }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI
   * 
   * @param shareTrades 
  */
  public void guildShareTrades (Boolean shareTrades, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'shareTrades' is set
    if (shareTrades == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shareTrades' when calling guildShareTrades",
        new ApiException(400, "Missing the required parameter 'shareTrades' when calling guildShareTrades"));
    }

    // create path and map variables
    String path = "/guild/shareTrades".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (shareTrades != null) {
        localVarBuilder.addTextBody("shareTrades", ApiInvoker.parameterToString(shareTrades), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("shareTrades", ApiInvoker.parameterToString(shareTrades));
    }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
