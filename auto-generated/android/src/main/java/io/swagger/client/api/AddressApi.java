/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.Address;
import io.swagger.client.model.Error;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AddressApi {
  String basePath = "https://www.bitmex.com/api/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get your addresses.
  * 
   * @return List<Address>
  */
  public List<Address> addressGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/address";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Address>) ApiInvoker.deserialize(localVarResponse, "array", Address.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get your addresses.
   * 

  */
  public void addressGet (final Response.Listener<List<Address>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/address".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Address>) ApiInvoker.deserialize(localVarResponse,  "array", Address.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a new saved address.
  * 
   * @param currency Currency of the address. Options: &#x60;XBt&#x60;, &#x60;USDt&#x60;
   * @param network Selected network.
   * @param address Destination Address.
   * @param name Name of the entry, eg. &#39;Hardware wallet&#39;.
   * @param note Optional annotation.
   * @param skipConfirm Skip e-mail confirmations for transfers to this address. Will require an email confirmation after creation.
   * @param skip2FA Skip 2FA confirmations for transfers to this address. Will require an email confirmation after creation.
   * @return Address
  */
  public Address addressNew (String currency, String network, String address, String name, String note, Boolean skipConfirm, Boolean skip2FA) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'currency' is set
    if (currency == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currency' when calling addressNew",
        new ApiException(400, "Missing the required parameter 'currency' when calling addressNew"));
    }
    // verify the required parameter 'network' is set
    if (network == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'network' when calling addressNew",
        new ApiException(400, "Missing the required parameter 'network' when calling addressNew"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling addressNew",
        new ApiException(400, "Missing the required parameter 'address' when calling addressNew"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling addressNew",
        new ApiException(400, "Missing the required parameter 'name' when calling addressNew"));
    }

    // create path and map variables
    String path = "/address";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (currency != null) {
        localVarBuilder.addTextBody("currency", ApiInvoker.parameterToString(currency), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (network != null) {
        localVarBuilder.addTextBody("network", ApiInvoker.parameterToString(network), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (address != null) {
        localVarBuilder.addTextBody("address", ApiInvoker.parameterToString(address), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (name != null) {
        localVarBuilder.addTextBody("name", ApiInvoker.parameterToString(name), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (note != null) {
        localVarBuilder.addTextBody("note", ApiInvoker.parameterToString(note), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (skipConfirm != null) {
        localVarBuilder.addTextBody("skipConfirm", ApiInvoker.parameterToString(skipConfirm), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (skip2FA != null) {
        localVarBuilder.addTextBody("skip2FA", ApiInvoker.parameterToString(skip2FA), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("currency", ApiInvoker.parameterToString(currency));
      formParams.put("network", ApiInvoker.parameterToString(network));
      formParams.put("address", ApiInvoker.parameterToString(address));
      formParams.put("name", ApiInvoker.parameterToString(name));
      formParams.put("note", ApiInvoker.parameterToString(note));
      formParams.put("skipConfirm", ApiInvoker.parameterToString(skipConfirm));
      formParams.put("skip2FA", ApiInvoker.parameterToString(skip2FA));
    }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Address) ApiInvoker.deserialize(localVarResponse, "", Address.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a new saved address.
   * 
   * @param currency Currency of the address. Options: &#x60;XBt&#x60;, &#x60;USDt&#x60;   * @param network Selected network.   * @param address Destination Address.   * @param name Name of the entry, eg. &#39;Hardware wallet&#39;.   * @param note Optional annotation.   * @param skipConfirm Skip e-mail confirmations for transfers to this address. Will require an email confirmation after creation.   * @param skip2FA Skip 2FA confirmations for transfers to this address. Will require an email confirmation after creation.
  */
  public void addressNew (String currency, String network, String address, String name, String note, Boolean skipConfirm, Boolean skip2FA, final Response.Listener<Address> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'currency' is set
    if (currency == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currency' when calling addressNew",
        new ApiException(400, "Missing the required parameter 'currency' when calling addressNew"));
    }
    // verify the required parameter 'network' is set
    if (network == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'network' when calling addressNew",
        new ApiException(400, "Missing the required parameter 'network' when calling addressNew"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling addressNew",
        new ApiException(400, "Missing the required parameter 'address' when calling addressNew"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling addressNew",
        new ApiException(400, "Missing the required parameter 'name' when calling addressNew"));
    }

    // create path and map variables
    String path = "/address".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (currency != null) {
        localVarBuilder.addTextBody("currency", ApiInvoker.parameterToString(currency), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (network != null) {
        localVarBuilder.addTextBody("network", ApiInvoker.parameterToString(network), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (address != null) {
        localVarBuilder.addTextBody("address", ApiInvoker.parameterToString(address), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (name != null) {
        localVarBuilder.addTextBody("name", ApiInvoker.parameterToString(name), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (note != null) {
        localVarBuilder.addTextBody("note", ApiInvoker.parameterToString(note), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (skipConfirm != null) {
        localVarBuilder.addTextBody("skipConfirm", ApiInvoker.parameterToString(skipConfirm), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (skip2FA != null) {
        localVarBuilder.addTextBody("skip2FA", ApiInvoker.parameterToString(skip2FA), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("currency", ApiInvoker.parameterToString(currency));
formParams.put("network", ApiInvoker.parameterToString(network));
formParams.put("address", ApiInvoker.parameterToString(address));
formParams.put("name", ApiInvoker.parameterToString(name));
formParams.put("note", ApiInvoker.parameterToString(note));
formParams.put("skipConfirm", ApiInvoker.parameterToString(skipConfirm));
formParams.put("skip2FA", ApiInvoker.parameterToString(skip2FA));
    }

    String[] authNames = new String[] { "apiExpires", "apiKey", "apiSignature" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Address) ApiInvoker.deserialize(localVarResponse,  "", Address.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
