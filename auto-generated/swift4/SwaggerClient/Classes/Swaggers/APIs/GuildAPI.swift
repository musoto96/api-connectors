//
// GuildAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class GuildAPI {
    /**
     Archive a guild
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func guildArchive(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        guildArchiveWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Archive a guild
     - POST /guild/archive
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "blank": false,
  "bytes": [
    123,
    125
  ],
  "empty": false
}}]

     - returns: RequestBuilder<Any> 
     */
    open class func guildArchiveWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/guild/archive"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Edit guild new guild
     
     - parameter name: (form) Name of the guild, must be unique, must be at least 5 characters 
     - parameter emoji: (form) Emoji name. 
     - parameter potDistributionPercent: (form) How much of the pot should be distributed to the guild members, must be between 0 and 100 
     - parameter potDistributionType: (form) How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM 
     - parameter potTraderId: (form) User ID of the guild member with order write permission for the pot (optional)
     - parameter _description: (form) Guild description, can be used to explain the guild to other users. (optional)
     - parameter twitter: (form) Guild twitter handle. (optional)
     - parameter discord: (form) Guild discord link. (optional)
     - parameter imgUrl: (form) URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)
     - parameter isPrivate: (form) Guild privacy status (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func guildEdit(name: String, emoji: String, potDistributionPercent: Double, potDistributionType: String, potTraderId: Double? = nil, _description: String? = nil, twitter: String? = nil, discord: String? = nil, imgUrl: String? = nil, isPrivate: Bool? = nil, completion: @escaping ((_ data: Guild?,_ error: Error?) -> Void)) {
        guildEditWithRequestBuilder(name: name, emoji: emoji, potDistributionPercent: potDistributionPercent, potDistributionType: potDistributionType, potTraderId: potTraderId, _description: _description, twitter: twitter, discord: discord, imgUrl: imgUrl, isPrivate: isPrivate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Edit guild new guild
     - PUT /guild
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter name: (form) Name of the guild, must be unique, must be at least 5 characters 
     - parameter emoji: (form) Emoji name. 
     - parameter potDistributionPercent: (form) How much of the pot should be distributed to the guild members, must be between 0 and 100 
     - parameter potDistributionType: (form) How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM 
     - parameter potTraderId: (form) User ID of the guild member with order write permission for the pot (optional)
     - parameter _description: (form) Guild description, can be used to explain the guild to other users. (optional)
     - parameter twitter: (form) Guild twitter handle. (optional)
     - parameter discord: (form) Guild discord link. (optional)
     - parameter imgUrl: (form) URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)
     - parameter isPrivate: (form) Guild privacy status (optional)

     - returns: RequestBuilder<Guild> 
     */
    open class func guildEditWithRequestBuilder(name: String, emoji: String, potDistributionPercent: Double, potDistributionType: String, potTraderId: Double? = nil, _description: String? = nil, twitter: String? = nil, discord: String? = nil, imgUrl: String? = nil, isPrivate: Bool? = nil) -> RequestBuilder<Guild> {
        let path = "/guild"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "name": name,
            "emoji": emoji,
            "potDistributionPercent": potDistributionPercent,
            "potDistributionType": potDistributionType,
            "potTraderId": potTraderId,
            "description": _description,
            "twitter": twitter,
            "discord": discord,
            "imgUrl": imgUrl,
            "isPrivate": isPrivate
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Guild>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all guilds
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func guildGet(completion: @escaping ((_ data: [XAny]?,_ error: Error?) -> Void)) {
        guildGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all guilds
     - GET /guild
     - examples: [{contentType=application/json, example={}}]

     - returns: RequestBuilder<[XAny]> 
     */
    open class func guildGetWithRequestBuilder() -> RequestBuilder<[XAny]> {
        let path = "/guild"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[XAny]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Request to Join a private guild or join a public guild
     
     - parameter code: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func guildJoin(code: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        guildJoinWithRequestBuilder(code: code).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Request to Join a private guild or join a public guild
     - POST /guild/join
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "blank": false,
  "bytes": [
    123,
    125
  ],
  "empty": false
}}]
     
     - parameter code: (form)  

     - returns: RequestBuilder<Any> 
     */
    open class func guildJoinWithRequestBuilder(code: String) -> RequestBuilder<Any> {
        let path = "/guild/join"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "code": code
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Kick member from guild
     
     - parameter memberUserId: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func guildKick(memberUserId: Double, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        guildKickWithRequestBuilder(memberUserId: memberUserId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Kick member from guild
     - POST /guild/kick
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "blank": false,
  "bytes": [
    123,
    125
  ],
  "empty": false
}}]
     
     - parameter memberUserId: (form)  

     - returns: RequestBuilder<Any> 
     */
    open class func guildKickWithRequestBuilder(memberUserId: Double) -> RequestBuilder<Any> {
        let path = "/guild/kick"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "memberUserId": memberUserId
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Leave guild or cancel guild join request
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func guildLeave(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        guildLeaveWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Leave guild or cancel guild join request
     - POST /guild/leave
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "blank": false,
  "bytes": [
    123,
    125
  ],
  "empty": false
}}]

     - returns: RequestBuilder<Any> 
     */
    open class func guildLeaveWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/guild/leave"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Creates a new guild
     
     - parameter name: (form) Name of the guild, must be unique, must be at least 5 characters 
     - parameter emoji: (form) Emoji name. 
     - parameter potDistributionPercent: (form) How much of the pot should be distributed to the guild members, must be between 0 and 100 
     - parameter potDistributionType: (form) How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM 
     - parameter _description: (form) Guild description, can be used to explain the guild to other users. (optional)
     - parameter twitter: (form) Guild twitter handle. (optional)
     - parameter discord: (form) Guild discord link. (optional)
     - parameter imgUrl: (form) URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)
     - parameter isPrivate: (form) Guild privacy status (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func guildNew(name: String, emoji: String, potDistributionPercent: Double, potDistributionType: String, _description: String? = nil, twitter: String? = nil, discord: String? = nil, imgUrl: String? = nil, isPrivate: Bool? = nil, completion: @escaping ((_ data: Guild?,_ error: Error?) -> Void)) {
        guildNewWithRequestBuilder(name: name, emoji: emoji, potDistributionPercent: potDistributionPercent, potDistributionType: potDistributionType, _description: _description, twitter: twitter, discord: discord, imgUrl: imgUrl, isPrivate: isPrivate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a new guild
     - POST /guild
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter name: (form) Name of the guild, must be unique, must be at least 5 characters 
     - parameter emoji: (form) Emoji name. 
     - parameter potDistributionPercent: (form) How much of the pot should be distributed to the guild members, must be between 0 and 100 
     - parameter potDistributionType: (form) How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM 
     - parameter _description: (form) Guild description, can be used to explain the guild to other users. (optional)
     - parameter twitter: (form) Guild twitter handle. (optional)
     - parameter discord: (form) Guild discord link. (optional)
     - parameter imgUrl: (form) URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used (optional)
     - parameter isPrivate: (form) Guild privacy status (optional)

     - returns: RequestBuilder<Guild> 
     */
    open class func guildNewWithRequestBuilder(name: String, emoji: String, potDistributionPercent: Double, potDistributionType: String, _description: String? = nil, twitter: String? = nil, discord: String? = nil, imgUrl: String? = nil, isPrivate: Bool? = nil) -> RequestBuilder<Guild> {
        let path = "/guild"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "name": name,
            "emoji": emoji,
            "potDistributionPercent": potDistributionPercent,
            "potDistributionType": potDistributionType,
            "description": _description,
            "twitter": twitter,
            "discord": discord,
            "imgUrl": imgUrl,
            "isPrivate": isPrivate
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Guild>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI
     
     - parameter shareTrades: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func guildShareTrades(shareTrades: Bool, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        guildShareTradesWithRequestBuilder(shareTrades: shareTrades).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI
     - POST /guild/shareTrades
     - API Key:
       - type: apiKey api-expires 
       - name: apiExpires
     - API Key:
       - type: apiKey api-key 
       - name: apiKey
     - API Key:
       - type: apiKey api-signature 
       - name: apiSignature
     - examples: [{contentType=application/json, example={
  "blank": false,
  "bytes": [
    123,
    125
  ],
  "empty": false
}}]
     
     - parameter shareTrades: (form)  

     - returns: RequestBuilder<Any> 
     */
    open class func guildShareTradesWithRequestBuilder(shareTrades: Bool) -> RequestBuilder<Any> {
        let path = "/guild/shareTrades"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "shareTrades": shareTrades
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
