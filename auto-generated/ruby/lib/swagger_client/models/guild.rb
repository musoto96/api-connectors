=begin
#BitMEX API

### REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 

OpenAPI spec version: 1.2.0
Contact: support@bitmex.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38-SNAPSHOT

=end

require 'date'

module SwaggerClient
  class Guild
    attr_accessor :id

    attr_accessor :created

    attr_accessor :updated

    attr_accessor :archived

    attr_accessor :name

    attr_accessor :img_url

    attr_accessor :mobile_hero_img_url

    attr_accessor :emoji

    attr_accessor :logo_url

    attr_accessor :description

    attr_accessor :chat_channel_id

    attr_accessor :is_private

    attr_accessor :affiliate_id

    attr_accessor :pot_distribution_preferences

    attr_accessor :socials

    attr_accessor :deleted

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created' => :'created',
        :'updated' => :'updated',
        :'archived' => :'archived',
        :'name' => :'name',
        :'img_url' => :'imgUrl',
        :'mobile_hero_img_url' => :'mobileHeroImgUrl',
        :'emoji' => :'emoji',
        :'logo_url' => :'logoUrl',
        :'description' => :'description',
        :'chat_channel_id' => :'chatChannelId',
        :'is_private' => :'isPrivate',
        :'affiliate_id' => :'affiliateId',
        :'pot_distribution_preferences' => :'potDistributionPreferences',
        :'socials' => :'socials',
        :'deleted' => :'deleted'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Float',
        :'created' => :'DateTime',
        :'updated' => :'DateTime',
        :'archived' => :'BOOLEAN',
        :'name' => :'String',
        :'img_url' => :'String',
        :'mobile_hero_img_url' => :'String',
        :'emoji' => :'String',
        :'logo_url' => :'String',
        :'description' => :'String',
        :'chat_channel_id' => :'Float',
        :'is_private' => :'BOOLEAN',
        :'affiliate_id' => :'String',
        :'pot_distribution_preferences' => :'Object',
        :'socials' => :'Object',
        :'deleted' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'archived')
        self.archived = attributes[:'archived']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'imgUrl')
        self.img_url = attributes[:'imgUrl']
      end

      if attributes.has_key?(:'mobileHeroImgUrl')
        self.mobile_hero_img_url = attributes[:'mobileHeroImgUrl']
      end

      if attributes.has_key?(:'emoji')
        self.emoji = attributes[:'emoji']
      end

      if attributes.has_key?(:'logoUrl')
        self.logo_url = attributes[:'logoUrl']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'chatChannelId')
        self.chat_channel_id = attributes[:'chatChannelId']
      end

      if attributes.has_key?(:'isPrivate')
        self.is_private = attributes[:'isPrivate']
      end

      if attributes.has_key?(:'affiliateId')
        self.affiliate_id = attributes[:'affiliateId']
      end

      if attributes.has_key?(:'potDistributionPreferences')
        self.pot_distribution_preferences = attributes[:'potDistributionPreferences']
      end

      if attributes.has_key?(:'socials')
        self.socials = attributes[:'socials']
      end

      if attributes.has_key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @created.nil?
        invalid_properties.push('invalid value for "created", created cannot be nil.')
      end

      if @updated.nil?
        invalid_properties.push('invalid value for "updated", updated cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @chat_channel_id.nil?
        invalid_properties.push('invalid value for "chat_channel_id", chat_channel_id cannot be nil.')
      end

      if @is_private.nil?
        invalid_properties.push('invalid value for "is_private", is_private cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @created.nil?
      return false if @updated.nil?
      return false if @name.nil?
      return false if @chat_channel_id.nil?
      return false if @is_private.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created == o.created &&
          updated == o.updated &&
          archived == o.archived &&
          name == o.name &&
          img_url == o.img_url &&
          mobile_hero_img_url == o.mobile_hero_img_url &&
          emoji == o.emoji &&
          logo_url == o.logo_url &&
          description == o.description &&
          chat_channel_id == o.chat_channel_id &&
          is_private == o.is_private &&
          affiliate_id == o.affiliate_id &&
          pot_distribution_preferences == o.pot_distribution_preferences &&
          socials == o.socials &&
          deleted == o.deleted
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, created, updated, archived, name, img_url, mobile_hero_img_url, emoji, logo_url, description, chat_channel_id, is_private, affiliate_id, pot_distribution_preferences, socials, deleted].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
