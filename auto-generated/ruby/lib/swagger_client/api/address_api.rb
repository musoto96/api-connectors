=begin
#BitMEX API

### REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 

OpenAPI spec version: 1.2.0
Contact: support@bitmex.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38-SNAPSHOT

=end

require 'uri'

module SwaggerClient
  class AddressApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get your addresses.
    # @param [Hash] opts the optional parameters
    # @return [Array<Address>]
    def address_get(opts = {})
      data, _status_code, _headers = address_get_with_http_info(opts)
      data
    end

    # Get your addresses.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Address>, Fixnum, Hash)>] Array<Address> data, response status code and response headers
    def address_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.address_get ...'
      end
      # resource path
      local_var_path = '/address'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiExpires', 'apiKey', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Address>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#address_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new saved address.
    # @param currency Currency of the address. Options: &#x60;XBt&#x60;, &#x60;USDt&#x60;
    # @param network Selected network.
    # @param address Destination Address.
    # @param name Name of the entry, eg. &#39;Hardware wallet&#39;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :note Optional annotation.
    # @option opts [BOOLEAN] :skip_confirm Skip e-mail confirmations for transfers to this address. Will require an email confirmation after creation. (default to false)
    # @option opts [BOOLEAN] :skip2_fa Skip 2FA confirmations for transfers to this address. Will require an email confirmation after creation. (default to false)
    # @return [Address]
    def address_new(currency, network, address, name, opts = {})
      data, _status_code, _headers = address_new_with_http_info(currency, network, address, name, opts)
      data
    end

    # Creates a new saved address.
    # @param currency Currency of the address. Options: &#x60;XBt&#x60;, &#x60;USDt&#x60;
    # @param network Selected network.
    # @param address Destination Address.
    # @param name Name of the entry, eg. &#39;Hardware wallet&#39;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :note Optional annotation.
    # @option opts [BOOLEAN] :skip_confirm Skip e-mail confirmations for transfers to this address. Will require an email confirmation after creation.
    # @option opts [BOOLEAN] :skip2_fa Skip 2FA confirmations for transfers to this address. Will require an email confirmation after creation.
    # @return [Array<(Address, Fixnum, Hash)>] Address data, response status code and response headers
    def address_new_with_http_info(currency, network, address, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.address_new ...'
      end
      # verify the required parameter 'currency' is set
      if @api_client.config.client_side_validation && currency.nil?
        fail ArgumentError, "Missing the required parameter 'currency' when calling AddressApi.address_new"
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling AddressApi.address_new"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling AddressApi.address_new"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AddressApi.address_new"
      end
      # resource path
      local_var_path = '/address'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['currency'] = currency
      form_params['network'] = network
      form_params['address'] = address
      form_params['name'] = name
      form_params['note'] = opts[:'note'] if !opts[:'note'].nil?
      form_params['skipConfirm'] = opts[:'skip_confirm'] if !opts[:'skip_confirm'].nil?
      form_params['skip2FA'] = opts[:'skip2_fa'] if !opts[:'skip2_fa'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['apiExpires', 'apiKey', 'apiSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Address')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#address_new\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
