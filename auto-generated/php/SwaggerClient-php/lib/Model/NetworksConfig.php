<?php
/**
 * NetworksConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section.
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.38-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NetworksConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworksConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NetworksConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'network' => 'string',
        'name' => 'string',
        'currency' => 'string',
        'network_symbol' => 'string',
        'transaction_explorer' => 'string',
        'token_explorer' => 'string',
        'deposit_confirmations' => 'float',
        'enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'network' => null,
        'name' => null,
        'currency' => null,
        'network_symbol' => null,
        'transaction_explorer' => null,
        'token_explorer' => null,
        'deposit_confirmations' => 'int32',
        'enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'network' => 'network',
        'name' => 'name',
        'currency' => 'currency',
        'network_symbol' => 'networkSymbol',
        'transaction_explorer' => 'transactionExplorer',
        'token_explorer' => 'tokenExplorer',
        'deposit_confirmations' => 'depositConfirmations',
        'enabled' => 'enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'network' => 'setNetwork',
        'name' => 'setName',
        'currency' => 'setCurrency',
        'network_symbol' => 'setNetworkSymbol',
        'transaction_explorer' => 'setTransactionExplorer',
        'token_explorer' => 'setTokenExplorer',
        'deposit_confirmations' => 'setDepositConfirmations',
        'enabled' => 'setEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'network' => 'getNetwork',
        'name' => 'getName',
        'currency' => 'getCurrency',
        'network_symbol' => 'getNetworkSymbol',
        'transaction_explorer' => 'getTransactionExplorer',
        'token_explorer' => 'getTokenExplorer',
        'deposit_confirmations' => 'getDepositConfirmations',
        'enabled' => 'getEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['network'] = isset($data['network']) ? $data['network'] : 'eth';
        $this->container['name'] = isset($data['name']) ? $data['name'] : 'Ethereum';
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : 'Gwei';
        $this->container['network_symbol'] = isset($data['network_symbol']) ? $data['network_symbol'] : 'ETH';
        $this->container['transaction_explorer'] = isset($data['transaction_explorer']) ? $data['transaction_explorer'] : 'https://etherscan.io/tx/';
        $this->container['token_explorer'] = isset($data['token_explorer']) ? $data['token_explorer'] : 'https://etherscan.io/token/';
        $this->container['deposit_confirmations'] = isset($data['deposit_confirmations']) ? $data['deposit_confirmations'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : true;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['network'] === null) {
            $invalidProperties[] = "'network' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets network
     *
     * @return string
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string $network network
     *
     * @return $this
     */
    public function setNetwork($network)
    {
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets network_symbol
     *
     * @return string
     */
    public function getNetworkSymbol()
    {
        return $this->container['network_symbol'];
    }

    /**
     * Sets network_symbol
     *
     * @param string $network_symbol network_symbol
     *
     * @return $this
     */
    public function setNetworkSymbol($network_symbol)
    {
        $this->container['network_symbol'] = $network_symbol;

        return $this;
    }

    /**
     * Gets transaction_explorer
     *
     * @return string
     */
    public function getTransactionExplorer()
    {
        return $this->container['transaction_explorer'];
    }

    /**
     * Sets transaction_explorer
     *
     * @param string $transaction_explorer transaction_explorer
     *
     * @return $this
     */
    public function setTransactionExplorer($transaction_explorer)
    {
        $this->container['transaction_explorer'] = $transaction_explorer;

        return $this;
    }

    /**
     * Gets token_explorer
     *
     * @return string
     */
    public function getTokenExplorer()
    {
        return $this->container['token_explorer'];
    }

    /**
     * Sets token_explorer
     *
     * @param string $token_explorer token_explorer
     *
     * @return $this
     */
    public function setTokenExplorer($token_explorer)
    {
        $this->container['token_explorer'] = $token_explorer;

        return $this;
    }

    /**
     * Gets deposit_confirmations
     *
     * @return float
     */
    public function getDepositConfirmations()
    {
        return $this->container['deposit_confirmations'];
    }

    /**
     * Sets deposit_confirmations
     *
     * @param float $deposit_confirmations deposit_confirmations
     *
     * @return $this
     */
    public function setDepositConfirmations($deposit_confirmations)
    {
        $this->container['deposit_confirmations'] = $deposit_confirmations;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


