# coding: utf-8

"""
    BitMEX API

    ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UserApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def user_cancel_withdrawal(self, token, **kwargs):  # noqa: E501
        """Cancel a withdrawal.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_cancel_withdrawal(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_cancel_withdrawal_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.user_cancel_withdrawal_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def user_cancel_withdrawal_with_http_info(self, token, **kwargs):  # noqa: E501
        """Cancel a withdrawal.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_cancel_withdrawal_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_cancel_withdrawal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in params or
                                                       params['token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `token` when calling `user_cancel_withdrawal`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/cancelWithdrawal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_check_referral_code(self, **kwargs):  # noqa: E501
        """Check if a referral code is valid.  # noqa: E501

        If the code is valid, responds with the referral code's discount (e.g. `0.1` for 10%). Otherwise, will return a 404 or 451 if invalid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_check_referral_code(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str referral_code:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_check_referral_code_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_check_referral_code_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_check_referral_code_with_http_info(self, **kwargs):  # noqa: E501
        """Check if a referral code is valid.  # noqa: E501

        If the code is valid, responds with the referral code's discount (e.g. `0.1` for 10%). Otherwise, will return a 404 or 451 if invalid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_check_referral_code_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str referral_code:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['referral_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_check_referral_code" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'referral_code' in params:
            query_params.append(('referralCode', params['referral_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/checkReferralCode', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_communication_token(self, token, platform_agent, **kwargs):  # noqa: E501
        """Register your communication token for mobile clients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_communication_token(token, platform_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param str platform_agent: (required)
        :return: list[CommunicationToken]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_communication_token_with_http_info(token, platform_agent, **kwargs)  # noqa: E501
        else:
            (data) = self.user_communication_token_with_http_info(token, platform_agent, **kwargs)  # noqa: E501
            return data

    def user_communication_token_with_http_info(self, token, platform_agent, **kwargs):  # noqa: E501
        """Register your communication token for mobile clients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_communication_token_with_http_info(token, platform_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param str platform_agent: (required)
        :return: list[CommunicationToken]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'platform_agent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_communication_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in params or
                                                       params['token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `token` when calling `user_communication_token`")  # noqa: E501
        # verify the required parameter 'platform_agent' is set
        if self.api_client.client_side_validation and ('platform_agent' not in params or
                                                       params['platform_agent'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `platform_agent` when calling `user_communication_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501
        if 'platform_agent' in params:
            form_params.append(('platformAgent', params['platform_agent']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/communicationToken', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CommunicationToken]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_confirm(self, token, **kwargs):  # noqa: E501
        """Confirm your email address with a token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_confirm(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :return: AccessToken
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_confirm_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.user_confirm_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def user_confirm_with_http_info(self, token, **kwargs):  # noqa: E501
        """Confirm your email address with a token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_confirm_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :return: AccessToken
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_confirm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in params or
                                                       params['token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `token` when calling `user_confirm`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/confirmEmail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessToken',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_confirm_withdrawal(self, token, **kwargs):  # noqa: E501
        """Confirm a withdrawal.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_confirm_withdrawal(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_confirm_withdrawal_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.user_confirm_withdrawal_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def user_confirm_withdrawal_with_http_info(self, token, **kwargs):  # noqa: E501
        """Confirm a withdrawal.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_confirm_withdrawal_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_confirm_withdrawal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in params or
                                                       params['token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `token` when calling `user_confirm_withdrawal`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/confirmWithdrawal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_create_sub_account(self, account_name, **kwargs):  # noqa: E501
        """Creates a new sub-account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_create_sub_account(account_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_create_sub_account_with_http_info(account_name, **kwargs)  # noqa: E501
        else:
            (data) = self.user_create_sub_account_with_http_info(account_name, **kwargs)  # noqa: E501
            return data

    def user_create_sub_account_with_http_info(self, account_name, **kwargs):  # noqa: E501
        """Creates a new sub-account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_create_sub_account_with_http_info(account_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_create_sub_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_name' is set
        if self.api_client.client_side_validation and ('account_name' not in params or
                                                       params['account_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_name` when calling `user_create_sub_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'account_name' in params:
            form_params.append(('accountName', params['account_name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/addSubaccount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_create_unstaking_requests(self, symbol, amount, **kwargs):  # noqa: E501
        """Create unstaking request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_create_unstaking_requests(symbol, amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: (required)
        :param float amount: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_create_unstaking_requests_with_http_info(symbol, amount, **kwargs)  # noqa: E501
        else:
            (data) = self.user_create_unstaking_requests_with_http_info(symbol, amount, **kwargs)  # noqa: E501
            return data

    def user_create_unstaking_requests_with_http_info(self, symbol, amount, **kwargs):  # noqa: E501
        """Create unstaking request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_create_unstaking_requests_with_http_info(symbol, amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: (required)
        :param float amount: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'amount']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_create_unstaking_requests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if self.api_client.client_side_validation and ('symbol' not in params or
                                                       params['symbol'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `symbol` when calling `user_create_unstaking_requests`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if self.api_client.client_side_validation and ('amount' not in params or
                                                       params['amount'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `amount` when calling `user_create_unstaking_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'symbol' in params:
            form_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'amount' in params:
            form_params.append(('amount', params['amount']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/unstakingRequests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_delete_unstaking_requests(self, redemption_id, **kwargs):  # noqa: E501
        """Cancel unstaking request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_delete_unstaking_requests(redemption_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str redemption_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_delete_unstaking_requests_with_http_info(redemption_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_delete_unstaking_requests_with_http_info(redemption_id, **kwargs)  # noqa: E501
            return data

    def user_delete_unstaking_requests_with_http_info(self, redemption_id, **kwargs):  # noqa: E501
        """Cancel unstaking request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_delete_unstaking_requests_with_http_info(redemption_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str redemption_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['redemption_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_delete_unstaking_requests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'redemption_id' is set
        if self.api_client.client_side_validation and ('redemption_id' not in params or
                                                       params['redemption_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `redemption_id` when calling `user_delete_unstaking_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'redemption_id' in params:
            form_params.append(('redemptionID', params['redemption_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/unstakingRequests', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get(self, **kwargs):  # noqa: E501
        """Get your user model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get your user model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_affiliate_status(self, **kwargs):  # noqa: E501
        """Get your current affiliate/referral status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_affiliate_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a>. For all currencies specify \"all\"
        :return: Affiliate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_affiliate_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_affiliate_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_affiliate_status_with_http_info(self, **kwargs):  # noqa: E501
        """Get your current affiliate/referral status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_affiliate_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a>. For all currencies specify \"all\"
        :return: Affiliate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['currency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_affiliate_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/affiliateStatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Affiliate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_commission(self, **kwargs):  # noqa: E501
        """Get your account's commission status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_commission(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: UserCommissionsBySymbol
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_commission_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_commission_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_commission_with_http_info(self, **kwargs):  # noqa: E501
        """Get your account's commission status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_commission_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: UserCommissionsBySymbol
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_commission" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/commission', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserCommissionsBySymbol',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_csa(self, **kwargs):  # noqa: E501
        """Get your account's CSA status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_csa(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CollateralSupportAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_csa_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_csa_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_csa_with_http_info(self, **kwargs):  # noqa: E501
        """Get your account's CSA status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_csa_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CollateralSupportAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_csa" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/csa', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollateralSupportAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_deposit_address(self, currency, network, **kwargs):  # noqa: E501
        """Get a deposit address.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_deposit_address(currency, network, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a> (required)
        :param str network: The `network` parameter is used to indicate which blockchain you would like to deposit from. The acceptable value in the `network` parameter for each currency can be found from `networks.asset` from `GET /wallet/assets`. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_deposit_address_with_http_info(currency, network, **kwargs)  # noqa: E501
        else:
            (data) = self.user_get_deposit_address_with_http_info(currency, network, **kwargs)  # noqa: E501
            return data

    def user_get_deposit_address_with_http_info(self, currency, network, **kwargs):  # noqa: E501
        """Get a deposit address.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_deposit_address_with_http_info(currency, network, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a> (required)
        :param str network: The `network` parameter is used to indicate which blockchain you would like to deposit from. The acceptable value in the `network` parameter for each currency can be found from `networks.asset` from `GET /wallet/assets`. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['currency', 'network']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_deposit_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'currency' is set
        if self.api_client.client_side_validation and ('currency' not in params or
                                                       params['currency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `currency` when calling `user_get_deposit_address`")  # noqa: E501
        # verify the required parameter 'network' is set
        if self.api_client.client_side_validation and ('network' not in params or
                                                       params['network'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `network` when calling `user_get_deposit_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501
        if 'network' in params:
            query_params.append(('network', params['network']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/depositAddress', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_execution_history(self, symbol, timestamp, **kwargs):  # noqa: E501
        """Get the execution history by day.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_execution_history(symbol, timestamp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: (required)
        :param datetime timestamp: (required)
        :return: list[Execution]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_execution_history_with_http_info(symbol, timestamp, **kwargs)  # noqa: E501
        else:
            (data) = self.user_get_execution_history_with_http_info(symbol, timestamp, **kwargs)  # noqa: E501
            return data

    def user_get_execution_history_with_http_info(self, symbol, timestamp, **kwargs):  # noqa: E501
        """Get the execution history by day.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_execution_history_with_http_info(symbol, timestamp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: (required)
        :param datetime timestamp: (required)
        :return: list[Execution]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'timestamp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_execution_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if self.api_client.client_side_validation and ('symbol' not in params or
                                                       params['symbol'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `symbol` when calling `user_get_execution_history`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if self.api_client.client_side_validation and ('timestamp' not in params or
                                                       params['timestamp'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `timestamp` when calling `user_get_execution_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/executionHistory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Execution]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_margin(self, **kwargs):  # noqa: E501
        """Get your account's margin status. Send a currency of \"all\" to receive an array of all supported currencies.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_margin(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a>. For all currencies specify \"all\"
        :return: Margin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_margin_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_margin_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_margin_with_http_info(self, **kwargs):  # noqa: E501
        """Get your account's margin status. Send a currency of \"all\" to receive an array of all supported currencies.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_margin_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a>. For all currencies specify \"all\"
        :return: Margin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['currency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_margin" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/margin', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Margin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_quote_fill_ratio(self, **kwargs):  # noqa: E501
        """Get 7 days worth of Quote Fill Ratio statistics.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_quote_fill_ratio(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float target_account_id: AccountId to get quote fill ratio for, must be a paired account with main user. Can be wildcard * to get all accounts linked to the authenticated user
        :return: QuoteFillRatio
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_quote_fill_ratio_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_quote_fill_ratio_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_quote_fill_ratio_with_http_info(self, **kwargs):  # noqa: E501
        """Get 7 days worth of Quote Fill Ratio statistics.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_quote_fill_ratio_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float target_account_id: AccountId to get quote fill ratio for, must be a paired account with main user. Can be wildcard * to get all accounts linked to the authenticated user
        :return: QuoteFillRatio
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_quote_fill_ratio" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'target_account_id' in params:
            query_params.append(('targetAccountId', params['target_account_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/quoteFillRatio', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuoteFillRatio',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_quote_value_ratio(self, **kwargs):  # noqa: E501
        """Get Quote Value Ratio statistics over the last 3 days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_quote_value_ratio(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float target_account_id: AccountId to get quote value ratio for, must be a paired account with main user. Can be wildcard * to get all accounts linked to the authenticated user
        :return: QuoteValueRatio
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_quote_value_ratio_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_quote_value_ratio_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_quote_value_ratio_with_http_info(self, **kwargs):  # noqa: E501
        """Get Quote Value Ratio statistics over the last 3 days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_quote_value_ratio_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float target_account_id: AccountId to get quote value ratio for, must be a paired account with main user. Can be wildcard * to get all accounts linked to the authenticated user
        :return: QuoteValueRatio
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_quote_value_ratio" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'target_account_id' in params:
            query_params.append(('targetAccountId', params['target_account_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/quoteValueRatio', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuoteValueRatio',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_staking(self, **kwargs):  # noqa: E501
        """Get the current user staking amount.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_staking(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency:
        :return: list[StakingRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_staking_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_staking_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_staking_with_http_info(self, **kwargs):  # noqa: E501
        """Get the current user staking amount.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_staking_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency:
        :return: list[StakingRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['currency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_staking" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/staking', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StakingRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_staking_instruments(self, **kwargs):  # noqa: E501
        """List staking instruments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_staking_instruments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param str currency:
        :return: list[XAny]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_staking_instruments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_staking_instruments_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_staking_instruments_with_http_info(self, **kwargs):  # noqa: E501
        """List staking instruments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_staking_instruments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol:
        :param str currency:
        :return: list[XAny]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'currency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_staking_instruments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/staking/instruments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[XAny]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_staking_tiers(self, currency, **kwargs):  # noqa: E501
        """List staking tiers for a given currency  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_staking_tiers(currency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: (required)
        :return: list[XAny]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_staking_tiers_with_http_info(currency, **kwargs)  # noqa: E501
        else:
            (data) = self.user_get_staking_tiers_with_http_info(currency, **kwargs)  # noqa: E501
            return data

    def user_get_staking_tiers_with_http_info(self, currency, **kwargs):  # noqa: E501
        """List staking tiers for a given currency  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_staking_tiers_with_http_info(currency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: (required)
        :return: list[XAny]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['currency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_staking_tiers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'currency' is set
        if self.api_client.client_side_validation and ('currency' not in params or
                                                       params['currency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `currency` when calling `user_get_staking_tiers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/staking/tiers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[XAny]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_trading_volume(self, **kwargs):  # noqa: E501
        """Get your 30 days USD average trading volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_trading_volume(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[TradingVolume]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_trading_volume_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_trading_volume_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_trading_volume_with_http_info(self, **kwargs):  # noqa: E501
        """Get your 30 days USD average trading volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_trading_volume_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[TradingVolume]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_trading_volume" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/tradingVolume', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TradingVolume]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_unstaking_requests(self, status, **kwargs):  # noqa: E501
        """Get the current user unstaking requests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_unstaking_requests(status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: (required)
        :return: list[StakingRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_unstaking_requests_with_http_info(status, **kwargs)  # noqa: E501
        else:
            (data) = self.user_get_unstaking_requests_with_http_info(status, **kwargs)  # noqa: E501
            return data

    def user_get_unstaking_requests_with_http_info(self, status, **kwargs):  # noqa: E501
        """Get the current user unstaking requests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_unstaking_requests_with_http_info(status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: (required)
        :return: list[StakingRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_unstaking_requests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status' is set
        if self.api_client.client_side_validation and ('status' not in params or
                                                       params['status'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `status` when calling `user_get_unstaking_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/unstakingRequests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StakingRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_wallet(self, **kwargs):  # noqa: E501
        """Get your current wallet information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_wallet(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a>. For all currencies specify \"all\"
        :return: Wallet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_wallet_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_wallet_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_wallet_with_http_info(self, **kwargs):  # noqa: E501
        """Get your current wallet information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_wallet_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a>. For all currencies specify \"all\"
        :return: Wallet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['currency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_wallet" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/wallet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wallet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_wallet_history(self, **kwargs):  # noqa: E501
        """Get a history of all of your wallet transactions (deposits, withdrawals, PNL).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_wallet_history(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a>. For all currencies specify \"all\"
        :param float count: Number of results to fetch.
        :param float start: Starting point for results.
        :param float target_account_id: AccountId to view the history of, must be a paired account with the authorised user requesting the history.
        :return: list[Transaction]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_wallet_history_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_wallet_history_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_wallet_history_with_http_info(self, **kwargs):  # noqa: E501
        """Get a history of all of your wallet transactions (deposits, withdrawals, PNL).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_wallet_history_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a>. For all currencies specify \"all\"
        :param float count: Number of results to fetch.
        :param float start: Starting point for results.
        :param float target_account_id: AccountId to view the history of, must be a paired account with the authorised user requesting the history.
        :return: list[Transaction]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['currency', 'count', 'start', 'target_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_wallet_history" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'target_account_id' in params:
            query_params.append(('targetAccountId', params['target_account_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/walletHistory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Transaction]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_wallet_summary(self, **kwargs):  # noqa: E501
        """Get a summary of all of your wallet transactions (deposits, withdrawals, PNL).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_wallet_summary(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a>. For all currencies specify \"all\"
        :return: list[Transaction]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_wallet_summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_wallet_summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_wallet_summary_with_http_info(self, **kwargs):  # noqa: E501
        """Get a summary of all of your wallet transactions (deposits, withdrawals, PNL).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_wallet_summary_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a>. For all currencies specify \"all\"
        :return: list[Transaction]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['currency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_wallet_summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/walletSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Transaction]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_wallet_transfer_accounts(self, **kwargs):  # noqa: E501
        """Get the list of accounts you can transfer funds between.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_wallet_transfer_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[XAny]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_wallet_transfer_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_wallet_transfer_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_wallet_transfer_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of accounts you can transfer funds between.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_wallet_transfer_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[XAny]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_wallet_transfer_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/getWalletTransferAccounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[XAny]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_logout(self, **kwargs):  # noqa: E501
        """Log out of BitMEX.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_logout(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_logout_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_logout_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_logout_with_http_info(self, **kwargs):  # noqa: E501
        """Log out of BitMEX.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_logout_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_logout" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/logout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_request_withdrawal(self, currency, network, amount, **kwargs):  # noqa: E501
        """Request a withdrawal to an external wallet.  # noqa: E501

        This will send a confirmation email to the email address on record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_request_withdrawal(currency, network, amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Currency you're withdrawing. Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a> (required)
        :param str network: The `network` parameter is used to indicate which blockchain you would like to withdraw from. The acceptable value in the `network` parameter for each currency can be found from `networks.asset` from `GET /wallet/assets`. (required)
        :param float amount: Amount of withdrawal currency. (required)
        :param str otp_token: 2FA token. Required for all external withdrawals unless the address has skip2FA in addressbook.
        :param str address: Destination Address. One of `address`, `addressId`, `targetUserId` has to be specified.
        :param float address_id: ID of the Destination Address. One of `address`, `addressId`, `targetUserId` has to be specified.
        :param float target_user_id: ID of the Target User. One of `address`, `addressId`, `targetUserId` has to be specified.
        :param float fee: Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email.
        :param str text: Optional annotation, e.g. 'Transfer to home wallet'.
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_request_withdrawal_with_http_info(currency, network, amount, **kwargs)  # noqa: E501
        else:
            (data) = self.user_request_withdrawal_with_http_info(currency, network, amount, **kwargs)  # noqa: E501
            return data

    def user_request_withdrawal_with_http_info(self, currency, network, amount, **kwargs):  # noqa: E501
        """Request a withdrawal to an external wallet.  # noqa: E501

        This will send a confirmation email to the email address on record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_request_withdrawal_with_http_info(currency, network, amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Currency you're withdrawing. Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a> (required)
        :param str network: The `network` parameter is used to indicate which blockchain you would like to withdraw from. The acceptable value in the `network` parameter for each currency can be found from `networks.asset` from `GET /wallet/assets`. (required)
        :param float amount: Amount of withdrawal currency. (required)
        :param str otp_token: 2FA token. Required for all external withdrawals unless the address has skip2FA in addressbook.
        :param str address: Destination Address. One of `address`, `addressId`, `targetUserId` has to be specified.
        :param float address_id: ID of the Destination Address. One of `address`, `addressId`, `targetUserId` has to be specified.
        :param float target_user_id: ID of the Target User. One of `address`, `addressId`, `targetUserId` has to be specified.
        :param float fee: Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email.
        :param str text: Optional annotation, e.g. 'Transfer to home wallet'.
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['currency', 'network', 'amount', 'otp_token', 'address', 'address_id', 'target_user_id', 'fee', 'text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_request_withdrawal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'currency' is set
        if self.api_client.client_side_validation and ('currency' not in params or
                                                       params['currency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `currency` when calling `user_request_withdrawal`")  # noqa: E501
        # verify the required parameter 'network' is set
        if self.api_client.client_side_validation and ('network' not in params or
                                                       params['network'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `network` when calling `user_request_withdrawal`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if self.api_client.client_side_validation and ('amount' not in params or
                                                       params['amount'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `amount` when calling `user_request_withdrawal`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'otp_token' in params:
            form_params.append(('otpToken', params['otp_token']))  # noqa: E501
        if 'currency' in params:
            form_params.append(('currency', params['currency']))  # noqa: E501
        if 'network' in params:
            form_params.append(('network', params['network']))  # noqa: E501
        if 'amount' in params:
            form_params.append(('amount', params['amount']))  # noqa: E501
        if 'address' in params:
            form_params.append(('address', params['address']))  # noqa: E501
        if 'address_id' in params:
            form_params.append(('addressId', params['address_id']))  # noqa: E501
        if 'target_user_id' in params:
            form_params.append(('targetUserId', params['target_user_id']))  # noqa: E501
        if 'fee' in params:
            form_params.append(('fee', params['fee']))  # noqa: E501
        if 'text' in params:
            form_params.append(('text', params['text']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/requestWithdrawal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_save_preferences(self, prefs, **kwargs):  # noqa: E501
        """Save user preferences.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_save_preferences(prefs, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefs: (required)
        :param bool overwrite: If true, will overwrite all existing preferences.
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_save_preferences_with_http_info(prefs, **kwargs)  # noqa: E501
        else:
            (data) = self.user_save_preferences_with_http_info(prefs, **kwargs)  # noqa: E501
            return data

    def user_save_preferences_with_http_info(self, prefs, **kwargs):  # noqa: E501
        """Save user preferences.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_save_preferences_with_http_info(prefs, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefs: (required)
        :param bool overwrite: If true, will overwrite all existing preferences.
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prefs', 'overwrite']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_save_preferences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prefs' is set
        if self.api_client.client_side_validation and ('prefs' not in params or
                                                       params['prefs'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `prefs` when calling `user_save_preferences`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'prefs' in params:
            form_params.append(('prefs', params['prefs']))  # noqa: E501
        if 'overwrite' in params:
            form_params.append(('overwrite', params['overwrite']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/preferences', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_update_sub_account(self, target_account_id, account_name, **kwargs):  # noqa: E501
        """Updates the sub-account name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_update_sub_account(target_account_id, account_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float target_account_id: (required)
        :param str account_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_update_sub_account_with_http_info(target_account_id, account_name, **kwargs)  # noqa: E501
        else:
            (data) = self.user_update_sub_account_with_http_info(target_account_id, account_name, **kwargs)  # noqa: E501
            return data

    def user_update_sub_account_with_http_info(self, target_account_id, account_name, **kwargs):  # noqa: E501
        """Updates the sub-account name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_update_sub_account_with_http_info(target_account_id, account_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float target_account_id: (required)
        :param str account_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_account_id', 'account_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_update_sub_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_account_id' is set
        if self.api_client.client_side_validation and ('target_account_id' not in params or
                                                       params['target_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_account_id` when calling `user_update_sub_account`")  # noqa: E501
        # verify the required parameter 'account_name' is set
        if self.api_client.client_side_validation and ('account_name' not in params or
                                                       params['account_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_name` when calling `user_update_sub_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'target_account_id' in params:
            form_params.append(('targetAccountId', params['target_account_id']))  # noqa: E501
        if 'account_name' in params:
            form_params.append(('accountName', params['account_name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/updateSubaccount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_wallet_transfer(self, currency, amount, target_account_id, **kwargs):  # noqa: E501
        """Execute a transfer to a paired account.  # noqa: E501

        This will send a confirmation email to the email address on record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_wallet_transfer(currency, amount, target_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Currency you're transfering. Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a> (required)
        :param float amount: Amount of transfer. (required)
        :param float target_account_id: AccountId to send the transfer to, must be a paired account with the user sending the transfer. (required)
        :param float from_account_id: AccountID to send the transfer from. Must be paired account with the authenticated user.
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_wallet_transfer_with_http_info(currency, amount, target_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_wallet_transfer_with_http_info(currency, amount, target_account_id, **kwargs)  # noqa: E501
            return data

    def user_wallet_transfer_with_http_info(self, currency, amount, target_account_id, **kwargs):  # noqa: E501
        """Execute a transfer to a paired account.  # noqa: E501

        This will send a confirmation email to the email address on record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_wallet_transfer_with_http_info(currency, amount, target_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Currency you're transfering. Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a> (required)
        :param float amount: Amount of transfer. (required)
        :param float target_account_id: AccountId to send the transfer to, must be a paired account with the user sending the transfer. (required)
        :param float from_account_id: AccountID to send the transfer from. Must be paired account with the authenticated user.
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['currency', 'amount', 'target_account_id', 'from_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_wallet_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'currency' is set
        if self.api_client.client_side_validation and ('currency' not in params or
                                                       params['currency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `currency` when calling `user_wallet_transfer`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if self.api_client.client_side_validation and ('amount' not in params or
                                                       params['amount'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `amount` when calling `user_wallet_transfer`")  # noqa: E501
        # verify the required parameter 'target_account_id' is set
        if self.api_client.client_side_validation and ('target_account_id' not in params or
                                                       params['target_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_account_id` when calling `user_wallet_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'currency' in params:
            form_params.append(('currency', params['currency']))  # noqa: E501
        if 'amount' in params:
            form_params.append(('amount', params['amount']))  # noqa: E501
        if 'from_account_id' in params:
            form_params.append(('fromAccountId', params['from_account_id']))  # noqa: E501
        if 'target_account_id' in params:
            form_params.append(('targetAccountId', params['target_account_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/user/walletTransfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
