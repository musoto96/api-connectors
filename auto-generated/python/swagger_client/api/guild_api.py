# coding: utf-8

"""
    BitMEX API

    ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GuildApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def guild_archive(self, **kwargs):  # noqa: E501
        """Archive a guild  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_archive(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.guild_archive_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.guild_archive_with_http_info(**kwargs)  # noqa: E501
            return data

    def guild_archive_with_http_info(self, **kwargs):  # noqa: E501
        """Archive a guild  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_archive_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method guild_archive" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/guild/archive', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def guild_edit(self, name, emoji, pot_distribution_percent, pot_distribution_type, **kwargs):  # noqa: E501
        """Edit guild new guild  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_edit(name, emoji, pot_distribution_percent, pot_distribution_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of the guild, must be unique, must be at least 5 characters (required)
        :param str emoji: Emoji name. (required)
        :param float pot_distribution_percent: How much of the pot should be distributed to the guild members, must be between 0 and 100 (required)
        :param str pot_distribution_type: How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM (required)
        :param float pot_trader_id: User ID of the guild member with order write permission for the pot
        :param str description: Guild description, can be used to explain the guild to other users.
        :param str twitter: Guild twitter handle.
        :param str discord: Guild discord link.
        :param str img_url: URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used
        :param bool is_private: Guild privacy status
        :return: Guild
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.guild_edit_with_http_info(name, emoji, pot_distribution_percent, pot_distribution_type, **kwargs)  # noqa: E501
        else:
            (data) = self.guild_edit_with_http_info(name, emoji, pot_distribution_percent, pot_distribution_type, **kwargs)  # noqa: E501
            return data

    def guild_edit_with_http_info(self, name, emoji, pot_distribution_percent, pot_distribution_type, **kwargs):  # noqa: E501
        """Edit guild new guild  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_edit_with_http_info(name, emoji, pot_distribution_percent, pot_distribution_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of the guild, must be unique, must be at least 5 characters (required)
        :param str emoji: Emoji name. (required)
        :param float pot_distribution_percent: How much of the pot should be distributed to the guild members, must be between 0 and 100 (required)
        :param str pot_distribution_type: How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM (required)
        :param float pot_trader_id: User ID of the guild member with order write permission for the pot
        :param str description: Guild description, can be used to explain the guild to other users.
        :param str twitter: Guild twitter handle.
        :param str discord: Guild discord link.
        :param str img_url: URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used
        :param bool is_private: Guild privacy status
        :return: Guild
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'emoji', 'pot_distribution_percent', 'pot_distribution_type', 'pot_trader_id', 'description', 'twitter', 'discord', 'img_url', 'is_private']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method guild_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `guild_edit`")  # noqa: E501
        # verify the required parameter 'emoji' is set
        if self.api_client.client_side_validation and ('emoji' not in params or
                                                       params['emoji'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `emoji` when calling `guild_edit`")  # noqa: E501
        # verify the required parameter 'pot_distribution_percent' is set
        if self.api_client.client_side_validation and ('pot_distribution_percent' not in params or
                                                       params['pot_distribution_percent'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pot_distribution_percent` when calling `guild_edit`")  # noqa: E501
        # verify the required parameter 'pot_distribution_type' is set
        if self.api_client.client_side_validation and ('pot_distribution_type' not in params or
                                                       params['pot_distribution_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pot_distribution_type` when calling `guild_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'emoji' in params:
            form_params.append(('emoji', params['emoji']))  # noqa: E501
        if 'pot_distribution_percent' in params:
            form_params.append(('potDistributionPercent', params['pot_distribution_percent']))  # noqa: E501
        if 'pot_distribution_type' in params:
            form_params.append(('potDistributionType', params['pot_distribution_type']))  # noqa: E501
        if 'pot_trader_id' in params:
            form_params.append(('potTraderId', params['pot_trader_id']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'twitter' in params:
            form_params.append(('twitter', params['twitter']))  # noqa: E501
        if 'discord' in params:
            form_params.append(('discord', params['discord']))  # noqa: E501
        if 'img_url' in params:
            form_params.append(('imgUrl', params['img_url']))  # noqa: E501
        if 'is_private' in params:
            form_params.append(('isPrivate', params['is_private']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/guild', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Guild',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def guild_get(self, **kwargs):  # noqa: E501
        """Get all guilds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[XAny]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.guild_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.guild_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def guild_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all guilds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[XAny]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method guild_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/guild', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[XAny]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def guild_join(self, code, **kwargs):  # noqa: E501
        """Request to Join a private guild or join a public guild  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_join(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.guild_join_with_http_info(code, **kwargs)  # noqa: E501
        else:
            (data) = self.guild_join_with_http_info(code, **kwargs)  # noqa: E501
            return data

    def guild_join_with_http_info(self, code, **kwargs):  # noqa: E501
        """Request to Join a private guild or join a public guild  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_join_with_http_info(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method guild_join" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if self.api_client.client_side_validation and ('code' not in params or
                                                       params['code'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `code` when calling `guild_join`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'code' in params:
            form_params.append(('code', params['code']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/guild/join', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def guild_kick(self, member_user_id, **kwargs):  # noqa: E501
        """Kick member from guild  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_kick(member_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float member_user_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.guild_kick_with_http_info(member_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.guild_kick_with_http_info(member_user_id, **kwargs)  # noqa: E501
            return data

    def guild_kick_with_http_info(self, member_user_id, **kwargs):  # noqa: E501
        """Kick member from guild  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_kick_with_http_info(member_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float member_user_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['member_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method guild_kick" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'member_user_id' is set
        if self.api_client.client_side_validation and ('member_user_id' not in params or
                                                       params['member_user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `member_user_id` when calling `guild_kick`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'member_user_id' in params:
            form_params.append(('memberUserId', params['member_user_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/guild/kick', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def guild_leave(self, **kwargs):  # noqa: E501
        """Leave guild or cancel guild join request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_leave(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.guild_leave_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.guild_leave_with_http_info(**kwargs)  # noqa: E501
            return data

    def guild_leave_with_http_info(self, **kwargs):  # noqa: E501
        """Leave guild or cancel guild join request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_leave_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method guild_leave" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/guild/leave', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def guild_new(self, name, emoji, pot_distribution_percent, pot_distribution_type, **kwargs):  # noqa: E501
        """Creates a new guild  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_new(name, emoji, pot_distribution_percent, pot_distribution_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of the guild, must be unique, must be at least 5 characters (required)
        :param str emoji: Emoji name. (required)
        :param float pot_distribution_percent: How much of the pot should be distributed to the guild members, must be between 0 and 100 (required)
        :param str pot_distribution_type: How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM (required)
        :param str description: Guild description, can be used to explain the guild to other users.
        :param str twitter: Guild twitter handle.
        :param str discord: Guild discord link.
        :param str img_url: URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used
        :param bool is_private: Guild privacy status
        :return: Guild
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.guild_new_with_http_info(name, emoji, pot_distribution_percent, pot_distribution_type, **kwargs)  # noqa: E501
        else:
            (data) = self.guild_new_with_http_info(name, emoji, pot_distribution_percent, pot_distribution_type, **kwargs)  # noqa: E501
            return data

    def guild_new_with_http_info(self, name, emoji, pot_distribution_percent, pot_distribution_type, **kwargs):  # noqa: E501
        """Creates a new guild  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_new_with_http_info(name, emoji, pot_distribution_percent, pot_distribution_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of the guild, must be unique, must be at least 5 characters (required)
        :param str emoji: Emoji name. (required)
        :param float pot_distribution_percent: How much of the pot should be distributed to the guild members, must be between 0 and 100 (required)
        :param str pot_distribution_type: How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM (required)
        :param str description: Guild description, can be used to explain the guild to other users.
        :param str twitter: Guild twitter handle.
        :param str discord: Guild discord link.
        :param str img_url: URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used
        :param bool is_private: Guild privacy status
        :return: Guild
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'emoji', 'pot_distribution_percent', 'pot_distribution_type', 'description', 'twitter', 'discord', 'img_url', 'is_private']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method guild_new" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `guild_new`")  # noqa: E501
        # verify the required parameter 'emoji' is set
        if self.api_client.client_side_validation and ('emoji' not in params or
                                                       params['emoji'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `emoji` when calling `guild_new`")  # noqa: E501
        # verify the required parameter 'pot_distribution_percent' is set
        if self.api_client.client_side_validation and ('pot_distribution_percent' not in params or
                                                       params['pot_distribution_percent'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pot_distribution_percent` when calling `guild_new`")  # noqa: E501
        # verify the required parameter 'pot_distribution_type' is set
        if self.api_client.client_side_validation and ('pot_distribution_type' not in params or
                                                       params['pot_distribution_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pot_distribution_type` when calling `guild_new`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'emoji' in params:
            form_params.append(('emoji', params['emoji']))  # noqa: E501
        if 'pot_distribution_percent' in params:
            form_params.append(('potDistributionPercent', params['pot_distribution_percent']))  # noqa: E501
        if 'pot_distribution_type' in params:
            form_params.append(('potDistributionType', params['pot_distribution_type']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'twitter' in params:
            form_params.append(('twitter', params['twitter']))  # noqa: E501
        if 'discord' in params:
            form_params.append(('discord', params['discord']))  # noqa: E501
        if 'img_url' in params:
            form_params.append(('imgUrl', params['img_url']))  # noqa: E501
        if 'is_private' in params:
            form_params.append(('isPrivate', params['is_private']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/guild', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Guild',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def guild_share_trades(self, share_trades, **kwargs):  # noqa: E501
        """Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_share_trades(share_trades, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool share_trades: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.guild_share_trades_with_http_info(share_trades, **kwargs)  # noqa: E501
        else:
            (data) = self.guild_share_trades_with_http_info(share_trades, **kwargs)  # noqa: E501
            return data

    def guild_share_trades_with_http_info(self, share_trades, **kwargs):  # noqa: E501
        """Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.guild_share_trades_with_http_info(share_trades, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool share_trades: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['share_trades']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method guild_share_trades" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'share_trades' is set
        if self.api_client.client_side_validation and ('share_trades' not in params or
                                                       params['share_trades'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `share_trades` when calling `guild_share_trades`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'share_trades' in params:
            form_params.append(('shareTrades', params['share_trades']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiExpires', 'apiKey', 'apiSignature']  # noqa: E501

        return self.api_client.call_api(
            '/guild/shareTrades', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
