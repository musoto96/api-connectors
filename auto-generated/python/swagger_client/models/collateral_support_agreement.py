# coding: utf-8

"""
    BitMEX API

    ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CollateralSupportAgreement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'csa_id': 'str',
        'account': 'float',
        'currency': 'str',
        'amount': 'float',
        'min_amount': 'float',
        'threshold': 'float',
        'mm_ratio_margin_call': 'float',
        'mm_ratio_liquidation': 'float',
        'start_time': 'str',
        'maturity_time': 'str',
        'maturity_instruction': 'str',
        'csa_status': 'str',
        'requester': 'str',
        'client_details': 'str',
        'text': 'str',
        'timestamp': 'str'
    }

    attribute_map = {
        'csa_id': 'csaID',
        'account': 'account',
        'currency': 'currency',
        'amount': 'amount',
        'min_amount': 'minAmount',
        'threshold': 'threshold',
        'mm_ratio_margin_call': 'mmRatioMarginCall',
        'mm_ratio_liquidation': 'mmRatioLiquidation',
        'start_time': 'startTime',
        'maturity_time': 'maturityTime',
        'maturity_instruction': 'maturityInstruction',
        'csa_status': 'csaStatus',
        'requester': 'requester',
        'client_details': 'clientDetails',
        'text': 'text',
        'timestamp': 'timestamp'
    }

    def __init__(self, csa_id=None, account=None, currency=None, amount=None, min_amount=None, threshold=None, mm_ratio_margin_call=None, mm_ratio_liquidation=None, start_time=None, maturity_time=None, maturity_instruction=None, csa_status=None, requester=None, client_details=None, text=None, timestamp=None, _configuration=None):  # noqa: E501
        """CollateralSupportAgreement - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._csa_id = None
        self._account = None
        self._currency = None
        self._amount = None
        self._min_amount = None
        self._threshold = None
        self._mm_ratio_margin_call = None
        self._mm_ratio_liquidation = None
        self._start_time = None
        self._maturity_time = None
        self._maturity_instruction = None
        self._csa_status = None
        self._requester = None
        self._client_details = None
        self._text = None
        self._timestamp = None
        self.discriminator = None

        self.csa_id = csa_id
        if account is not None:
            self.account = account
        if currency is not None:
            self.currency = currency
        if amount is not None:
            self.amount = amount
        if min_amount is not None:
            self.min_amount = min_amount
        if threshold is not None:
            self.threshold = threshold
        if mm_ratio_margin_call is not None:
            self.mm_ratio_margin_call = mm_ratio_margin_call
        if mm_ratio_liquidation is not None:
            self.mm_ratio_liquidation = mm_ratio_liquidation
        if start_time is not None:
            self.start_time = start_time
        if maturity_time is not None:
            self.maturity_time = maturity_time
        if maturity_instruction is not None:
            self.maturity_instruction = maturity_instruction
        if csa_status is not None:
            self.csa_status = csa_status
        if requester is not None:
            self.requester = requester
        if client_details is not None:
            self.client_details = client_details
        if text is not None:
            self.text = text
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def csa_id(self):
        """Gets the csa_id of this CollateralSupportAgreement.  # noqa: E501


        :return: The csa_id of this CollateralSupportAgreement.  # noqa: E501
        :rtype: str
        """
        return self._csa_id

    @csa_id.setter
    def csa_id(self, csa_id):
        """Sets the csa_id of this CollateralSupportAgreement.


        :param csa_id: The csa_id of this CollateralSupportAgreement.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and csa_id is None:
            raise ValueError("Invalid value for `csa_id`, must not be `None`")  # noqa: E501

        self._csa_id = csa_id

    @property
    def account(self):
        """Gets the account of this CollateralSupportAgreement.  # noqa: E501


        :return: The account of this CollateralSupportAgreement.  # noqa: E501
        :rtype: float
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this CollateralSupportAgreement.


        :param account: The account of this CollateralSupportAgreement.  # noqa: E501
        :type: float
        """

        self._account = account

    @property
    def currency(self):
        """Gets the currency of this CollateralSupportAgreement.  # noqa: E501


        :return: The currency of this CollateralSupportAgreement.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CollateralSupportAgreement.


        :param currency: The currency of this CollateralSupportAgreement.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def amount(self):
        """Gets the amount of this CollateralSupportAgreement.  # noqa: E501


        :return: The amount of this CollateralSupportAgreement.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CollateralSupportAgreement.


        :param amount: The amount of this CollateralSupportAgreement.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def min_amount(self):
        """Gets the min_amount of this CollateralSupportAgreement.  # noqa: E501


        :return: The min_amount of this CollateralSupportAgreement.  # noqa: E501
        :rtype: float
        """
        return self._min_amount

    @min_amount.setter
    def min_amount(self, min_amount):
        """Sets the min_amount of this CollateralSupportAgreement.


        :param min_amount: The min_amount of this CollateralSupportAgreement.  # noqa: E501
        :type: float
        """

        self._min_amount = min_amount

    @property
    def threshold(self):
        """Gets the threshold of this CollateralSupportAgreement.  # noqa: E501


        :return: The threshold of this CollateralSupportAgreement.  # noqa: E501
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this CollateralSupportAgreement.


        :param threshold: The threshold of this CollateralSupportAgreement.  # noqa: E501
        :type: float
        """

        self._threshold = threshold

    @property
    def mm_ratio_margin_call(self):
        """Gets the mm_ratio_margin_call of this CollateralSupportAgreement.  # noqa: E501


        :return: The mm_ratio_margin_call of this CollateralSupportAgreement.  # noqa: E501
        :rtype: float
        """
        return self._mm_ratio_margin_call

    @mm_ratio_margin_call.setter
    def mm_ratio_margin_call(self, mm_ratio_margin_call):
        """Sets the mm_ratio_margin_call of this CollateralSupportAgreement.


        :param mm_ratio_margin_call: The mm_ratio_margin_call of this CollateralSupportAgreement.  # noqa: E501
        :type: float
        """

        self._mm_ratio_margin_call = mm_ratio_margin_call

    @property
    def mm_ratio_liquidation(self):
        """Gets the mm_ratio_liquidation of this CollateralSupportAgreement.  # noqa: E501


        :return: The mm_ratio_liquidation of this CollateralSupportAgreement.  # noqa: E501
        :rtype: float
        """
        return self._mm_ratio_liquidation

    @mm_ratio_liquidation.setter
    def mm_ratio_liquidation(self, mm_ratio_liquidation):
        """Sets the mm_ratio_liquidation of this CollateralSupportAgreement.


        :param mm_ratio_liquidation: The mm_ratio_liquidation of this CollateralSupportAgreement.  # noqa: E501
        :type: float
        """

        self._mm_ratio_liquidation = mm_ratio_liquidation

    @property
    def start_time(self):
        """Gets the start_time of this CollateralSupportAgreement.  # noqa: E501


        :return: The start_time of this CollateralSupportAgreement.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CollateralSupportAgreement.


        :param start_time: The start_time of this CollateralSupportAgreement.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def maturity_time(self):
        """Gets the maturity_time of this CollateralSupportAgreement.  # noqa: E501


        :return: The maturity_time of this CollateralSupportAgreement.  # noqa: E501
        :rtype: str
        """
        return self._maturity_time

    @maturity_time.setter
    def maturity_time(self, maturity_time):
        """Sets the maturity_time of this CollateralSupportAgreement.


        :param maturity_time: The maturity_time of this CollateralSupportAgreement.  # noqa: E501
        :type: str
        """

        self._maturity_time = maturity_time

    @property
    def maturity_instruction(self):
        """Gets the maturity_instruction of this CollateralSupportAgreement.  # noqa: E501


        :return: The maturity_instruction of this CollateralSupportAgreement.  # noqa: E501
        :rtype: str
        """
        return self._maturity_instruction

    @maturity_instruction.setter
    def maturity_instruction(self, maturity_instruction):
        """Sets the maturity_instruction of this CollateralSupportAgreement.


        :param maturity_instruction: The maturity_instruction of this CollateralSupportAgreement.  # noqa: E501
        :type: str
        """

        self._maturity_instruction = maturity_instruction

    @property
    def csa_status(self):
        """Gets the csa_status of this CollateralSupportAgreement.  # noqa: E501


        :return: The csa_status of this CollateralSupportAgreement.  # noqa: E501
        :rtype: str
        """
        return self._csa_status

    @csa_status.setter
    def csa_status(self, csa_status):
        """Sets the csa_status of this CollateralSupportAgreement.


        :param csa_status: The csa_status of this CollateralSupportAgreement.  # noqa: E501
        :type: str
        """

        self._csa_status = csa_status

    @property
    def requester(self):
        """Gets the requester of this CollateralSupportAgreement.  # noqa: E501


        :return: The requester of this CollateralSupportAgreement.  # noqa: E501
        :rtype: str
        """
        return self._requester

    @requester.setter
    def requester(self, requester):
        """Sets the requester of this CollateralSupportAgreement.


        :param requester: The requester of this CollateralSupportAgreement.  # noqa: E501
        :type: str
        """

        self._requester = requester

    @property
    def client_details(self):
        """Gets the client_details of this CollateralSupportAgreement.  # noqa: E501


        :return: The client_details of this CollateralSupportAgreement.  # noqa: E501
        :rtype: str
        """
        return self._client_details

    @client_details.setter
    def client_details(self, client_details):
        """Sets the client_details of this CollateralSupportAgreement.


        :param client_details: The client_details of this CollateralSupportAgreement.  # noqa: E501
        :type: str
        """

        self._client_details = client_details

    @property
    def text(self):
        """Gets the text of this CollateralSupportAgreement.  # noqa: E501


        :return: The text of this CollateralSupportAgreement.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CollateralSupportAgreement.


        :param text: The text of this CollateralSupportAgreement.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def timestamp(self):
        """Gets the timestamp of this CollateralSupportAgreement.  # noqa: E501


        :return: The timestamp of this CollateralSupportAgreement.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this CollateralSupportAgreement.


        :param timestamp: The timestamp of this CollateralSupportAgreement.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollateralSupportAgreement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollateralSupportAgreement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CollateralSupportAgreement):
            return True

        return self.to_dict() != other.to_dict()
