# coding: utf-8

"""
    BitMEX API

    ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Guild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'created': 'datetime',
        'updated': 'datetime',
        'archived': 'bool',
        'name': 'str',
        'img_url': 'str',
        'mobile_hero_img_url': 'str',
        'emoji': 'str',
        'logo_url': 'str',
        'description': 'str',
        'chat_channel_id': 'float',
        'is_private': 'bool',
        'affiliate_id': 'str',
        'pot_distribution_preferences': 'object',
        'socials': 'object',
        'deleted': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'updated': 'updated',
        'archived': 'archived',
        'name': 'name',
        'img_url': 'imgUrl',
        'mobile_hero_img_url': 'mobileHeroImgUrl',
        'emoji': 'emoji',
        'logo_url': 'logoUrl',
        'description': 'description',
        'chat_channel_id': 'chatChannelId',
        'is_private': 'isPrivate',
        'affiliate_id': 'affiliateId',
        'pot_distribution_preferences': 'potDistributionPreferences',
        'socials': 'socials',
        'deleted': 'deleted'
    }

    def __init__(self, id=None, created=None, updated=None, archived=None, name=None, img_url=None, mobile_hero_img_url=None, emoji=None, logo_url=None, description=None, chat_channel_id=None, is_private=None, affiliate_id=None, pot_distribution_preferences=None, socials=None, deleted=None, _configuration=None):  # noqa: E501
        """Guild - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._created = None
        self._updated = None
        self._archived = None
        self._name = None
        self._img_url = None
        self._mobile_hero_img_url = None
        self._emoji = None
        self._logo_url = None
        self._description = None
        self._chat_channel_id = None
        self._is_private = None
        self._affiliate_id = None
        self._pot_distribution_preferences = None
        self._socials = None
        self._deleted = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.created = created
        self.updated = updated
        if archived is not None:
            self.archived = archived
        self.name = name
        if img_url is not None:
            self.img_url = img_url
        if mobile_hero_img_url is not None:
            self.mobile_hero_img_url = mobile_hero_img_url
        if emoji is not None:
            self.emoji = emoji
        if logo_url is not None:
            self.logo_url = logo_url
        if description is not None:
            self.description = description
        self.chat_channel_id = chat_channel_id
        self.is_private = is_private
        if affiliate_id is not None:
            self.affiliate_id = affiliate_id
        if pot_distribution_preferences is not None:
            self.pot_distribution_preferences = pot_distribution_preferences
        if socials is not None:
            self.socials = socials
        if deleted is not None:
            self.deleted = deleted

    @property
    def id(self):
        """Gets the id of this Guild.  # noqa: E501


        :return: The id of this Guild.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Guild.


        :param id: The id of this Guild.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this Guild.  # noqa: E501


        :return: The created of this Guild.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Guild.


        :param created: The created of this Guild.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this Guild.  # noqa: E501


        :return: The updated of this Guild.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Guild.


        :param updated: The updated of this Guild.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def archived(self):
        """Gets the archived of this Guild.  # noqa: E501


        :return: The archived of this Guild.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Guild.


        :param archived: The archived of this Guild.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def name(self):
        """Gets the name of this Guild.  # noqa: E501


        :return: The name of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Guild.


        :param name: The name of this Guild.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def img_url(self):
        """Gets the img_url of this Guild.  # noqa: E501


        :return: The img_url of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._img_url

    @img_url.setter
    def img_url(self, img_url):
        """Sets the img_url of this Guild.


        :param img_url: The img_url of this Guild.  # noqa: E501
        :type: str
        """

        self._img_url = img_url

    @property
    def mobile_hero_img_url(self):
        """Gets the mobile_hero_img_url of this Guild.  # noqa: E501


        :return: The mobile_hero_img_url of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._mobile_hero_img_url

    @mobile_hero_img_url.setter
    def mobile_hero_img_url(self, mobile_hero_img_url):
        """Sets the mobile_hero_img_url of this Guild.


        :param mobile_hero_img_url: The mobile_hero_img_url of this Guild.  # noqa: E501
        :type: str
        """

        self._mobile_hero_img_url = mobile_hero_img_url

    @property
    def emoji(self):
        """Gets the emoji of this Guild.  # noqa: E501


        :return: The emoji of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._emoji

    @emoji.setter
    def emoji(self, emoji):
        """Sets the emoji of this Guild.


        :param emoji: The emoji of this Guild.  # noqa: E501
        :type: str
        """

        self._emoji = emoji

    @property
    def logo_url(self):
        """Gets the logo_url of this Guild.  # noqa: E501


        :return: The logo_url of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Guild.


        :param logo_url: The logo_url of this Guild.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def description(self):
        """Gets the description of this Guild.  # noqa: E501


        :return: The description of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Guild.


        :param description: The description of this Guild.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def chat_channel_id(self):
        """Gets the chat_channel_id of this Guild.  # noqa: E501


        :return: The chat_channel_id of this Guild.  # noqa: E501
        :rtype: float
        """
        return self._chat_channel_id

    @chat_channel_id.setter
    def chat_channel_id(self, chat_channel_id):
        """Sets the chat_channel_id of this Guild.


        :param chat_channel_id: The chat_channel_id of this Guild.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and chat_channel_id is None:
            raise ValueError("Invalid value for `chat_channel_id`, must not be `None`")  # noqa: E501

        self._chat_channel_id = chat_channel_id

    @property
    def is_private(self):
        """Gets the is_private of this Guild.  # noqa: E501


        :return: The is_private of this Guild.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this Guild.


        :param is_private: The is_private of this Guild.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_private is None:
            raise ValueError("Invalid value for `is_private`, must not be `None`")  # noqa: E501

        self._is_private = is_private

    @property
    def affiliate_id(self):
        """Gets the affiliate_id of this Guild.  # noqa: E501


        :return: The affiliate_id of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._affiliate_id

    @affiliate_id.setter
    def affiliate_id(self, affiliate_id):
        """Sets the affiliate_id of this Guild.


        :param affiliate_id: The affiliate_id of this Guild.  # noqa: E501
        :type: str
        """

        self._affiliate_id = affiliate_id

    @property
    def pot_distribution_preferences(self):
        """Gets the pot_distribution_preferences of this Guild.  # noqa: E501


        :return: The pot_distribution_preferences of this Guild.  # noqa: E501
        :rtype: object
        """
        return self._pot_distribution_preferences

    @pot_distribution_preferences.setter
    def pot_distribution_preferences(self, pot_distribution_preferences):
        """Sets the pot_distribution_preferences of this Guild.


        :param pot_distribution_preferences: The pot_distribution_preferences of this Guild.  # noqa: E501
        :type: object
        """

        self._pot_distribution_preferences = pot_distribution_preferences

    @property
    def socials(self):
        """Gets the socials of this Guild.  # noqa: E501


        :return: The socials of this Guild.  # noqa: E501
        :rtype: object
        """
        return self._socials

    @socials.setter
    def socials(self, socials):
        """Sets the socials of this Guild.


        :param socials: The socials of this Guild.  # noqa: E501
        :type: object
        """

        self._socials = socials

    @property
    def deleted(self):
        """Gets the deleted of this Guild.  # noqa: E501


        :return: The deleted of this Guild.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Guild.


        :param deleted: The deleted of this Guild.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Guild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Guild):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Guild):
            return True

        return self.to_dict() != other.to_dict()
