# coding: utf-8

"""
    BitMEX API

    ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AssetsConfigNetworkItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset': 'str',
        'token_address': 'str',
        'deposit_enabled': 'bool',
        'withdrawal_enabled': 'bool',
        'withdrawal_fee': 'float',
        'min_fee': 'float',
        'max_fee': 'float'
    }

    attribute_map = {
        'asset': 'asset',
        'token_address': 'tokenAddress',
        'deposit_enabled': 'depositEnabled',
        'withdrawal_enabled': 'withdrawalEnabled',
        'withdrawal_fee': 'withdrawalFee',
        'min_fee': 'minFee',
        'max_fee': 'maxFee'
    }

    def __init__(self, asset='BTC', token_address='', deposit_enabled=True, withdrawal_enabled=True, withdrawal_fee=None, min_fee=None, max_fee=None, _configuration=None):  # noqa: E501
        """AssetsConfigNetworkItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asset = None
        self._token_address = None
        self._deposit_enabled = None
        self._withdrawal_enabled = None
        self._withdrawal_fee = None
        self._min_fee = None
        self._max_fee = None
        self.discriminator = None

        self.asset = asset
        if token_address is not None:
            self.token_address = token_address
        if deposit_enabled is not None:
            self.deposit_enabled = deposit_enabled
        if withdrawal_enabled is not None:
            self.withdrawal_enabled = withdrawal_enabled
        if withdrawal_fee is not None:
            self.withdrawal_fee = withdrawal_fee
        if min_fee is not None:
            self.min_fee = min_fee
        if max_fee is not None:
            self.max_fee = max_fee

    @property
    def asset(self):
        """Gets the asset of this AssetsConfigNetworkItem.  # noqa: E501


        :return: The asset of this AssetsConfigNetworkItem.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this AssetsConfigNetworkItem.


        :param asset: The asset of this AssetsConfigNetworkItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def token_address(self):
        """Gets the token_address of this AssetsConfigNetworkItem.  # noqa: E501


        :return: The token_address of this AssetsConfigNetworkItem.  # noqa: E501
        :rtype: str
        """
        return self._token_address

    @token_address.setter
    def token_address(self, token_address):
        """Sets the token_address of this AssetsConfigNetworkItem.


        :param token_address: The token_address of this AssetsConfigNetworkItem.  # noqa: E501
        :type: str
        """

        self._token_address = token_address

    @property
    def deposit_enabled(self):
        """Gets the deposit_enabled of this AssetsConfigNetworkItem.  # noqa: E501


        :return: The deposit_enabled of this AssetsConfigNetworkItem.  # noqa: E501
        :rtype: bool
        """
        return self._deposit_enabled

    @deposit_enabled.setter
    def deposit_enabled(self, deposit_enabled):
        """Sets the deposit_enabled of this AssetsConfigNetworkItem.


        :param deposit_enabled: The deposit_enabled of this AssetsConfigNetworkItem.  # noqa: E501
        :type: bool
        """

        self._deposit_enabled = deposit_enabled

    @property
    def withdrawal_enabled(self):
        """Gets the withdrawal_enabled of this AssetsConfigNetworkItem.  # noqa: E501


        :return: The withdrawal_enabled of this AssetsConfigNetworkItem.  # noqa: E501
        :rtype: bool
        """
        return self._withdrawal_enabled

    @withdrawal_enabled.setter
    def withdrawal_enabled(self, withdrawal_enabled):
        """Sets the withdrawal_enabled of this AssetsConfigNetworkItem.


        :param withdrawal_enabled: The withdrawal_enabled of this AssetsConfigNetworkItem.  # noqa: E501
        :type: bool
        """

        self._withdrawal_enabled = withdrawal_enabled

    @property
    def withdrawal_fee(self):
        """Gets the withdrawal_fee of this AssetsConfigNetworkItem.  # noqa: E501


        :return: The withdrawal_fee of this AssetsConfigNetworkItem.  # noqa: E501
        :rtype: float
        """
        return self._withdrawal_fee

    @withdrawal_fee.setter
    def withdrawal_fee(self, withdrawal_fee):
        """Sets the withdrawal_fee of this AssetsConfigNetworkItem.


        :param withdrawal_fee: The withdrawal_fee of this AssetsConfigNetworkItem.  # noqa: E501
        :type: float
        """

        self._withdrawal_fee = withdrawal_fee

    @property
    def min_fee(self):
        """Gets the min_fee of this AssetsConfigNetworkItem.  # noqa: E501


        :return: The min_fee of this AssetsConfigNetworkItem.  # noqa: E501
        :rtype: float
        """
        return self._min_fee

    @min_fee.setter
    def min_fee(self, min_fee):
        """Sets the min_fee of this AssetsConfigNetworkItem.


        :param min_fee: The min_fee of this AssetsConfigNetworkItem.  # noqa: E501
        :type: float
        """

        self._min_fee = min_fee

    @property
    def max_fee(self):
        """Gets the max_fee of this AssetsConfigNetworkItem.  # noqa: E501


        :return: The max_fee of this AssetsConfigNetworkItem.  # noqa: E501
        :rtype: float
        """
        return self._max_fee

    @max_fee.setter
    def max_fee(self, max_fee):
        """Sets the max_fee of this AssetsConfigNetworkItem.


        :param max_fee: The max_fee of this AssetsConfigNetworkItem.  # noqa: E501
        :type: float
        """

        self._max_fee = max_fee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetsConfigNetworkItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetsConfigNetworkItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetsConfigNetworkItem):
            return True

        return self.to_dict() != other.to_dict()
