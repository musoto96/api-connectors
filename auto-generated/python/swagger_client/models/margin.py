# coding: utf-8

"""
    BitMEX API

    ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Margin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'float',
        'currency': 'str',
        'risk_limit': 'float',
        'state': 'str',
        'amount': 'float',
        'prev_realised_pnl': 'float',
        'gross_comm': 'float',
        'gross_open_cost': 'float',
        'gross_open_premium': 'float',
        'gross_exec_cost': 'float',
        'gross_mark_value': 'float',
        'risk_value': 'float',
        'init_margin': 'float',
        'maint_margin': 'float',
        'target_excess_margin': 'float',
        'realised_pnl': 'float',
        'unrealised_pnl': 'float',
        'wallet_balance': 'float',
        'margin_balance': 'float',
        'margin_leverage': 'float',
        'margin_used_pcnt': 'float',
        'excess_margin': 'float',
        'available_margin': 'float',
        'withdrawable_margin': 'float',
        'maker_fee_discount': 'float',
        'taker_fee_discount': 'float',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'account': 'account',
        'currency': 'currency',
        'risk_limit': 'riskLimit',
        'state': 'state',
        'amount': 'amount',
        'prev_realised_pnl': 'prevRealisedPnl',
        'gross_comm': 'grossComm',
        'gross_open_cost': 'grossOpenCost',
        'gross_open_premium': 'grossOpenPremium',
        'gross_exec_cost': 'grossExecCost',
        'gross_mark_value': 'grossMarkValue',
        'risk_value': 'riskValue',
        'init_margin': 'initMargin',
        'maint_margin': 'maintMargin',
        'target_excess_margin': 'targetExcessMargin',
        'realised_pnl': 'realisedPnl',
        'unrealised_pnl': 'unrealisedPnl',
        'wallet_balance': 'walletBalance',
        'margin_balance': 'marginBalance',
        'margin_leverage': 'marginLeverage',
        'margin_used_pcnt': 'marginUsedPcnt',
        'excess_margin': 'excessMargin',
        'available_margin': 'availableMargin',
        'withdrawable_margin': 'withdrawableMargin',
        'maker_fee_discount': 'makerFeeDiscount',
        'taker_fee_discount': 'takerFeeDiscount',
        'timestamp': 'timestamp'
    }

    def __init__(self, account=None, currency=None, risk_limit=None, state=None, amount=None, prev_realised_pnl=None, gross_comm=None, gross_open_cost=None, gross_open_premium=None, gross_exec_cost=None, gross_mark_value=None, risk_value=None, init_margin=None, maint_margin=None, target_excess_margin=None, realised_pnl=None, unrealised_pnl=None, wallet_balance=None, margin_balance=None, margin_leverage=0.0, margin_used_pcnt=0.0, excess_margin=None, available_margin=None, withdrawable_margin=None, maker_fee_discount=0.0, taker_fee_discount=0.0, timestamp=None, _configuration=None):  # noqa: E501
        """Margin - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account = None
        self._currency = None
        self._risk_limit = None
        self._state = None
        self._amount = None
        self._prev_realised_pnl = None
        self._gross_comm = None
        self._gross_open_cost = None
        self._gross_open_premium = None
        self._gross_exec_cost = None
        self._gross_mark_value = None
        self._risk_value = None
        self._init_margin = None
        self._maint_margin = None
        self._target_excess_margin = None
        self._realised_pnl = None
        self._unrealised_pnl = None
        self._wallet_balance = None
        self._margin_balance = None
        self._margin_leverage = None
        self._margin_used_pcnt = None
        self._excess_margin = None
        self._available_margin = None
        self._withdrawable_margin = None
        self._maker_fee_discount = None
        self._taker_fee_discount = None
        self._timestamp = None
        self.discriminator = None

        self.account = account
        self.currency = currency
        if risk_limit is not None:
            self.risk_limit = risk_limit
        if state is not None:
            self.state = state
        if amount is not None:
            self.amount = amount
        if prev_realised_pnl is not None:
            self.prev_realised_pnl = prev_realised_pnl
        if gross_comm is not None:
            self.gross_comm = gross_comm
        if gross_open_cost is not None:
            self.gross_open_cost = gross_open_cost
        if gross_open_premium is not None:
            self.gross_open_premium = gross_open_premium
        if gross_exec_cost is not None:
            self.gross_exec_cost = gross_exec_cost
        if gross_mark_value is not None:
            self.gross_mark_value = gross_mark_value
        if risk_value is not None:
            self.risk_value = risk_value
        if init_margin is not None:
            self.init_margin = init_margin
        if maint_margin is not None:
            self.maint_margin = maint_margin
        if target_excess_margin is not None:
            self.target_excess_margin = target_excess_margin
        if realised_pnl is not None:
            self.realised_pnl = realised_pnl
        if unrealised_pnl is not None:
            self.unrealised_pnl = unrealised_pnl
        if wallet_balance is not None:
            self.wallet_balance = wallet_balance
        if margin_balance is not None:
            self.margin_balance = margin_balance
        if margin_leverage is not None:
            self.margin_leverage = margin_leverage
        if margin_used_pcnt is not None:
            self.margin_used_pcnt = margin_used_pcnt
        if excess_margin is not None:
            self.excess_margin = excess_margin
        if available_margin is not None:
            self.available_margin = available_margin
        if withdrawable_margin is not None:
            self.withdrawable_margin = withdrawable_margin
        if maker_fee_discount is not None:
            self.maker_fee_discount = maker_fee_discount
        if taker_fee_discount is not None:
            self.taker_fee_discount = taker_fee_discount
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def account(self):
        """Gets the account of this Margin.  # noqa: E501


        :return: The account of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Margin.


        :param account: The account of this Margin.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def currency(self):
        """Gets the currency of this Margin.  # noqa: E501


        :return: The currency of this Margin.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Margin.


        :param currency: The currency of this Margin.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def risk_limit(self):
        """Gets the risk_limit of this Margin.  # noqa: E501


        :return: The risk_limit of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._risk_limit

    @risk_limit.setter
    def risk_limit(self, risk_limit):
        """Sets the risk_limit of this Margin.


        :param risk_limit: The risk_limit of this Margin.  # noqa: E501
        :type: float
        """

        self._risk_limit = risk_limit

    @property
    def state(self):
        """Gets the state of this Margin.  # noqa: E501


        :return: The state of this Margin.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Margin.


        :param state: The state of this Margin.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def amount(self):
        """Gets the amount of this Margin.  # noqa: E501


        :return: The amount of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Margin.


        :param amount: The amount of this Margin.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def prev_realised_pnl(self):
        """Gets the prev_realised_pnl of this Margin.  # noqa: E501


        :return: The prev_realised_pnl of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._prev_realised_pnl

    @prev_realised_pnl.setter
    def prev_realised_pnl(self, prev_realised_pnl):
        """Sets the prev_realised_pnl of this Margin.


        :param prev_realised_pnl: The prev_realised_pnl of this Margin.  # noqa: E501
        :type: float
        """

        self._prev_realised_pnl = prev_realised_pnl

    @property
    def gross_comm(self):
        """Gets the gross_comm of this Margin.  # noqa: E501


        :return: The gross_comm of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._gross_comm

    @gross_comm.setter
    def gross_comm(self, gross_comm):
        """Sets the gross_comm of this Margin.


        :param gross_comm: The gross_comm of this Margin.  # noqa: E501
        :type: float
        """

        self._gross_comm = gross_comm

    @property
    def gross_open_cost(self):
        """Gets the gross_open_cost of this Margin.  # noqa: E501


        :return: The gross_open_cost of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._gross_open_cost

    @gross_open_cost.setter
    def gross_open_cost(self, gross_open_cost):
        """Sets the gross_open_cost of this Margin.


        :param gross_open_cost: The gross_open_cost of this Margin.  # noqa: E501
        :type: float
        """

        self._gross_open_cost = gross_open_cost

    @property
    def gross_open_premium(self):
        """Gets the gross_open_premium of this Margin.  # noqa: E501


        :return: The gross_open_premium of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._gross_open_premium

    @gross_open_premium.setter
    def gross_open_premium(self, gross_open_premium):
        """Sets the gross_open_premium of this Margin.


        :param gross_open_premium: The gross_open_premium of this Margin.  # noqa: E501
        :type: float
        """

        self._gross_open_premium = gross_open_premium

    @property
    def gross_exec_cost(self):
        """Gets the gross_exec_cost of this Margin.  # noqa: E501


        :return: The gross_exec_cost of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._gross_exec_cost

    @gross_exec_cost.setter
    def gross_exec_cost(self, gross_exec_cost):
        """Sets the gross_exec_cost of this Margin.


        :param gross_exec_cost: The gross_exec_cost of this Margin.  # noqa: E501
        :type: float
        """

        self._gross_exec_cost = gross_exec_cost

    @property
    def gross_mark_value(self):
        """Gets the gross_mark_value of this Margin.  # noqa: E501


        :return: The gross_mark_value of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._gross_mark_value

    @gross_mark_value.setter
    def gross_mark_value(self, gross_mark_value):
        """Sets the gross_mark_value of this Margin.


        :param gross_mark_value: The gross_mark_value of this Margin.  # noqa: E501
        :type: float
        """

        self._gross_mark_value = gross_mark_value

    @property
    def risk_value(self):
        """Gets the risk_value of this Margin.  # noqa: E501


        :return: The risk_value of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._risk_value

    @risk_value.setter
    def risk_value(self, risk_value):
        """Sets the risk_value of this Margin.


        :param risk_value: The risk_value of this Margin.  # noqa: E501
        :type: float
        """

        self._risk_value = risk_value

    @property
    def init_margin(self):
        """Gets the init_margin of this Margin.  # noqa: E501


        :return: The init_margin of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._init_margin

    @init_margin.setter
    def init_margin(self, init_margin):
        """Sets the init_margin of this Margin.


        :param init_margin: The init_margin of this Margin.  # noqa: E501
        :type: float
        """

        self._init_margin = init_margin

    @property
    def maint_margin(self):
        """Gets the maint_margin of this Margin.  # noqa: E501


        :return: The maint_margin of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._maint_margin

    @maint_margin.setter
    def maint_margin(self, maint_margin):
        """Sets the maint_margin of this Margin.


        :param maint_margin: The maint_margin of this Margin.  # noqa: E501
        :type: float
        """

        self._maint_margin = maint_margin

    @property
    def target_excess_margin(self):
        """Gets the target_excess_margin of this Margin.  # noqa: E501


        :return: The target_excess_margin of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._target_excess_margin

    @target_excess_margin.setter
    def target_excess_margin(self, target_excess_margin):
        """Sets the target_excess_margin of this Margin.


        :param target_excess_margin: The target_excess_margin of this Margin.  # noqa: E501
        :type: float
        """

        self._target_excess_margin = target_excess_margin

    @property
    def realised_pnl(self):
        """Gets the realised_pnl of this Margin.  # noqa: E501


        :return: The realised_pnl of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._realised_pnl

    @realised_pnl.setter
    def realised_pnl(self, realised_pnl):
        """Sets the realised_pnl of this Margin.


        :param realised_pnl: The realised_pnl of this Margin.  # noqa: E501
        :type: float
        """

        self._realised_pnl = realised_pnl

    @property
    def unrealised_pnl(self):
        """Gets the unrealised_pnl of this Margin.  # noqa: E501


        :return: The unrealised_pnl of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._unrealised_pnl

    @unrealised_pnl.setter
    def unrealised_pnl(self, unrealised_pnl):
        """Sets the unrealised_pnl of this Margin.


        :param unrealised_pnl: The unrealised_pnl of this Margin.  # noqa: E501
        :type: float
        """

        self._unrealised_pnl = unrealised_pnl

    @property
    def wallet_balance(self):
        """Gets the wallet_balance of this Margin.  # noqa: E501


        :return: The wallet_balance of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._wallet_balance

    @wallet_balance.setter
    def wallet_balance(self, wallet_balance):
        """Sets the wallet_balance of this Margin.


        :param wallet_balance: The wallet_balance of this Margin.  # noqa: E501
        :type: float
        """

        self._wallet_balance = wallet_balance

    @property
    def margin_balance(self):
        """Gets the margin_balance of this Margin.  # noqa: E501


        :return: The margin_balance of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._margin_balance

    @margin_balance.setter
    def margin_balance(self, margin_balance):
        """Sets the margin_balance of this Margin.


        :param margin_balance: The margin_balance of this Margin.  # noqa: E501
        :type: float
        """

        self._margin_balance = margin_balance

    @property
    def margin_leverage(self):
        """Gets the margin_leverage of this Margin.  # noqa: E501


        :return: The margin_leverage of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._margin_leverage

    @margin_leverage.setter
    def margin_leverage(self, margin_leverage):
        """Sets the margin_leverage of this Margin.


        :param margin_leverage: The margin_leverage of this Margin.  # noqa: E501
        :type: float
        """

        self._margin_leverage = margin_leverage

    @property
    def margin_used_pcnt(self):
        """Gets the margin_used_pcnt of this Margin.  # noqa: E501


        :return: The margin_used_pcnt of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._margin_used_pcnt

    @margin_used_pcnt.setter
    def margin_used_pcnt(self, margin_used_pcnt):
        """Sets the margin_used_pcnt of this Margin.


        :param margin_used_pcnt: The margin_used_pcnt of this Margin.  # noqa: E501
        :type: float
        """

        self._margin_used_pcnt = margin_used_pcnt

    @property
    def excess_margin(self):
        """Gets the excess_margin of this Margin.  # noqa: E501


        :return: The excess_margin of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._excess_margin

    @excess_margin.setter
    def excess_margin(self, excess_margin):
        """Sets the excess_margin of this Margin.


        :param excess_margin: The excess_margin of this Margin.  # noqa: E501
        :type: float
        """

        self._excess_margin = excess_margin

    @property
    def available_margin(self):
        """Gets the available_margin of this Margin.  # noqa: E501


        :return: The available_margin of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._available_margin

    @available_margin.setter
    def available_margin(self, available_margin):
        """Sets the available_margin of this Margin.


        :param available_margin: The available_margin of this Margin.  # noqa: E501
        :type: float
        """

        self._available_margin = available_margin

    @property
    def withdrawable_margin(self):
        """Gets the withdrawable_margin of this Margin.  # noqa: E501


        :return: The withdrawable_margin of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._withdrawable_margin

    @withdrawable_margin.setter
    def withdrawable_margin(self, withdrawable_margin):
        """Sets the withdrawable_margin of this Margin.


        :param withdrawable_margin: The withdrawable_margin of this Margin.  # noqa: E501
        :type: float
        """

        self._withdrawable_margin = withdrawable_margin

    @property
    def maker_fee_discount(self):
        """Gets the maker_fee_discount of this Margin.  # noqa: E501


        :return: The maker_fee_discount of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._maker_fee_discount

    @maker_fee_discount.setter
    def maker_fee_discount(self, maker_fee_discount):
        """Sets the maker_fee_discount of this Margin.


        :param maker_fee_discount: The maker_fee_discount of this Margin.  # noqa: E501
        :type: float
        """

        self._maker_fee_discount = maker_fee_discount

    @property
    def taker_fee_discount(self):
        """Gets the taker_fee_discount of this Margin.  # noqa: E501


        :return: The taker_fee_discount of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._taker_fee_discount

    @taker_fee_discount.setter
    def taker_fee_discount(self, taker_fee_discount):
        """Sets the taker_fee_discount of this Margin.


        :param taker_fee_discount: The taker_fee_discount of this Margin.  # noqa: E501
        :type: float
        """

        self._taker_fee_discount = taker_fee_discount

    @property
    def timestamp(self):
        """Gets the timestamp of this Margin.  # noqa: E501


        :return: The timestamp of this Margin.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Margin.


        :param timestamp: The timestamp of this Margin.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Margin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Margin):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Margin):
            return True

        return self.to_dict() != other.to_dict()
