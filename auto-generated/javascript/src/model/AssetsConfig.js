/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AssetsConfigNetworkItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AssetsConfigNetworkItem'));
  } else {
    // Browser globals (root is window)
    if (!root.BitMexApi) {
      root.BitMexApi = {};
    }
    root.BitMexApi.AssetsConfig = factory(root.BitMexApi.ApiClient, root.BitMexApi.AssetsConfigNetworkItem);
  }
}(this, function(ApiClient, AssetsConfigNetworkItem) {
  'use strict';

  /**
   * The AssetsConfig model module.
   * @module model/AssetsConfig
   * @version 1.2.0
   */

  /**
   * Constructs a new <code>AssetsConfig</code>.
   * @alias module:model/AssetsConfig
   * @class
   * @param asset {String} 
   */
  var exports = function(asset) {
    this.asset = asset;
  };

  /**
   * Constructs a <code>AssetsConfig</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AssetsConfig} obj Optional instance to populate.
   * @return {module:model/AssetsConfig} The populated <code>AssetsConfig</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('asset'))
        obj.asset = ApiClient.convertToType(data['asset'], 'String');
      if (data.hasOwnProperty('currency'))
        obj.currency = ApiClient.convertToType(data['currency'], 'String');
      if (data.hasOwnProperty('majorCurrency'))
        obj.majorCurrency = ApiClient.convertToType(data['majorCurrency'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('currencyType'))
        obj.currencyType = ApiClient.convertToType(data['currencyType'], 'String');
      if (data.hasOwnProperty('scale'))
        obj.scale = ApiClient.convertToType(data['scale'], 'Number');
      if (data.hasOwnProperty('enabled'))
        obj.enabled = ApiClient.convertToType(data['enabled'], 'Boolean');
      if (data.hasOwnProperty('isMarginCurrency'))
        obj.isMarginCurrency = ApiClient.convertToType(data['isMarginCurrency'], 'Boolean');
      if (data.hasOwnProperty('networks'))
        obj.networks = ApiClient.convertToType(data['networks'], [AssetsConfigNetworkItem]);
    }
    return obj;
  }

  /**
   * @member {String} asset
   * @default 'XBT'
   */
  exports.prototype.asset = 'XBT';

  /**
   * @member {String} currency
   * @default 'XBt'
   */
  exports.prototype.currency = 'XBt';

  /**
   * @member {String} majorCurrency
   * @default 'XBT'
   */
  exports.prototype.majorCurrency = 'XBT';

  /**
   * @member {String} name
   * @default 'Bitcoin'
   */
  exports.prototype.name = 'Bitcoin';

  /**
   * @member {String} currencyType
   * @default 'Crypto'
   */
  exports.prototype.currencyType = 'Crypto';

  /**
   * @member {Number} scale
   * @default 8.0
   */
  exports.prototype.scale = 8.0;

  /**
   * @member {Boolean} enabled
   * @default true
   */
  exports.prototype.enabled = true;

  /**
   * @member {Boolean} isMarginCurrency
   * @default true
   */
  exports.prototype.isMarginCurrency = true;

  /**
   * @member {Array.<module:model/AssetsConfigNetworkItem>} networks
   */
  exports.prototype.networks = undefined;


  return exports;

}));
