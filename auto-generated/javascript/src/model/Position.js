/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BitMexApi) {
      root.BitMexApi = {};
    }
    root.BitMexApi.Position = factory(root.BitMexApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The Position model module.
   * @module model/Position
   * @version 1.2.0
   */

  /**
   * Constructs a new <code>Position</code>.
   * Summary of Open and Closed Positions
   * @alias module:model/Position
   * @class
   * @param account {Number} 
   * @param symbol {String} 
   */
  var exports = function(account, symbol) {
    this.account = account;
    this.symbol = symbol;
  };

  /**
   * Constructs a <code>Position</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Position} obj Optional instance to populate.
   * @return {module:model/Position} The populated <code>Position</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('account'))
        obj.account = ApiClient.convertToType(data['account'], 'Number');
      if (data.hasOwnProperty('symbol'))
        obj.symbol = ApiClient.convertToType(data['symbol'], 'String');
      if (data.hasOwnProperty('currency'))
        obj.currency = ApiClient.convertToType(data['currency'], 'String');
      if (data.hasOwnProperty('underlying'))
        obj.underlying = ApiClient.convertToType(data['underlying'], 'String');
      if (data.hasOwnProperty('quoteCurrency'))
        obj.quoteCurrency = ApiClient.convertToType(data['quoteCurrency'], 'String');
      if (data.hasOwnProperty('commission'))
        obj.commission = ApiClient.convertToType(data['commission'], 'Number');
      if (data.hasOwnProperty('initMarginReq'))
        obj.initMarginReq = ApiClient.convertToType(data['initMarginReq'], 'Number');
      if (data.hasOwnProperty('maintMarginReq'))
        obj.maintMarginReq = ApiClient.convertToType(data['maintMarginReq'], 'Number');
      if (data.hasOwnProperty('riskLimit'))
        obj.riskLimit = ApiClient.convertToType(data['riskLimit'], 'Number');
      if (data.hasOwnProperty('leverage'))
        obj.leverage = ApiClient.convertToType(data['leverage'], 'Number');
      if (data.hasOwnProperty('crossMargin'))
        obj.crossMargin = ApiClient.convertToType(data['crossMargin'], 'Boolean');
      if (data.hasOwnProperty('deleveragePercentile'))
        obj.deleveragePercentile = ApiClient.convertToType(data['deleveragePercentile'], 'Number');
      if (data.hasOwnProperty('rebalancedPnl'))
        obj.rebalancedPnl = ApiClient.convertToType(data['rebalancedPnl'], 'Number');
      if (data.hasOwnProperty('prevRealisedPnl'))
        obj.prevRealisedPnl = ApiClient.convertToType(data['prevRealisedPnl'], 'Number');
      if (data.hasOwnProperty('prevUnrealisedPnl'))
        obj.prevUnrealisedPnl = ApiClient.convertToType(data['prevUnrealisedPnl'], 'Number');
      if (data.hasOwnProperty('openingQty'))
        obj.openingQty = ApiClient.convertToType(data['openingQty'], 'Number');
      if (data.hasOwnProperty('openOrderBuyQty'))
        obj.openOrderBuyQty = ApiClient.convertToType(data['openOrderBuyQty'], 'Number');
      if (data.hasOwnProperty('openOrderBuyCost'))
        obj.openOrderBuyCost = ApiClient.convertToType(data['openOrderBuyCost'], 'Number');
      if (data.hasOwnProperty('openOrderBuyPremium'))
        obj.openOrderBuyPremium = ApiClient.convertToType(data['openOrderBuyPremium'], 'Number');
      if (data.hasOwnProperty('openOrderSellQty'))
        obj.openOrderSellQty = ApiClient.convertToType(data['openOrderSellQty'], 'Number');
      if (data.hasOwnProperty('openOrderSellCost'))
        obj.openOrderSellCost = ApiClient.convertToType(data['openOrderSellCost'], 'Number');
      if (data.hasOwnProperty('openOrderSellPremium'))
        obj.openOrderSellPremium = ApiClient.convertToType(data['openOrderSellPremium'], 'Number');
      if (data.hasOwnProperty('currentQty'))
        obj.currentQty = ApiClient.convertToType(data['currentQty'], 'Number');
      if (data.hasOwnProperty('currentCost'))
        obj.currentCost = ApiClient.convertToType(data['currentCost'], 'Number');
      if (data.hasOwnProperty('currentComm'))
        obj.currentComm = ApiClient.convertToType(data['currentComm'], 'Number');
      if (data.hasOwnProperty('realisedCost'))
        obj.realisedCost = ApiClient.convertToType(data['realisedCost'], 'Number');
      if (data.hasOwnProperty('unrealisedCost'))
        obj.unrealisedCost = ApiClient.convertToType(data['unrealisedCost'], 'Number');
      if (data.hasOwnProperty('grossOpenPremium'))
        obj.grossOpenPremium = ApiClient.convertToType(data['grossOpenPremium'], 'Number');
      if (data.hasOwnProperty('isOpen'))
        obj.isOpen = ApiClient.convertToType(data['isOpen'], 'Boolean');
      if (data.hasOwnProperty('markPrice'))
        obj.markPrice = ApiClient.convertToType(data['markPrice'], 'Number');
      if (data.hasOwnProperty('markValue'))
        obj.markValue = ApiClient.convertToType(data['markValue'], 'Number');
      if (data.hasOwnProperty('riskValue'))
        obj.riskValue = ApiClient.convertToType(data['riskValue'], 'Number');
      if (data.hasOwnProperty('homeNotional'))
        obj.homeNotional = ApiClient.convertToType(data['homeNotional'], 'Number');
      if (data.hasOwnProperty('foreignNotional'))
        obj.foreignNotional = ApiClient.convertToType(data['foreignNotional'], 'Number');
      if (data.hasOwnProperty('posState'))
        obj.posState = ApiClient.convertToType(data['posState'], 'String');
      if (data.hasOwnProperty('posCost'))
        obj.posCost = ApiClient.convertToType(data['posCost'], 'Number');
      if (data.hasOwnProperty('posCross'))
        obj.posCross = ApiClient.convertToType(data['posCross'], 'Number');
      if (data.hasOwnProperty('posComm'))
        obj.posComm = ApiClient.convertToType(data['posComm'], 'Number');
      if (data.hasOwnProperty('posLoss'))
        obj.posLoss = ApiClient.convertToType(data['posLoss'], 'Number');
      if (data.hasOwnProperty('posMargin'))
        obj.posMargin = ApiClient.convertToType(data['posMargin'], 'Number');
      if (data.hasOwnProperty('posMaint'))
        obj.posMaint = ApiClient.convertToType(data['posMaint'], 'Number');
      if (data.hasOwnProperty('initMargin'))
        obj.initMargin = ApiClient.convertToType(data['initMargin'], 'Number');
      if (data.hasOwnProperty('maintMargin'))
        obj.maintMargin = ApiClient.convertToType(data['maintMargin'], 'Number');
      if (data.hasOwnProperty('realisedPnl'))
        obj.realisedPnl = ApiClient.convertToType(data['realisedPnl'], 'Number');
      if (data.hasOwnProperty('unrealisedPnl'))
        obj.unrealisedPnl = ApiClient.convertToType(data['unrealisedPnl'], 'Number');
      if (data.hasOwnProperty('unrealisedPnlPcnt'))
        obj.unrealisedPnlPcnt = ApiClient.convertToType(data['unrealisedPnlPcnt'], 'Number');
      if (data.hasOwnProperty('unrealisedRoePcnt'))
        obj.unrealisedRoePcnt = ApiClient.convertToType(data['unrealisedRoePcnt'], 'Number');
      if (data.hasOwnProperty('avgCostPrice'))
        obj.avgCostPrice = ApiClient.convertToType(data['avgCostPrice'], 'Number');
      if (data.hasOwnProperty('avgEntryPrice'))
        obj.avgEntryPrice = ApiClient.convertToType(data['avgEntryPrice'], 'Number');
      if (data.hasOwnProperty('breakEvenPrice'))
        obj.breakEvenPrice = ApiClient.convertToType(data['breakEvenPrice'], 'Number');
      if (data.hasOwnProperty('marginCallPrice'))
        obj.marginCallPrice = ApiClient.convertToType(data['marginCallPrice'], 'Number');
      if (data.hasOwnProperty('liquidationPrice'))
        obj.liquidationPrice = ApiClient.convertToType(data['liquidationPrice'], 'Number');
      if (data.hasOwnProperty('bankruptPrice'))
        obj.bankruptPrice = ApiClient.convertToType(data['bankruptPrice'], 'Number');
      if (data.hasOwnProperty('timestamp'))
        obj.timestamp = ApiClient.convertToType(data['timestamp'], 'Date');
    }
    return obj;
  }

  /**
   * @member {Number} account
   */
  exports.prototype.account = undefined;

  /**
   * @member {String} symbol
   */
  exports.prototype.symbol = undefined;

  /**
   * @member {String} currency
   */
  exports.prototype.currency = undefined;

  /**
   * @member {String} underlying
   */
  exports.prototype.underlying = undefined;

  /**
   * @member {String} quoteCurrency
   */
  exports.prototype.quoteCurrency = undefined;

  /**
   * @member {Number} commission
   * @default 0.0
   */
  exports.prototype.commission = 0.0;

  /**
   * @member {Number} initMarginReq
   * @default 0.0
   */
  exports.prototype.initMarginReq = 0.0;

  /**
   * @member {Number} maintMarginReq
   * @default 0.0
   */
  exports.prototype.maintMarginReq = 0.0;

  /**
   * @member {Number} riskLimit
   */
  exports.prototype.riskLimit = undefined;

  /**
   * @member {Number} leverage
   * @default 0.0
   */
  exports.prototype.leverage = 0.0;

  /**
   * @member {Boolean} crossMargin
   */
  exports.prototype.crossMargin = undefined;

  /**
   * @member {Number} deleveragePercentile
   * @default 0.0
   */
  exports.prototype.deleveragePercentile = 0.0;

  /**
   * @member {Number} rebalancedPnl
   */
  exports.prototype.rebalancedPnl = undefined;

  /**
   * @member {Number} prevRealisedPnl
   */
  exports.prototype.prevRealisedPnl = undefined;

  /**
   * @member {Number} prevUnrealisedPnl
   */
  exports.prototype.prevUnrealisedPnl = undefined;

  /**
   * @member {Number} openingQty
   */
  exports.prototype.openingQty = undefined;

  /**
   * @member {Number} openOrderBuyQty
   */
  exports.prototype.openOrderBuyQty = undefined;

  /**
   * @member {Number} openOrderBuyCost
   */
  exports.prototype.openOrderBuyCost = undefined;

  /**
   * @member {Number} openOrderBuyPremium
   */
  exports.prototype.openOrderBuyPremium = undefined;

  /**
   * @member {Number} openOrderSellQty
   */
  exports.prototype.openOrderSellQty = undefined;

  /**
   * @member {Number} openOrderSellCost
   */
  exports.prototype.openOrderSellCost = undefined;

  /**
   * @member {Number} openOrderSellPremium
   */
  exports.prototype.openOrderSellPremium = undefined;

  /**
   * @member {Number} currentQty
   */
  exports.prototype.currentQty = undefined;

  /**
   * @member {Number} currentCost
   */
  exports.prototype.currentCost = undefined;

  /**
   * @member {Number} currentComm
   */
  exports.prototype.currentComm = undefined;

  /**
   * @member {Number} realisedCost
   */
  exports.prototype.realisedCost = undefined;

  /**
   * @member {Number} unrealisedCost
   */
  exports.prototype.unrealisedCost = undefined;

  /**
   * @member {Number} grossOpenPremium
   */
  exports.prototype.grossOpenPremium = undefined;

  /**
   * @member {Boolean} isOpen
   */
  exports.prototype.isOpen = undefined;

  /**
   * @member {Number} markPrice
   * @default 0.0
   */
  exports.prototype.markPrice = 0.0;

  /**
   * @member {Number} markValue
   */
  exports.prototype.markValue = undefined;

  /**
   * @member {Number} riskValue
   */
  exports.prototype.riskValue = undefined;

  /**
   * @member {Number} homeNotional
   * @default 0.0
   */
  exports.prototype.homeNotional = 0.0;

  /**
   * @member {Number} foreignNotional
   * @default 0.0
   */
  exports.prototype.foreignNotional = 0.0;

  /**
   * @member {String} posState
   */
  exports.prototype.posState = undefined;

  /**
   * @member {Number} posCost
   */
  exports.prototype.posCost = undefined;

  /**
   * @member {Number} posCross
   */
  exports.prototype.posCross = undefined;

  /**
   * @member {Number} posComm
   */
  exports.prototype.posComm = undefined;

  /**
   * @member {Number} posLoss
   */
  exports.prototype.posLoss = undefined;

  /**
   * @member {Number} posMargin
   */
  exports.prototype.posMargin = undefined;

  /**
   * @member {Number} posMaint
   */
  exports.prototype.posMaint = undefined;

  /**
   * @member {Number} initMargin
   */
  exports.prototype.initMargin = undefined;

  /**
   * @member {Number} maintMargin
   */
  exports.prototype.maintMargin = undefined;

  /**
   * @member {Number} realisedPnl
   */
  exports.prototype.realisedPnl = undefined;

  /**
   * @member {Number} unrealisedPnl
   */
  exports.prototype.unrealisedPnl = undefined;

  /**
   * @member {Number} unrealisedPnlPcnt
   * @default 0.0
   */
  exports.prototype.unrealisedPnlPcnt = 0.0;

  /**
   * @member {Number} unrealisedRoePcnt
   * @default 0.0
   */
  exports.prototype.unrealisedRoePcnt = 0.0;

  /**
   * @member {Number} avgCostPrice
   * @default 0.0
   */
  exports.prototype.avgCostPrice = 0.0;

  /**
   * @member {Number} avgEntryPrice
   * @default 0.0
   */
  exports.prototype.avgEntryPrice = 0.0;

  /**
   * @member {Number} breakEvenPrice
   * @default 0.0
   */
  exports.prototype.breakEvenPrice = 0.0;

  /**
   * @member {Number} marginCallPrice
   * @default 0.0
   */
  exports.prototype.marginCallPrice = 0.0;

  /**
   * @member {Number} liquidationPrice
   * @default 0.0
   */
  exports.prototype.liquidationPrice = 0.0;

  /**
   * @member {Number} bankruptPrice
   * @default 0.0
   */
  exports.prototype.bankruptPrice = 0.0;

  /**
   * @member {Date} timestamp
   */
  exports.prototype.timestamp = undefined;


  return exports;

}));
