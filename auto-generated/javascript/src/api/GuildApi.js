/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Guild', 'model/XAny'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Guild'), require('../model/XAny'));
  } else {
    // Browser globals (root is window)
    if (!root.BitMexApi) {
      root.BitMexApi = {};
    }
    root.BitMexApi.GuildApi = factory(root.BitMexApi.ApiClient, root.BitMexApi.Error, root.BitMexApi.Guild, root.BitMexApi.XAny);
  }
}(this, function(ApiClient, Error, Guild, XAny) {
  'use strict';

  /**
   * Guild service.
   * @module api/GuildApi
   * @version 1.2.0
   */

  /**
   * Constructs a new GuildApi. 
   * @alias module:api/GuildApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the guildArchive operation.
     * @callback module:api/GuildApi~guildArchiveCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive a guild
     * @param {module:api/GuildApi~guildArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.guildArchive = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiExpires', 'apiKey', 'apiSignature'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/guild/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the guildEdit operation.
     * @callback module:api/GuildApi~guildEditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Guild} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit guild new guild
     * @param {String} name Name of the guild, must be unique, must be at least 5 characters
     * @param {String} emoji Emoji name.
     * @param {Number} potDistributionPercent How much of the pot should be distributed to the guild members, must be between 0 and 100
     * @param {String} potDistributionType How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM
     * @param {Object} opts Optional parameters
     * @param {Number} opts.potTraderId User ID of the guild member with order write permission for the pot
     * @param {String} opts.description Guild description, can be used to explain the guild to other users.
     * @param {String} opts.twitter Guild twitter handle.
     * @param {String} opts.discord Guild discord link.
     * @param {String} opts.imgUrl URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used
     * @param {Boolean} opts.isPrivate Guild privacy status
     * @param {module:api/GuildApi~guildEditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Guild}
     */
    this.guildEdit = function(name, emoji, potDistributionPercent, potDistributionType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling guildEdit");
      }

      // verify the required parameter 'emoji' is set
      if (emoji === undefined || emoji === null) {
        throw new Error("Missing the required parameter 'emoji' when calling guildEdit");
      }

      // verify the required parameter 'potDistributionPercent' is set
      if (potDistributionPercent === undefined || potDistributionPercent === null) {
        throw new Error("Missing the required parameter 'potDistributionPercent' when calling guildEdit");
      }

      // verify the required parameter 'potDistributionType' is set
      if (potDistributionType === undefined || potDistributionType === null) {
        throw new Error("Missing the required parameter 'potDistributionType' when calling guildEdit");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': name,
        'emoji': emoji,
        'potDistributionPercent': potDistributionPercent,
        'potDistributionType': potDistributionType,
        'potTraderId': opts['potTraderId'],
        'description': opts['description'],
        'twitter': opts['twitter'],
        'discord': opts['discord'],
        'imgUrl': opts['imgUrl'],
        'isPrivate': opts['isPrivate']
      };

      var authNames = ['apiExpires', 'apiKey', 'apiSignature'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Guild;

      return this.apiClient.callApi(
        '/guild', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the guildGet operation.
     * @callback module:api/GuildApi~guildGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/XAny>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all guilds
     * @param {module:api/GuildApi~guildGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/XAny>}
     */
    this.guildGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = [XAny];

      return this.apiClient.callApi(
        '/guild', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the guildJoin operation.
     * @callback module:api/GuildApi~guildJoinCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request to Join a private guild or join a public guild
     * @param {String} code 
     * @param {module:api/GuildApi~guildJoinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.guildJoin = function(code, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling guildJoin");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'code': code
      };

      var authNames = ['apiExpires', 'apiKey', 'apiSignature'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/guild/join', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the guildKick operation.
     * @callback module:api/GuildApi~guildKickCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Kick member from guild
     * @param {Number} memberUserId 
     * @param {module:api/GuildApi~guildKickCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.guildKick = function(memberUserId, callback) {
      var postBody = null;

      // verify the required parameter 'memberUserId' is set
      if (memberUserId === undefined || memberUserId === null) {
        throw new Error("Missing the required parameter 'memberUserId' when calling guildKick");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'memberUserId': memberUserId
      };

      var authNames = ['apiExpires', 'apiKey', 'apiSignature'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/guild/kick', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the guildLeave operation.
     * @callback module:api/GuildApi~guildLeaveCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Leave guild or cancel guild join request
     * @param {module:api/GuildApi~guildLeaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.guildLeave = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiExpires', 'apiKey', 'apiSignature'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/guild/leave', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the guildNew operation.
     * @callback module:api/GuildApi~guildNewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Guild} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new guild
     * @param {String} name Name of the guild, must be unique, must be at least 5 characters
     * @param {String} emoji Emoji name.
     * @param {Number} potDistributionPercent How much of the pot should be distributed to the guild members, must be between 0 and 100
     * @param {String} potDistributionType How the pot should be distributed to the guild members, must be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE, TOP_3_BY_ADV,TOP_5_BY_ADV,TOP_10_BY_ADV, RANDOM
     * @param {Object} opts Optional parameters
     * @param {String} opts.description Guild description, can be used to explain the guild to other users.
     * @param {String} opts.twitter Guild twitter handle.
     * @param {String} opts.discord Guild discord link.
     * @param {String} opts.imgUrl URL for the profile image of the guild, is used by clients to add some color to the guild, if no image is provided, a default image is used
     * @param {Boolean} opts.isPrivate Guild privacy status
     * @param {module:api/GuildApi~guildNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Guild}
     */
    this.guildNew = function(name, emoji, potDistributionPercent, potDistributionType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling guildNew");
      }

      // verify the required parameter 'emoji' is set
      if (emoji === undefined || emoji === null) {
        throw new Error("Missing the required parameter 'emoji' when calling guildNew");
      }

      // verify the required parameter 'potDistributionPercent' is set
      if (potDistributionPercent === undefined || potDistributionPercent === null) {
        throw new Error("Missing the required parameter 'potDistributionPercent' when calling guildNew");
      }

      // verify the required parameter 'potDistributionType' is set
      if (potDistributionType === undefined || potDistributionType === null) {
        throw new Error("Missing the required parameter 'potDistributionType' when calling guildNew");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': name,
        'emoji': emoji,
        'potDistributionPercent': potDistributionPercent,
        'potDistributionType': potDistributionType,
        'description': opts['description'],
        'twitter': opts['twitter'],
        'discord': opts['discord'],
        'imgUrl': opts['imgUrl'],
        'isPrivate': opts['isPrivate']
      };

      var authNames = ['apiExpires', 'apiKey', 'apiSignature'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Guild;

      return this.apiClient.callApi(
        '/guild', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the guildShareTrades operation.
     * @callback module:api/GuildApi~guildShareTradesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Toggle share trades for your account, which controls whether your guild members can see your orders and positions in their UI
     * @param {Boolean} shareTrades 
     * @param {module:api/GuildApi~guildShareTradesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.guildShareTrades = function(shareTrades, callback) {
      var postBody = null;

      // verify the required parameter 'shareTrades' is set
      if (shareTrades === undefined || shareTrades === null) {
        throw new Error("Missing the required parameter 'shareTrades' when calling guildShareTrades");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'shareTrades': shareTrades
      };

      var authNames = ['apiExpires', 'apiKey', 'apiSignature'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/guild/shareTrades', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
