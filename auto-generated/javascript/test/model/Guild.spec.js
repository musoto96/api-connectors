/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Guild', function() {
      beforeEach(function() {
        instance = new BitMexApi.Guild();
      });

      it('should create an instance of Guild', function() {
        // TODO: update the code to test Guild
        expect(instance).to.be.a(BitMexApi.Guild);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property updated (base name: "updated")', function() {
        // TODO: update the code to test the property updated
        expect(instance).to.have.property('updated');
        // expect(instance.updated).to.be(expectedValueLiteral);
      });

      it('should have the property archived (base name: "archived")', function() {
        // TODO: update the code to test the property archived
        expect(instance).to.have.property('archived');
        // expect(instance.archived).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property imgUrl (base name: "imgUrl")', function() {
        // TODO: update the code to test the property imgUrl
        expect(instance).to.have.property('imgUrl');
        // expect(instance.imgUrl).to.be(expectedValueLiteral);
      });

      it('should have the property mobileHeroImgUrl (base name: "mobileHeroImgUrl")', function() {
        // TODO: update the code to test the property mobileHeroImgUrl
        expect(instance).to.have.property('mobileHeroImgUrl');
        // expect(instance.mobileHeroImgUrl).to.be(expectedValueLiteral);
      });

      it('should have the property emoji (base name: "emoji")', function() {
        // TODO: update the code to test the property emoji
        expect(instance).to.have.property('emoji');
        // expect(instance.emoji).to.be(expectedValueLiteral);
      });

      it('should have the property logoUrl (base name: "logoUrl")', function() {
        // TODO: update the code to test the property logoUrl
        expect(instance).to.have.property('logoUrl');
        // expect(instance.logoUrl).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property chatChannelId (base name: "chatChannelId")', function() {
        // TODO: update the code to test the property chatChannelId
        expect(instance).to.have.property('chatChannelId');
        // expect(instance.chatChannelId).to.be(expectedValueLiteral);
      });

      it('should have the property isPrivate (base name: "isPrivate")', function() {
        // TODO: update the code to test the property isPrivate
        expect(instance).to.have.property('isPrivate');
        // expect(instance.isPrivate).to.be(expectedValueLiteral);
      });

      it('should have the property affiliateId (base name: "affiliateId")', function() {
        // TODO: update the code to test the property affiliateId
        expect(instance).to.have.property('affiliateId');
        // expect(instance.affiliateId).to.be(expectedValueLiteral);
      });

      it('should have the property potDistributionPreferences (base name: "potDistributionPreferences")', function() {
        // TODO: update the code to test the property potDistributionPreferences
        expect(instance).to.have.property('potDistributionPreferences');
        // expect(instance.potDistributionPreferences).to.be(expectedValueLiteral);
      });

      it('should have the property socials (base name: "socials")', function() {
        // TODO: update the code to test the property socials
        expect(instance).to.have.property('socials');
        // expect(instance.socials).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

    });
  });

}));
