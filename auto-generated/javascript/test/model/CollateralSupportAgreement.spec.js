/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CollateralSupportAgreement', function() {
      beforeEach(function() {
        instance = new BitMexApi.CollateralSupportAgreement();
      });

      it('should create an instance of CollateralSupportAgreement', function() {
        // TODO: update the code to test CollateralSupportAgreement
        expect(instance).to.be.a(BitMexApi.CollateralSupportAgreement);
      });

      it('should have the property csaID (base name: "csaID")', function() {
        // TODO: update the code to test the property csaID
        expect(instance).to.have.property('csaID');
        // expect(instance.csaID).to.be(expectedValueLiteral);
      });

      it('should have the property account (base name: "account")', function() {
        // TODO: update the code to test the property account
        expect(instance).to.have.property('account');
        // expect(instance.account).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property minAmount (base name: "minAmount")', function() {
        // TODO: update the code to test the property minAmount
        expect(instance).to.have.property('minAmount');
        // expect(instance.minAmount).to.be(expectedValueLiteral);
      });

      it('should have the property threshold (base name: "threshold")', function() {
        // TODO: update the code to test the property threshold
        expect(instance).to.have.property('threshold');
        // expect(instance.threshold).to.be(expectedValueLiteral);
      });

      it('should have the property mmRatioMarginCall (base name: "mmRatioMarginCall")', function() {
        // TODO: update the code to test the property mmRatioMarginCall
        expect(instance).to.have.property('mmRatioMarginCall');
        // expect(instance.mmRatioMarginCall).to.be(expectedValueLiteral);
      });

      it('should have the property mmRatioLiquidation (base name: "mmRatioLiquidation")', function() {
        // TODO: update the code to test the property mmRatioLiquidation
        expect(instance).to.have.property('mmRatioLiquidation');
        // expect(instance.mmRatioLiquidation).to.be(expectedValueLiteral);
      });

      it('should have the property startTime (base name: "startTime")', function() {
        // TODO: update the code to test the property startTime
        expect(instance).to.have.property('startTime');
        // expect(instance.startTime).to.be(expectedValueLiteral);
      });

      it('should have the property maturityTime (base name: "maturityTime")', function() {
        // TODO: update the code to test the property maturityTime
        expect(instance).to.have.property('maturityTime');
        // expect(instance.maturityTime).to.be(expectedValueLiteral);
      });

      it('should have the property maturityInstruction (base name: "maturityInstruction")', function() {
        // TODO: update the code to test the property maturityInstruction
        expect(instance).to.have.property('maturityInstruction');
        // expect(instance.maturityInstruction).to.be(expectedValueLiteral);
      });

      it('should have the property csaStatus (base name: "csaStatus")', function() {
        // TODO: update the code to test the property csaStatus
        expect(instance).to.have.property('csaStatus');
        // expect(instance.csaStatus).to.be(expectedValueLiteral);
      });

      it('should have the property requester (base name: "requester")', function() {
        // TODO: update the code to test the property requester
        expect(instance).to.have.property('requester');
        // expect(instance.requester).to.be(expectedValueLiteral);
      });

      it('should have the property clientDetails (base name: "clientDetails")', function() {
        // TODO: update the code to test the property clientDetails
        expect(instance).to.have.property('clientDetails');
        // expect(instance.clientDetails).to.be(expectedValueLiteral);
      });

      it('should have the property text (base name: "text")', function() {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text');
        // expect(instance.text).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

    });
  });

}));
