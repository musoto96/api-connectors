/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UserPreferences', function() {
      beforeEach(function() {
        instance = new BitMexApi.UserPreferences();
      });

      it('should create an instance of UserPreferences', function() {
        // TODO: update the code to test UserPreferences
        expect(instance).to.be.a(BitMexApi.UserPreferences);
      });

      it('should have the property alertOnLiquidations (base name: "alertOnLiquidations")', function() {
        // TODO: update the code to test the property alertOnLiquidations
        expect(instance).to.have.property('alertOnLiquidations');
        // expect(instance.alertOnLiquidations).to.be(expectedValueLiteral);
      });

      it('should have the property animationsEnabled (base name: "animationsEnabled")', function() {
        // TODO: update the code to test the property animationsEnabled
        expect(instance).to.have.property('animationsEnabled');
        // expect(instance.animationsEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property announcementsLastSeen (base name: "announcementsLastSeen")', function() {
        // TODO: update the code to test the property announcementsLastSeen
        expect(instance).to.have.property('announcementsLastSeen');
        // expect(instance.announcementsLastSeen).to.be(expectedValueLiteral);
      });

      it('should have the property chatChannelID (base name: "chatChannelID")', function() {
        // TODO: update the code to test the property chatChannelID
        expect(instance).to.have.property('chatChannelID');
        // expect(instance.chatChannelID).to.be(expectedValueLiteral);
      });

      it('should have the property colorTheme (base name: "colorTheme")', function() {
        // TODO: update the code to test the property colorTheme
        expect(instance).to.have.property('colorTheme');
        // expect(instance.colorTheme).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property debug (base name: "debug")', function() {
        // TODO: update the code to test the property debug
        expect(instance).to.have.property('debug');
        // expect(instance.debug).to.be(expectedValueLiteral);
      });

      it('should have the property disableEmails (base name: "disableEmails")', function() {
        // TODO: update the code to test the property disableEmails
        expect(instance).to.have.property('disableEmails');
        // expect(instance.disableEmails).to.be(expectedValueLiteral);
      });

      it('should have the property disablePush (base name: "disablePush")', function() {
        // TODO: update the code to test the property disablePush
        expect(instance).to.have.property('disablePush');
        // expect(instance.disablePush).to.be(expectedValueLiteral);
      });

      it('should have the property displayCorpEnrollUpsell (base name: "displayCorpEnrollUpsell")', function() {
        // TODO: update the code to test the property displayCorpEnrollUpsell
        expect(instance).to.have.property('displayCorpEnrollUpsell');
        // expect(instance.displayCorpEnrollUpsell).to.be(expectedValueLiteral);
      });

      it('should have the property equivalentCurrency (base name: "equivalentCurrency")', function() {
        // TODO: update the code to test the property equivalentCurrency
        expect(instance).to.have.property('equivalentCurrency');
        // expect(instance.equivalentCurrency).to.be(expectedValueLiteral);
      });

      it('should have the property features (base name: "features")', function() {
        // TODO: update the code to test the property features
        expect(instance).to.have.property('features');
        // expect(instance.features).to.be(expectedValueLiteral);
      });

      it('should have the property favourites (base name: "favourites")', function() {
        // TODO: update the code to test the property favourites
        expect(instance).to.have.property('favourites');
        // expect(instance.favourites).to.be(expectedValueLiteral);
      });

      it('should have the property favouritesAssets (base name: "favouritesAssets")', function() {
        // TODO: update the code to test the property favouritesAssets
        expect(instance).to.have.property('favouritesAssets');
        // expect(instance.favouritesAssets).to.be(expectedValueLiteral);
      });

      it('should have the property favouritesOrdered (base name: "favouritesOrdered")', function() {
        // TODO: update the code to test the property favouritesOrdered
        expect(instance).to.have.property('favouritesOrdered');
        // expect(instance.favouritesOrdered).to.be(expectedValueLiteral);
      });

      it('should have the property hideConfirmDialogs (base name: "hideConfirmDialogs")', function() {
        // TODO: update the code to test the property hideConfirmDialogs
        expect(instance).to.have.property('hideConfirmDialogs');
        // expect(instance.hideConfirmDialogs).to.be(expectedValueLiteral);
      });

      it('should have the property hideConnectionModal (base name: "hideConnectionModal")', function() {
        // TODO: update the code to test the property hideConnectionModal
        expect(instance).to.have.property('hideConnectionModal');
        // expect(instance.hideConnectionModal).to.be(expectedValueLiteral);
      });

      it('should have the property hideFromLeaderboard (base name: "hideFromLeaderboard")', function() {
        // TODO: update the code to test the property hideFromLeaderboard
        expect(instance).to.have.property('hideFromLeaderboard');
        // expect(instance.hideFromLeaderboard).to.be(expectedValueLiteral);
      });

      it('should have the property hideNameFromLeaderboard (base name: "hideNameFromLeaderboard")', function() {
        // TODO: update the code to test the property hideNameFromLeaderboard
        expect(instance).to.have.property('hideNameFromLeaderboard');
        // expect(instance.hideNameFromLeaderboard).to.be(expectedValueLiteral);
      });

      it('should have the property hideNotifications (base name: "hideNotifications")', function() {
        // TODO: update the code to test the property hideNotifications
        expect(instance).to.have.property('hideNotifications');
        // expect(instance.hideNotifications).to.be(expectedValueLiteral);
      });

      it('should have the property hidePhoneConfirm (base name: "hidePhoneConfirm")', function() {
        // TODO: update the code to test the property hidePhoneConfirm
        expect(instance).to.have.property('hidePhoneConfirm');
        // expect(instance.hidePhoneConfirm).to.be(expectedValueLiteral);
      });

      it('should have the property isSensitiveInfoVisible (base name: "isSensitiveInfoVisible")', function() {
        // TODO: update the code to test the property isSensitiveInfoVisible
        expect(instance).to.have.property('isSensitiveInfoVisible');
        // expect(instance.isSensitiveInfoVisible).to.be(expectedValueLiteral);
      });

      it('should have the property isWalletZeroBalanceHidden (base name: "isWalletZeroBalanceHidden")', function() {
        // TODO: update the code to test the property isWalletZeroBalanceHidden
        expect(instance).to.have.property('isWalletZeroBalanceHidden');
        // expect(instance.isWalletZeroBalanceHidden).to.be(expectedValueLiteral);
      });

      it('should have the property locale (base name: "locale")', function() {
        // TODO: update the code to test the property locale
        expect(instance).to.have.property('locale');
        // expect(instance.locale).to.be(expectedValueLiteral);
      });

      it('should have the property localeSetTime (base name: "localeSetTime")', function() {
        // TODO: update the code to test the property localeSetTime
        expect(instance).to.have.property('localeSetTime');
        // expect(instance.localeSetTime).to.be(expectedValueLiteral);
      });

      it('should have the property marginPnlRow (base name: "marginPnlRow")', function() {
        // TODO: update the code to test the property marginPnlRow
        expect(instance).to.have.property('marginPnlRow');
        // expect(instance.marginPnlRow).to.be(expectedValueLiteral);
      });

      it('should have the property marginPnlRowKind (base name: "marginPnlRowKind")', function() {
        // TODO: update the code to test the property marginPnlRowKind
        expect(instance).to.have.property('marginPnlRowKind');
        // expect(instance.marginPnlRowKind).to.be(expectedValueLiteral);
      });

      it('should have the property msgsSeen (base name: "msgsSeen")', function() {
        // TODO: update the code to test the property msgsSeen
        expect(instance).to.have.property('msgsSeen');
        // expect(instance.msgsSeen).to.be(expectedValueLiteral);
      });

      it('should have the property notifications (base name: "notifications")', function() {
        // TODO: update the code to test the property notifications
        expect(instance).to.have.property('notifications');
        // expect(instance.notifications).to.be(expectedValueLiteral);
      });

      it('should have the property orderBookBinning (base name: "orderBookBinning")', function() {
        // TODO: update the code to test the property orderBookBinning
        expect(instance).to.have.property('orderBookBinning');
        // expect(instance.orderBookBinning).to.be(expectedValueLiteral);
      });

      it('should have the property orderBookType (base name: "orderBookType")', function() {
        // TODO: update the code to test the property orderBookType
        expect(instance).to.have.property('orderBookType');
        // expect(instance.orderBookType).to.be(expectedValueLiteral);
      });

      it('should have the property orderClearImmediate (base name: "orderClearImmediate")', function() {
        // TODO: update the code to test the property orderClearImmediate
        expect(instance).to.have.property('orderClearImmediate');
        // expect(instance.orderClearImmediate).to.be(expectedValueLiteral);
      });

      it('should have the property orderControlsPlusMinus (base name: "orderControlsPlusMinus")', function() {
        // TODO: update the code to test the property orderControlsPlusMinus
        expect(instance).to.have.property('orderControlsPlusMinus');
        // expect(instance.orderControlsPlusMinus).to.be(expectedValueLiteral);
      });

      it('should have the property platformLayout (base name: "platformLayout")', function() {
        // TODO: update the code to test the property platformLayout
        expect(instance).to.have.property('platformLayout');
        // expect(instance.platformLayout).to.be(expectedValueLiteral);
      });

      it('should have the property selectedFiatCurrency (base name: "selectedFiatCurrency")', function() {
        // TODO: update the code to test the property selectedFiatCurrency
        expect(instance).to.have.property('selectedFiatCurrency');
        // expect(instance.selectedFiatCurrency).to.be(expectedValueLiteral);
      });

      it('should have the property showChartBottomToolbar (base name: "showChartBottomToolbar")', function() {
        // TODO: update the code to test the property showChartBottomToolbar
        expect(instance).to.have.property('showChartBottomToolbar');
        // expect(instance.showChartBottomToolbar).to.be(expectedValueLiteral);
      });

      it('should have the property showLocaleNumbers (base name: "showLocaleNumbers")', function() {
        // TODO: update the code to test the property showLocaleNumbers
        expect(instance).to.have.property('showLocaleNumbers');
        // expect(instance.showLocaleNumbers).to.be(expectedValueLiteral);
      });

      it('should have the property sounds (base name: "sounds")', function() {
        // TODO: update the code to test the property sounds
        expect(instance).to.have.property('sounds');
        // expect(instance.sounds).to.be(expectedValueLiteral);
      });

      it('should have the property strictIPCheck (base name: "strictIPCheck")', function() {
        // TODO: update the code to test the property strictIPCheck
        expect(instance).to.have.property('strictIPCheck');
        // expect(instance.strictIPCheck).to.be(expectedValueLiteral);
      });

      it('should have the property strictTimeout (base name: "strictTimeout")', function() {
        // TODO: update the code to test the property strictTimeout
        expect(instance).to.have.property('strictTimeout');
        // expect(instance.strictTimeout).to.be(expectedValueLiteral);
      });

      it('should have the property tickerGroup (base name: "tickerGroup")', function() {
        // TODO: update the code to test the property tickerGroup
        expect(instance).to.have.property('tickerGroup');
        // expect(instance.tickerGroup).to.be(expectedValueLiteral);
      });

      it('should have the property tickerPinned (base name: "tickerPinned")', function() {
        // TODO: update the code to test the property tickerPinned
        expect(instance).to.have.property('tickerPinned');
        // expect(instance.tickerPinned).to.be(expectedValueLiteral);
      });

      it('should have the property tradeLayout (base name: "tradeLayout")', function() {
        // TODO: update the code to test the property tradeLayout
        expect(instance).to.have.property('tradeLayout');
        // expect(instance.tradeLayout).to.be(expectedValueLiteral);
      });

      it('should have the property userColor (base name: "userColor")', function() {
        // TODO: update the code to test the property userColor
        expect(instance).to.have.property('userColor');
        // expect(instance.userColor).to.be(expectedValueLiteral);
      });

    });
  });

}));
