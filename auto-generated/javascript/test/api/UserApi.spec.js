/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BitMexApi.UserApi();
  });

  describe('(package)', function() {
    describe('UserApi', function() {
      describe('userCancelWithdrawal', function() {
        it('should call userCancelWithdrawal successfully', function(done) {
          // TODO: uncomment, update parameter values for userCancelWithdrawal call and complete the assertions
          /*
          var token = "token_example";

          instance.userCancelWithdrawal(token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.Transaction);
            expect(data.transactID).to.be.a('string');
            expect(data.transactID).to.be("");
            expect(data.account).to.be.a('number');
            expect(data.account).to.be();
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.network).to.be.a('string');
            expect(data.network).to.be("");
            expect(data.transactType).to.be.a('string');
            expect(data.transactType).to.be("");
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be();
            expect(data.fee).to.be.a('number');
            expect(data.fee).to.be();
            expect(data.transactStatus).to.be.a('string');
            expect(data.transactStatus).to.be("");
            expect(data.address).to.be.a('string');
            expect(data.address).to.be("");
            expect(data.tx).to.be.a('string');
            expect(data.tx).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.transactTime).to.be.a(Date);
            expect(data.transactTime).to.be(new Date());
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());
            expect(data.walletBalance).to.be.a('number');
            expect(data.walletBalance).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCheckReferralCode', function() {
        it('should call userCheckReferralCode successfully', function(done) {
          // TODO: uncomment, update parameter values for userCheckReferralCode call and complete the assertions
          /*
          var opts = {};
          opts.referralCode = "referralCode_example";

          instance.userCheckReferralCode(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCommunicationToken', function() {
        it('should call userCommunicationToken successfully', function(done) {
          // TODO: uncomment, update parameter values for userCommunicationToken call and complete the assertions
          /*
          var token = "token_example";
          var platformAgent = "platformAgent_example";

          instance.userCommunicationToken(token, platformAgent, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BitMexApi.CommunicationToken);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.userId).to.be.a('number');
              expect(data.userId).to.be();
              expect(data.deviceToken).to.be.a('string');
              expect(data.deviceToken).to.be("");
              expect(data.channel).to.be.a('string');
              expect(data.channel).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userConfirm', function() {
        it('should call userConfirm successfully', function(done) {
          // TODO: uncomment, update parameter values for userConfirm call and complete the assertions
          /*
          var token = "token_example";

          instance.userConfirm(token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.AccessToken);
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());
            expect(data.authorizedAccounts).to.be.a(Object);
            expect(data.authorizedAccounts).to.be();
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.ttl).to.be.a('number');
            expect(data.ttl).to.be(0.0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.userId).to.be.a('number');
            expect(data.userId).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userConfirmWithdrawal', function() {
        it('should call userConfirmWithdrawal successfully', function(done) {
          // TODO: uncomment, update parameter values for userConfirmWithdrawal call and complete the assertions
          /*
          var token = "token_example";

          instance.userConfirmWithdrawal(token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.Transaction);
            expect(data.transactID).to.be.a('string');
            expect(data.transactID).to.be("");
            expect(data.account).to.be.a('number');
            expect(data.account).to.be();
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.network).to.be.a('string');
            expect(data.network).to.be("");
            expect(data.transactType).to.be.a('string');
            expect(data.transactType).to.be("");
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be();
            expect(data.fee).to.be.a('number');
            expect(data.fee).to.be();
            expect(data.transactStatus).to.be.a('string');
            expect(data.transactStatus).to.be("");
            expect(data.address).to.be.a('string');
            expect(data.address).to.be("");
            expect(data.tx).to.be.a('string');
            expect(data.tx).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.transactTime).to.be.a(Date);
            expect(data.transactTime).to.be(new Date());
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());
            expect(data.walletBalance).to.be.a('number');
            expect(data.walletBalance).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCreateSubAccount', function() {
        it('should call userCreateSubAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for userCreateSubAccount call and complete the assertions
          /*
          var accountName = "accountName_example";

          instance.userCreateSubAccount(accountName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCreateUnstakingRequests', function() {
        it('should call userCreateUnstakingRequests successfully', function(done) {
          // TODO: uncomment, update parameter values for userCreateUnstakingRequests call and complete the assertions
          /*
          var symbol = "symbol_example";
          var amount = 1.2;

          instance.userCreateUnstakingRequests(symbol, amount, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userDeleteUnstakingRequests', function() {
        it('should call userDeleteUnstakingRequests successfully', function(done) {
          // TODO: uncomment, update parameter values for userDeleteUnstakingRequests call and complete the assertions
          /*
          var redemptionID = "redemptionID_example";

          instance.userDeleteUnstakingRequests(redemptionID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGet', function() {
        it('should call userGet successfully', function(done) {
          // TODO: uncomment userGet call and complete the assertions
          /*

          instance.userGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.User);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be();
            expect(data.firstname).to.be.a('string');
            expect(data.firstname).to.be("");
            expect(data.lastname).to.be.a('string');
            expect(data.lastname).to.be("");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.accountName).to.be.a('string');
            expect(data.accountName).to.be("");
            expect(data.isUser).to.be.a('boolean');
            expect(data.isUser).to.be(false);
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.dateOfBirth).to.be.a('string');
            expect(data.dateOfBirth).to.be("");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.lastUpdated).to.be.a(Date);
            expect(data.lastUpdated).to.be(new Date());
            expect(data.preferences).to.be.a(BitMexApi.UserPreferences);
                  expect(data.preferences.alertOnLiquidations).to.be.a('boolean');
              expect(data.preferences.alertOnLiquidations).to.be(false);
              expect(data.preferences.animationsEnabled).to.be.a('boolean');
              expect(data.preferences.animationsEnabled).to.be(false);
              expect(data.preferences.announcementsLastSeen).to.be.a(Date);
              expect(data.preferences.announcementsLastSeen).to.be(new Date());
              expect(data.preferences.chatChannelID).to.be.a('number');
              expect(data.preferences.chatChannelID).to.be(0.0);
              expect(data.preferences.colorTheme).to.be.a('string');
              expect(data.preferences.colorTheme).to.be("");
              expect(data.preferences.currency).to.be.a('string');
              expect(data.preferences.currency).to.be("");
              expect(data.preferences.debug).to.be.a('boolean');
              expect(data.preferences.debug).to.be(false);
              {
                let dataCtr = data.preferences.disableEmails;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.preferences.disablePush;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.preferences.displayCorpEnrollUpsell).to.be.a('boolean');
              expect(data.preferences.displayCorpEnrollUpsell).to.be(false);
              expect(data.preferences.equivalentCurrency).to.be.a('string');
              expect(data.preferences.equivalentCurrency).to.be("");
              {
                let dataCtr = data.preferences.features;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.preferences.favourites;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.preferences.favouritesAssets;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.preferences.favouritesOrdered;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.preferences.hideConfirmDialogs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.preferences.hideConnectionModal).to.be.a('boolean');
              expect(data.preferences.hideConnectionModal).to.be(false);
              expect(data.preferences.hideFromLeaderboard).to.be.a('boolean');
              expect(data.preferences.hideFromLeaderboard).to.be(false);
              expect(data.preferences.hideNameFromLeaderboard).to.be.a('boolean');
              expect(data.preferences.hideNameFromLeaderboard).to.be(false);
              {
                let dataCtr = data.preferences.hideNotifications;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.preferences.hidePhoneConfirm).to.be.a('boolean');
              expect(data.preferences.hidePhoneConfirm).to.be(false);
              expect(data.preferences.isSensitiveInfoVisible).to.be.a('boolean');
              expect(data.preferences.isSensitiveInfoVisible).to.be(false);
              expect(data.preferences.isWalletZeroBalanceHidden).to.be.a('boolean');
              expect(data.preferences.isWalletZeroBalanceHidden).to.be(false);
              expect(data.preferences.locale).to.be.a('string');
              expect(data.preferences.locale).to.be("");
              expect(data.preferences.localeSetTime).to.be.a('number');
              expect(data.preferences.localeSetTime).to.be(0.0);
              expect(data.preferences.marginPnlRow).to.be.a('string');
              expect(data.preferences.marginPnlRow).to.be("");
              expect(data.preferences.marginPnlRowKind).to.be.a('string');
              expect(data.preferences.marginPnlRowKind).to.be("");
              {
                let dataCtr = data.preferences.msgsSeen;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.preferences.notifications).to.be.a(Object);
              expect(data.preferences.notifications).to.be();
              expect(data.preferences.orderBookBinning).to.be.a(Object);
              expect(data.preferences.orderBookBinning).to.be();
              expect(data.preferences.orderBookType).to.be.a('string');
              expect(data.preferences.orderBookType).to.be("");
              expect(data.preferences.orderClearImmediate).to.be.a('boolean');
              expect(data.preferences.orderClearImmediate).to.be(false);
              expect(data.preferences.orderControlsPlusMinus).to.be.a('boolean');
              expect(data.preferences.orderControlsPlusMinus).to.be(false);
              expect(data.preferences.platformLayout).to.be.a('string');
              expect(data.preferences.platformLayout).to.be("");
              expect(data.preferences.selectedFiatCurrency).to.be.a('string');
              expect(data.preferences.selectedFiatCurrency).to.be("");
              expect(data.preferences.showChartBottomToolbar).to.be.a('boolean');
              expect(data.preferences.showChartBottomToolbar).to.be(false);
              expect(data.preferences.showLocaleNumbers).to.be.a('boolean');
              expect(data.preferences.showLocaleNumbers).to.be(false);
              {
                let dataCtr = data.preferences.sounds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.preferences.strictIPCheck).to.be.a('boolean');
              expect(data.preferences.strictIPCheck).to.be(false);
              expect(data.preferences.strictTimeout).to.be.a('boolean');
              expect(data.preferences.strictTimeout).to.be(false);
              expect(data.preferences.tickerGroup).to.be.a('string');
              expect(data.preferences.tickerGroup).to.be("");
              expect(data.preferences.tickerPinned).to.be.a('boolean');
              expect(data.preferences.tickerPinned).to.be(false);
              expect(data.preferences.tradeLayout).to.be.a('string');
              expect(data.preferences.tradeLayout).to.be("");
              expect(data.preferences.userColor).to.be.a('string');
              expect(data.preferences.userColor).to.be("");
            expect(data.tFAEnabled).to.be.a('string');
            expect(data.tFAEnabled).to.be("");
            expect(data.affiliateID).to.be.a('string');
            expect(data.affiliateID).to.be("");
            expect(data.country).to.be.a('string');
            expect(data.country).to.be("");
            expect(data.geoipCountry).to.be.a('string');
            expect(data.geoipCountry).to.be("");
            expect(data.geoipRegion).to.be.a('string');
            expect(data.geoipRegion).to.be("");
            expect(data.firstTradeTimestamp).to.be.a(Date);
            expect(data.firstTradeTimestamp).to.be(new Date());
            expect(data.typ).to.be.a('string');
            expect(data.typ).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetAffiliateStatus', function() {
        it('should call userGetAffiliateStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetAffiliateStatus call and complete the assertions
          /*
          var opts = {};
          opts.currency = "XBt";

          instance.userGetAffiliateStatus(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.Affiliate);
            expect(data.account).to.be.a('number');
            expect(data.account).to.be();
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.prevPayout).to.be.a('number');
            expect(data.prevPayout).to.be();
            expect(data.prevTurnover).to.be.a('number');
            expect(data.prevTurnover).to.be();
            expect(data.prevComm).to.be.a('number');
            expect(data.prevComm).to.be();
            expect(data.prevTimestamp).to.be.a(Date);
            expect(data.prevTimestamp).to.be(new Date());
            expect(data.execTurnover).to.be.a('number');
            expect(data.execTurnover).to.be();
            expect(data.execComm).to.be.a('number');
            expect(data.execComm).to.be();
            expect(data.totalReferrals).to.be.a('number');
            expect(data.totalReferrals).to.be();
            expect(data.totalTurnover).to.be.a('number');
            expect(data.totalTurnover).to.be();
            expect(data.totalComm).to.be.a('number');
            expect(data.totalComm).to.be();
            expect(data.payoutPcnt).to.be.a('number');
            expect(data.payoutPcnt).to.be(0.0);
            expect(data.pendingPayout).to.be.a('number');
            expect(data.pendingPayout).to.be();
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());
            expect(data.referrerAccount).to.be.a('number');
            expect(data.referrerAccount).to.be(0.0);
            expect(data.referralDiscount).to.be.a('number');
            expect(data.referralDiscount).to.be(0.0);
            expect(data.affiliatePayout).to.be.a('number');
            expect(data.affiliatePayout).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetCSA', function() {
        it('should call userGetCSA successfully', function(done) {
          // TODO: uncomment userGetCSA call and complete the assertions
          /*

          instance.userGetCSA(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.CollateralSupportAgreement);
            expect(data.csaID).to.be.a('string');
            expect(data.csaID).to.be("");
            expect(data.account).to.be.a('number');
            expect(data.account).to.be();
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be();
            expect(data.minAmount).to.be.a('number');
            expect(data.minAmount).to.be();
            expect(data.threshold).to.be.a('number');
            expect(data.threshold).to.be();
            expect(data.mmRatioMarginCall).to.be.a('number');
            expect(data.mmRatioMarginCall).to.be();
            expect(data.mmRatioLiquidation).to.be.a('number');
            expect(data.mmRatioLiquidation).to.be();
            expect(data.startTime).to.be.a('string');
            expect(data.startTime).to.be("");
            expect(data.maturityTime).to.be.a('string');
            expect(data.maturityTime).to.be("");
            expect(data.maturityInstruction).to.be.a('string');
            expect(data.maturityInstruction).to.be("");
            expect(data.csaStatus).to.be.a('string');
            expect(data.csaStatus).to.be("");
            expect(data.requester).to.be.a('string');
            expect(data.requester).to.be("");
            expect(data.clientDetails).to.be.a('string');
            expect(data.clientDetails).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.timestamp).to.be.a('string');
            expect(data.timestamp).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetCommission', function() {
        it('should call userGetCommission successfully', function(done) {
          // TODO: uncomment userGetCommission call and complete the assertions
          /*

          instance.userGetCommission(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.UserCommissionsBySymbol);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetDepositAddress', function() {
        it('should call userGetDepositAddress successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetDepositAddress call and complete the assertions
          /*
          var currency = "currency_example";
          var network = "network_example";

          instance.userGetDepositAddress(currency, network, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetExecutionHistory', function() {
        it('should call userGetExecutionHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetExecutionHistory call and complete the assertions
          /*
          var symbol = "XBTUSD";
          var timestamp = new Date("2017-02-13T12:00:00.000Z");

          instance.userGetExecutionHistory(symbol, timestamp, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BitMexApi.Execution);
              expect(data.execID).to.be.a('string');
              expect(data.execID).to.be("");
              expect(data.orderID).to.be.a('string');
              expect(data.orderID).to.be("");
              expect(data.clOrdID).to.be.a('string');
              expect(data.clOrdID).to.be("");
              expect(data.clOrdLinkID).to.be.a('string');
              expect(data.clOrdLinkID).to.be("");
              expect(data.account).to.be.a('number');
              expect(data.account).to.be(0.0);
              expect(data.symbol).to.be.a('string');
              expect(data.symbol).to.be("");
              expect(data.side).to.be.a('string');
              expect(data.side).to.be("");
              expect(data.lastQty).to.be.a('number');
              expect(data.lastQty).to.be(0.0);
              expect(data.lastPx).to.be.a('number');
              expect(data.lastPx).to.be(0.0);
              expect(data.lastLiquidityInd).to.be.a('string');
              expect(data.lastLiquidityInd).to.be("");
              expect(data.orderQty).to.be.a('number');
              expect(data.orderQty).to.be(0.0);
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.displayQty).to.be.a('number');
              expect(data.displayQty).to.be();
              expect(data.stopPx).to.be.a('number');
              expect(data.stopPx).to.be(0.0);
              expect(data.pegOffsetValue).to.be.a('number');
              expect(data.pegOffsetValue).to.be(0.0);
              expect(data.pegPriceType).to.be.a('string');
              expect(data.pegPriceType).to.be("");
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.settlCurrency).to.be.a('string');
              expect(data.settlCurrency).to.be("");
              expect(data.execType).to.be.a('string');
              expect(data.execType).to.be("");
              expect(data.ordType).to.be.a('string');
              expect(data.ordType).to.be("");
              expect(data.timeInForce).to.be.a('string');
              expect(data.timeInForce).to.be("");
              expect(data.execInst).to.be.a('string');
              expect(data.execInst).to.be("");
              expect(data.contingencyType).to.be.a('string');
              expect(data.contingencyType).to.be("");
              expect(data.ordStatus).to.be.a('string');
              expect(data.ordStatus).to.be("");
              expect(data.triggered).to.be.a('string');
              expect(data.triggered).to.be("");
              expect(data.workingIndicator).to.be.a('boolean');
              expect(data.workingIndicator).to.be(false);
              expect(data.ordRejReason).to.be.a('string');
              expect(data.ordRejReason).to.be("");
              expect(data.leavesQty).to.be.a('number');
              expect(data.leavesQty).to.be(0.0);
              expect(data.cumQty).to.be.a('number');
              expect(data.cumQty).to.be();
              expect(data.avgPx).to.be.a('number');
              expect(data.avgPx).to.be(0.0);
              expect(data.commission).to.be.a('number');
              expect(data.commission).to.be(0.0);
              expect(data.tradePublishIndicator).to.be.a('string');
              expect(data.tradePublishIndicator).to.be("");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.trdMatchID).to.be.a('string');
              expect(data.trdMatchID).to.be("");
              expect(data.execCost).to.be.a('number');
              expect(data.execCost).to.be(0.0);
              expect(data.execComm).to.be.a('number');
              expect(data.execComm).to.be(0.0);
              expect(data.homeNotional).to.be.a('number');
              expect(data.homeNotional).to.be(0.0);
              expect(data.foreignNotional).to.be.a('number');
              expect(data.foreignNotional).to.be(0.0);
              expect(data.transactTime).to.be.a(Date);
              expect(data.transactTime).to.be(new Date());
              expect(data.timestamp).to.be.a(Date);
              expect(data.timestamp).to.be(new Date());
              expect(data.execGrossPnl).to.be.a('number');
              expect(data.execGrossPnl).to.be(0.0);
              expect(data.currentQty).to.be.a('number');
              expect(data.currentQty).to.be(0.0);
              expect(data.avgEntryPrice).to.be.a('number');
              expect(data.avgEntryPrice).to.be(0.0);
              expect(data.realisedPnl).to.be.a('number');
              expect(data.realisedPnl).to.be(0.0);
              expect(data.unrealisedPnl).to.be.a('number');
              expect(data.unrealisedPnl).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetMargin', function() {
        it('should call userGetMargin successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetMargin call and complete the assertions
          /*
          var opts = {};
          opts.currency = "XBt";

          instance.userGetMargin(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.Margin);
            expect(data.account).to.be.a('number');
            expect(data.account).to.be();
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.riskLimit).to.be.a('number');
            expect(data.riskLimit).to.be();
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("");
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be();
            expect(data.prevRealisedPnl).to.be.a('number');
            expect(data.prevRealisedPnl).to.be();
            expect(data.grossComm).to.be.a('number');
            expect(data.grossComm).to.be();
            expect(data.grossOpenCost).to.be.a('number');
            expect(data.grossOpenCost).to.be();
            expect(data.grossOpenPremium).to.be.a('number');
            expect(data.grossOpenPremium).to.be();
            expect(data.grossExecCost).to.be.a('number');
            expect(data.grossExecCost).to.be();
            expect(data.grossMarkValue).to.be.a('number');
            expect(data.grossMarkValue).to.be();
            expect(data.riskValue).to.be.a('number');
            expect(data.riskValue).to.be();
            expect(data.initMargin).to.be.a('number');
            expect(data.initMargin).to.be();
            expect(data.maintMargin).to.be.a('number');
            expect(data.maintMargin).to.be();
            expect(data.targetExcessMargin).to.be.a('number');
            expect(data.targetExcessMargin).to.be();
            expect(data.realisedPnl).to.be.a('number');
            expect(data.realisedPnl).to.be();
            expect(data.unrealisedPnl).to.be.a('number');
            expect(data.unrealisedPnl).to.be();
            expect(data.walletBalance).to.be.a('number');
            expect(data.walletBalance).to.be();
            expect(data.marginBalance).to.be.a('number');
            expect(data.marginBalance).to.be();
            expect(data.marginLeverage).to.be.a('number');
            expect(data.marginLeverage).to.be(0.0);
            expect(data.marginUsedPcnt).to.be.a('number');
            expect(data.marginUsedPcnt).to.be(0.0);
            expect(data.excessMargin).to.be.a('number');
            expect(data.excessMargin).to.be();
            expect(data.availableMargin).to.be.a('number');
            expect(data.availableMargin).to.be();
            expect(data.withdrawableMargin).to.be.a('number');
            expect(data.withdrawableMargin).to.be();
            expect(data.makerFeeDiscount).to.be.a('number');
            expect(data.makerFeeDiscount).to.be(0.0);
            expect(data.takerFeeDiscount).to.be.a('number');
            expect(data.takerFeeDiscount).to.be(0.0);
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetQuoteFillRatio', function() {
        it('should call userGetQuoteFillRatio successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetQuoteFillRatio call and complete the assertions
          /*
          var opts = {};
          opts.targetAccountId = 1.2;

          instance.userGetQuoteFillRatio(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.QuoteFillRatio);
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(new Date());
            expect(data.account).to.be.a('number');
            expect(data.account).to.be(0.0);
            expect(data.quoteCount).to.be.a('number');
            expect(data.quoteCount).to.be(0.0);
            expect(data.dealtCount).to.be.a('number');
            expect(data.dealtCount).to.be(0.0);
            expect(data.quotesMavg7).to.be.a('number');
            expect(data.quotesMavg7).to.be(0.0);
            expect(data.dealtMavg7).to.be.a('number');
            expect(data.dealtMavg7).to.be(0.0);
            expect(data.quoteFillRatioMavg7).to.be.a('number');
            expect(data.quoteFillRatioMavg7).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetQuoteValueRatio', function() {
        it('should call userGetQuoteValueRatio successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetQuoteValueRatio call and complete the assertions
          /*
          var opts = {};
          opts.targetAccountId = 1.2;

          instance.userGetQuoteValueRatio(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.QuoteValueRatio);
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());
            expect(data.account).to.be.a('number');
            expect(data.account).to.be(0.0);
            expect(data.symbol).to.be.a('string');
            expect(data.symbol).to.be("");
            expect(data.quoteCount).to.be.a('number');
            expect(data.quoteCount).to.be(0.0);
            expect(data.volumeXBT).to.be.a('number');
            expect(data.volumeXBT).to.be(0.0);
            expect(data.QVR).to.be.a('number');
            expect(data.QVR).to.be(0.0);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetStaking', function() {
        it('should call userGetStaking successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetStaking call and complete the assertions
          /*
          var opts = {};
          opts.currency = "currency_example";

          instance.userGetStaking(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BitMexApi.StakingRecord);
              expect(data.account).to.be.a('number');
              expect(data.account).to.be(0.0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetStakingInstruments', function() {
        it('should call userGetStakingInstruments successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetStakingInstruments call and complete the assertions
          /*
          var opts = {};
          opts.symbol = "symbol_example";
          opts.currency = "currency_example";

          instance.userGetStakingInstruments(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BitMexApi.XAny);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetStakingTiers', function() {
        it('should call userGetStakingTiers successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetStakingTiers call and complete the assertions
          /*
          var currency = "currency_example";

          instance.userGetStakingTiers(currency, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BitMexApi.XAny);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetTradingVolume', function() {
        it('should call userGetTradingVolume successfully', function(done) {
          // TODO: uncomment userGetTradingVolume call and complete the assertions
          /*

          instance.userGetTradingVolume(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BitMexApi.TradingVolume);
              expect(data.advUsd).to.be.a('number');
              expect(data.advUsd).to.be(0.0);
              expect(data.advUsdSpot).to.be.a('number');
              expect(data.advUsdSpot).to.be(0.0);
              expect(data.advUsdContract).to.be.a('number');
              expect(data.advUsdContract).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetUnstakingRequests', function() {
        it('should call userGetUnstakingRequests successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetUnstakingRequests call and complete the assertions
          /*
          var status = "status_example";

          instance.userGetUnstakingRequests(status, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BitMexApi.StakingRecord);
              expect(data.account).to.be.a('number');
              expect(data.account).to.be(0.0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetWallet', function() {
        it('should call userGetWallet successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetWallet call and complete the assertions
          /*
          var opts = {};
          opts.currency = "XBt";

          instance.userGetWallet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.Wallet);
            expect(data.account).to.be.a('number');
            expect(data.account).to.be();
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.deposited).to.be.a('number');
            expect(data.deposited).to.be();
            expect(data.withdrawn).to.be.a('number');
            expect(data.withdrawn).to.be();
            expect(data.transferIn).to.be.a('number');
            expect(data.transferIn).to.be();
            expect(data.transferOut).to.be.a('number');
            expect(data.transferOut).to.be();
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be();
            expect(data.pendingCredit).to.be.a('number');
            expect(data.pendingCredit).to.be();
            expect(data.pendingDebit).to.be.a('number');
            expect(data.pendingDebit).to.be();
            expect(data.confirmedDebit).to.be.a('number');
            expect(data.confirmedDebit).to.be();
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetWalletHistory', function() {
        it('should call userGetWalletHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetWalletHistory call and complete the assertions
          /*
          var opts = {};
          opts.currency = "XBt";
          opts.count = 100;
          opts.start = 0;
          opts.targetAccountId = 1.2;

          instance.userGetWalletHistory(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BitMexApi.Transaction);
              expect(data.transactID).to.be.a('string');
              expect(data.transactID).to.be("");
              expect(data.account).to.be.a('number');
              expect(data.account).to.be();
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.network).to.be.a('string');
              expect(data.network).to.be("");
              expect(data.transactType).to.be.a('string');
              expect(data.transactType).to.be("");
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be();
              expect(data.fee).to.be.a('number');
              expect(data.fee).to.be();
              expect(data.transactStatus).to.be.a('string');
              expect(data.transactStatus).to.be("");
              expect(data.address).to.be.a('string');
              expect(data.address).to.be("");
              expect(data.tx).to.be.a('string');
              expect(data.tx).to.be("");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.transactTime).to.be.a(Date);
              expect(data.transactTime).to.be(new Date());
              expect(data.timestamp).to.be.a(Date);
              expect(data.timestamp).to.be(new Date());
              expect(data.walletBalance).to.be.a('number');
              expect(data.walletBalance).to.be();
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetWalletSummary', function() {
        it('should call userGetWalletSummary successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetWalletSummary call and complete the assertions
          /*
          var opts = {};
          opts.currency = "XBt";

          instance.userGetWalletSummary(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BitMexApi.Transaction);
              expect(data.transactID).to.be.a('string');
              expect(data.transactID).to.be("");
              expect(data.account).to.be.a('number');
              expect(data.account).to.be();
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.network).to.be.a('string');
              expect(data.network).to.be("");
              expect(data.transactType).to.be.a('string');
              expect(data.transactType).to.be("");
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be();
              expect(data.fee).to.be.a('number');
              expect(data.fee).to.be();
              expect(data.transactStatus).to.be.a('string');
              expect(data.transactStatus).to.be("");
              expect(data.address).to.be.a('string');
              expect(data.address).to.be("");
              expect(data.tx).to.be.a('string');
              expect(data.tx).to.be("");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.transactTime).to.be.a(Date);
              expect(data.transactTime).to.be(new Date());
              expect(data.timestamp).to.be.a(Date);
              expect(data.timestamp).to.be(new Date());
              expect(data.walletBalance).to.be.a('number');
              expect(data.walletBalance).to.be();
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetWalletTransferAccounts', function() {
        it('should call userGetWalletTransferAccounts successfully', function(done) {
          // TODO: uncomment userGetWalletTransferAccounts call and complete the assertions
          /*

          instance.userGetWalletTransferAccounts(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BitMexApi.XAny);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userLogout', function() {
        it('should call userLogout successfully', function(done) {
          // TODO: uncomment userLogout call
          /*

          instance.userLogout(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userRequestWithdrawal', function() {
        it('should call userRequestWithdrawal successfully', function(done) {
          // TODO: uncomment, update parameter values for userRequestWithdrawal call and complete the assertions
          /*
          var currency = "XBt";
          var network = "network_example";
          var amount = 8.14;
          var opts = {};
          opts.otpToken = "otpToken_example";
          opts.address = "address_example";
          opts.addressId = 1.2;
          opts.targetUserId = 1.2;
          opts.fee = 1.2;
          opts.text = "text_example";

          instance.userRequestWithdrawal(currency, network, amount, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.Transaction);
            expect(data.transactID).to.be.a('string');
            expect(data.transactID).to.be("");
            expect(data.account).to.be.a('number');
            expect(data.account).to.be();
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.network).to.be.a('string');
            expect(data.network).to.be("");
            expect(data.transactType).to.be.a('string');
            expect(data.transactType).to.be("");
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be();
            expect(data.fee).to.be.a('number');
            expect(data.fee).to.be();
            expect(data.transactStatus).to.be.a('string');
            expect(data.transactStatus).to.be("");
            expect(data.address).to.be.a('string');
            expect(data.address).to.be("");
            expect(data.tx).to.be.a('string');
            expect(data.tx).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.transactTime).to.be.a(Date);
            expect(data.transactTime).to.be(new Date());
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());
            expect(data.walletBalance).to.be.a('number');
            expect(data.walletBalance).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userSavePreferences', function() {
        it('should call userSavePreferences successfully', function(done) {
          // TODO: uncomment, update parameter values for userSavePreferences call and complete the assertions
          /*
          var prefs = "prefs_example";
          var opts = {};
          opts.overwrite = false;

          instance.userSavePreferences(prefs, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.User);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be();
            expect(data.firstname).to.be.a('string');
            expect(data.firstname).to.be("");
            expect(data.lastname).to.be.a('string');
            expect(data.lastname).to.be("");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.accountName).to.be.a('string');
            expect(data.accountName).to.be("");
            expect(data.isUser).to.be.a('boolean');
            expect(data.isUser).to.be(false);
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.dateOfBirth).to.be.a('string');
            expect(data.dateOfBirth).to.be("");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.lastUpdated).to.be.a(Date);
            expect(data.lastUpdated).to.be(new Date());
            expect(data.preferences).to.be.a(BitMexApi.UserPreferences);
                  expect(data.preferences.alertOnLiquidations).to.be.a('boolean');
              expect(data.preferences.alertOnLiquidations).to.be(false);
              expect(data.preferences.animationsEnabled).to.be.a('boolean');
              expect(data.preferences.animationsEnabled).to.be(false);
              expect(data.preferences.announcementsLastSeen).to.be.a(Date);
              expect(data.preferences.announcementsLastSeen).to.be(new Date());
              expect(data.preferences.chatChannelID).to.be.a('number');
              expect(data.preferences.chatChannelID).to.be(0.0);
              expect(data.preferences.colorTheme).to.be.a('string');
              expect(data.preferences.colorTheme).to.be("");
              expect(data.preferences.currency).to.be.a('string');
              expect(data.preferences.currency).to.be("");
              expect(data.preferences.debug).to.be.a('boolean');
              expect(data.preferences.debug).to.be(false);
              {
                let dataCtr = data.preferences.disableEmails;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.preferences.disablePush;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.preferences.displayCorpEnrollUpsell).to.be.a('boolean');
              expect(data.preferences.displayCorpEnrollUpsell).to.be(false);
              expect(data.preferences.equivalentCurrency).to.be.a('string');
              expect(data.preferences.equivalentCurrency).to.be("");
              {
                let dataCtr = data.preferences.features;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.preferences.favourites;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.preferences.favouritesAssets;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.preferences.favouritesOrdered;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.preferences.hideConfirmDialogs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.preferences.hideConnectionModal).to.be.a('boolean');
              expect(data.preferences.hideConnectionModal).to.be(false);
              expect(data.preferences.hideFromLeaderboard).to.be.a('boolean');
              expect(data.preferences.hideFromLeaderboard).to.be(false);
              expect(data.preferences.hideNameFromLeaderboard).to.be.a('boolean');
              expect(data.preferences.hideNameFromLeaderboard).to.be(false);
              {
                let dataCtr = data.preferences.hideNotifications;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.preferences.hidePhoneConfirm).to.be.a('boolean');
              expect(data.preferences.hidePhoneConfirm).to.be(false);
              expect(data.preferences.isSensitiveInfoVisible).to.be.a('boolean');
              expect(data.preferences.isSensitiveInfoVisible).to.be(false);
              expect(data.preferences.isWalletZeroBalanceHidden).to.be.a('boolean');
              expect(data.preferences.isWalletZeroBalanceHidden).to.be(false);
              expect(data.preferences.locale).to.be.a('string');
              expect(data.preferences.locale).to.be("");
              expect(data.preferences.localeSetTime).to.be.a('number');
              expect(data.preferences.localeSetTime).to.be(0.0);
              expect(data.preferences.marginPnlRow).to.be.a('string');
              expect(data.preferences.marginPnlRow).to.be("");
              expect(data.preferences.marginPnlRowKind).to.be.a('string');
              expect(data.preferences.marginPnlRowKind).to.be("");
              {
                let dataCtr = data.preferences.msgsSeen;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.preferences.notifications).to.be.a(Object);
              expect(data.preferences.notifications).to.be();
              expect(data.preferences.orderBookBinning).to.be.a(Object);
              expect(data.preferences.orderBookBinning).to.be();
              expect(data.preferences.orderBookType).to.be.a('string');
              expect(data.preferences.orderBookType).to.be("");
              expect(data.preferences.orderClearImmediate).to.be.a('boolean');
              expect(data.preferences.orderClearImmediate).to.be(false);
              expect(data.preferences.orderControlsPlusMinus).to.be.a('boolean');
              expect(data.preferences.orderControlsPlusMinus).to.be(false);
              expect(data.preferences.platformLayout).to.be.a('string');
              expect(data.preferences.platformLayout).to.be("");
              expect(data.preferences.selectedFiatCurrency).to.be.a('string');
              expect(data.preferences.selectedFiatCurrency).to.be("");
              expect(data.preferences.showChartBottomToolbar).to.be.a('boolean');
              expect(data.preferences.showChartBottomToolbar).to.be(false);
              expect(data.preferences.showLocaleNumbers).to.be.a('boolean');
              expect(data.preferences.showLocaleNumbers).to.be(false);
              {
                let dataCtr = data.preferences.sounds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.preferences.strictIPCheck).to.be.a('boolean');
              expect(data.preferences.strictIPCheck).to.be(false);
              expect(data.preferences.strictTimeout).to.be.a('boolean');
              expect(data.preferences.strictTimeout).to.be(false);
              expect(data.preferences.tickerGroup).to.be.a('string');
              expect(data.preferences.tickerGroup).to.be("");
              expect(data.preferences.tickerPinned).to.be.a('boolean');
              expect(data.preferences.tickerPinned).to.be(false);
              expect(data.preferences.tradeLayout).to.be.a('string');
              expect(data.preferences.tradeLayout).to.be("");
              expect(data.preferences.userColor).to.be.a('string');
              expect(data.preferences.userColor).to.be("");
            expect(data.tFAEnabled).to.be.a('string');
            expect(data.tFAEnabled).to.be("");
            expect(data.affiliateID).to.be.a('string');
            expect(data.affiliateID).to.be("");
            expect(data.country).to.be.a('string');
            expect(data.country).to.be("");
            expect(data.geoipCountry).to.be.a('string');
            expect(data.geoipCountry).to.be("");
            expect(data.geoipRegion).to.be.a('string');
            expect(data.geoipRegion).to.be("");
            expect(data.firstTradeTimestamp).to.be.a(Date);
            expect(data.firstTradeTimestamp).to.be(new Date());
            expect(data.typ).to.be.a('string');
            expect(data.typ).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userUpdateSubAccount', function() {
        it('should call userUpdateSubAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for userUpdateSubAccount call and complete the assertions
          /*
          var targetAccountId = 1.2;
          var accountName = "accountName_example";

          instance.userUpdateSubAccount(targetAccountId, accountName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userWalletTransfer', function() {
        it('should call userWalletTransfer successfully', function(done) {
          // TODO: uncomment, update parameter values for userWalletTransfer call and complete the assertions
          /*
          var currency = "currency_example";
          var amount = 8.14;
          var targetAccountId = 1.2;
          var opts = {};
          opts.fromAccountId = 1.2;

          instance.userWalletTransfer(currency, amount, targetAccountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.Transaction);
            expect(data.transactID).to.be.a('string');
            expect(data.transactID).to.be("");
            expect(data.account).to.be.a('number');
            expect(data.account).to.be();
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.network).to.be.a('string');
            expect(data.network).to.be("");
            expect(data.transactType).to.be.a('string');
            expect(data.transactType).to.be("");
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be();
            expect(data.fee).to.be.a('number');
            expect(data.fee).to.be();
            expect(data.transactStatus).to.be.a('string');
            expect(data.transactStatus).to.be("");
            expect(data.address).to.be.a('string');
            expect(data.address).to.be("");
            expect(data.tx).to.be.a('string');
            expect(data.tx).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.transactTime).to.be.a(Date);
            expect(data.transactTime).to.be(new Date());
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());
            expect(data.walletBalance).to.be.a('number');
            expect(data.walletBalance).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
