/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.38-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BitMexApi.GuildApi();
  });

  describe('(package)', function() {
    describe('GuildApi', function() {
      describe('guildArchive', function() {
        it('should call guildArchive successfully', function(done) {
          // TODO: uncomment guildArchive call and complete the assertions
          /*

          instance.guildArchive(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('guildEdit', function() {
        it('should call guildEdit successfully', function(done) {
          // TODO: uncomment, update parameter values for guildEdit call and complete the assertions
          /*
          var name = "name_example";
          var emoji = "emoji_example";
          var potDistributionPercent = 1.2;
          var potDistributionType = "potDistributionType_example";
          var opts = {};
          opts.potTraderId = 1.2;
          opts.description = "description_example";
          opts.twitter = "twitter_example";
          opts.discord = "discord_example";
          opts.imgUrl = "imgUrl_example";
          opts.isPrivate = true;

          instance.guildEdit(name, emoji, potDistributionPercent, potDistributionType, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.Guild);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be();
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());
            expect(data.archived).to.be.a('boolean');
            expect(data.archived).to.be(false);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.imgUrl).to.be.a('string');
            expect(data.imgUrl).to.be("");
            expect(data.mobileHeroImgUrl).to.be.a('string');
            expect(data.mobileHeroImgUrl).to.be("");
            expect(data.emoji).to.be.a('string');
            expect(data.emoji).to.be("");
            expect(data.logoUrl).to.be.a('string');
            expect(data.logoUrl).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.chatChannelId).to.be.a('number');
            expect(data.chatChannelId).to.be(0.0);
            expect(data.isPrivate).to.be.a('boolean');
            expect(data.isPrivate).to.be(false);
            expect(data.affiliateId).to.be.a('string');
            expect(data.affiliateId).to.be("");
            expect(data.potDistributionPreferences).to.be.a(Object);
            expect(data.potDistributionPreferences).to.be();
            expect(data.socials).to.be.a(Object);
            expect(data.socials).to.be();
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('guildGet', function() {
        it('should call guildGet successfully', function(done) {
          // TODO: uncomment guildGet call and complete the assertions
          /*

          instance.guildGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BitMexApi.XAny);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('guildJoin', function() {
        it('should call guildJoin successfully', function(done) {
          // TODO: uncomment, update parameter values for guildJoin call and complete the assertions
          /*
          var code = "code_example";

          instance.guildJoin(code, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('guildKick', function() {
        it('should call guildKick successfully', function(done) {
          // TODO: uncomment, update parameter values for guildKick call and complete the assertions
          /*
          var memberUserId = 1.2;

          instance.guildKick(memberUserId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('guildLeave', function() {
        it('should call guildLeave successfully', function(done) {
          // TODO: uncomment guildLeave call and complete the assertions
          /*

          instance.guildLeave(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('guildNew', function() {
        it('should call guildNew successfully', function(done) {
          // TODO: uncomment, update parameter values for guildNew call and complete the assertions
          /*
          var name = "name_example";
          var emoji = "emoji_example";
          var potDistributionPercent = 1.2;
          var potDistributionType = "potDistributionType_example";
          var opts = {};
          opts.description = "description_example";
          opts.twitter = "twitter_example";
          opts.discord = "discord_example";
          opts.imgUrl = "imgUrl_example";
          opts.isPrivate = true;

          instance.guildNew(name, emoji, potDistributionPercent, potDistributionType, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BitMexApi.Guild);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be();
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());
            expect(data.archived).to.be.a('boolean');
            expect(data.archived).to.be(false);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.imgUrl).to.be.a('string');
            expect(data.imgUrl).to.be("");
            expect(data.mobileHeroImgUrl).to.be.a('string');
            expect(data.mobileHeroImgUrl).to.be("");
            expect(data.emoji).to.be.a('string');
            expect(data.emoji).to.be("");
            expect(data.logoUrl).to.be.a('string');
            expect(data.logoUrl).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.chatChannelId).to.be.a('number');
            expect(data.chatChannelId).to.be(0.0);
            expect(data.isPrivate).to.be.a('boolean');
            expect(data.isPrivate).to.be(false);
            expect(data.affiliateId).to.be.a('string');
            expect(data.affiliateId).to.be("");
            expect(data.potDistributionPreferences).to.be.a(Object);
            expect(data.potDistributionPreferences).to.be();
            expect(data.socials).to.be.a(Object);
            expect(data.socials).to.be();
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('guildShareTrades', function() {
        it('should call guildShareTrades successfully', function(done) {
          // TODO: uncomment, update parameter values for guildShareTrades call and complete the assertions
          /*
          var shareTrades = true;

          instance.guildShareTrades(shareTrades, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
