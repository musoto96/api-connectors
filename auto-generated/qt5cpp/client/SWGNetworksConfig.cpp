/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGNetworksConfig.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGNetworksConfig::SWGNetworksConfig(QString json) {
    init();
    this->fromJson(json);
}

SWGNetworksConfig::SWGNetworksConfig() {
    init();
}

SWGNetworksConfig::~SWGNetworksConfig() {
    this->cleanup();
}

void
SWGNetworksConfig::init() {
    network = new QString("");
    m_network_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    currency = new QString("");
    m_currency_isSet = false;
    network_symbol = new QString("");
    m_network_symbol_isSet = false;
    transaction_explorer = new QString("");
    m_transaction_explorer_isSet = false;
    token_explorer = new QString("");
    m_token_explorer_isSet = false;
    deposit_confirmations = 0.0;
    m_deposit_confirmations_isSet = false;
    enabled = false;
    m_enabled_isSet = false;
}

void
SWGNetworksConfig::cleanup() {
    if(network != nullptr) { 
        delete network;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(currency != nullptr) { 
        delete currency;
    }
    if(network_symbol != nullptr) { 
        delete network_symbol;
    }
    if(transaction_explorer != nullptr) { 
        delete transaction_explorer;
    }
    if(token_explorer != nullptr) { 
        delete token_explorer;
    }
    if(deposit_confirmations != nullptr) { 
        delete deposit_confirmations;
    }

}

SWGNetworksConfig*
SWGNetworksConfig::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGNetworksConfig::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&network, pJson["network"], "QString", "QString");
    
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    
    ::Swagger::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::Swagger::setValue(&network_symbol, pJson["networkSymbol"], "QString", "QString");
    
    ::Swagger::setValue(&transaction_explorer, pJson["transactionExplorer"], "QString", "QString");
    
    ::Swagger::setValue(&token_explorer, pJson["tokenExplorer"], "QString", "QString");
    
    ::Swagger::setValue(&deposit_confirmations, pJson["depositConfirmations"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&enabled, pJson["enabled"], "bool", "");
    
}

QString
SWGNetworksConfig::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGNetworksConfig::asJsonObject() {
    QJsonObject obj;
    if(network != nullptr && *network != QString("")){
        toJsonValue(QString("network"), network, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if(network_symbol != nullptr && *network_symbol != QString("")){
        toJsonValue(QString("networkSymbol"), network_symbol, obj, QString("QString"));
    }
    if(transaction_explorer != nullptr && *transaction_explorer != QString("")){
        toJsonValue(QString("transactionExplorer"), transaction_explorer, obj, QString("QString"));
    }
    if(token_explorer != nullptr && *token_explorer != QString("")){
        toJsonValue(QString("tokenExplorer"), token_explorer, obj, QString("QString"));
    }
    if((deposit_confirmations != nullptr) && (deposit_confirmations->isSet())){
        toJsonValue(QString("depositConfirmations"), deposit_confirmations, obj, QString("SWGNumber"));
    }
    if(m_enabled_isSet){
        obj.insert("enabled", QJsonValue(enabled));
    }

    return obj;
}

QString*
SWGNetworksConfig::getNetwork() {
    return network;
}
void
SWGNetworksConfig::setNetwork(QString* network) {
    this->network = network;
    this->m_network_isSet = true;
}

QString*
SWGNetworksConfig::getName() {
    return name;
}
void
SWGNetworksConfig::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
SWGNetworksConfig::getCurrency() {
    return currency;
}
void
SWGNetworksConfig::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

QString*
SWGNetworksConfig::getNetworkSymbol() {
    return network_symbol;
}
void
SWGNetworksConfig::setNetworkSymbol(QString* network_symbol) {
    this->network_symbol = network_symbol;
    this->m_network_symbol_isSet = true;
}

QString*
SWGNetworksConfig::getTransactionExplorer() {
    return transaction_explorer;
}
void
SWGNetworksConfig::setTransactionExplorer(QString* transaction_explorer) {
    this->transaction_explorer = transaction_explorer;
    this->m_transaction_explorer_isSet = true;
}

QString*
SWGNetworksConfig::getTokenExplorer() {
    return token_explorer;
}
void
SWGNetworksConfig::setTokenExplorer(QString* token_explorer) {
    this->token_explorer = token_explorer;
    this->m_token_explorer_isSet = true;
}

SWGNumber*
SWGNetworksConfig::getDepositConfirmations() {
    return deposit_confirmations;
}
void
SWGNetworksConfig::setDepositConfirmations(SWGNumber* deposit_confirmations) {
    this->deposit_confirmations = deposit_confirmations;
    this->m_deposit_confirmations_isSet = true;
}

bool
SWGNetworksConfig::isEnabled() {
    return enabled;
}
void
SWGNetworksConfig::setEnabled(bool enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}


bool
SWGNetworksConfig::isSet(){
    bool isObjectUpdated = false;
    do{
        if(network != nullptr && *network != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(network_symbol != nullptr && *network_symbol != QString("")){ isObjectUpdated = true; break;}
        if(transaction_explorer != nullptr && *transaction_explorer != QString("")){ isObjectUpdated = true; break;}
        if(token_explorer != nullptr && *token_explorer != QString("")){ isObjectUpdated = true; break;}
        if(deposit_confirmations != nullptr && deposit_confirmations->isSet()){ isObjectUpdated = true; break;}
        if(m_enabled_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

