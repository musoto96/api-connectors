/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGAssetsConfigNetworkItem.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGAssetsConfigNetworkItem::SWGAssetsConfigNetworkItem(QString json) {
    init();
    this->fromJson(json);
}

SWGAssetsConfigNetworkItem::SWGAssetsConfigNetworkItem() {
    init();
}

SWGAssetsConfigNetworkItem::~SWGAssetsConfigNetworkItem() {
    this->cleanup();
}

void
SWGAssetsConfigNetworkItem::init() {
    asset = new QString("");
    m_asset_isSet = false;
    token_address = new QString("");
    m_token_address_isSet = false;
    deposit_enabled = false;
    m_deposit_enabled_isSet = false;
    withdrawal_enabled = false;
    m_withdrawal_enabled_isSet = false;
    withdrawal_fee = 0.0;
    m_withdrawal_fee_isSet = false;
    min_fee = 0.0;
    m_min_fee_isSet = false;
    max_fee = 0.0;
    m_max_fee_isSet = false;
}

void
SWGAssetsConfigNetworkItem::cleanup() {
    if(asset != nullptr) { 
        delete asset;
    }
    if(token_address != nullptr) { 
        delete token_address;
    }





}

SWGAssetsConfigNetworkItem*
SWGAssetsConfigNetworkItem::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGAssetsConfigNetworkItem::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&asset, pJson["asset"], "QString", "QString");
    
    ::Swagger::setValue(&token_address, pJson["tokenAddress"], "QString", "QString");
    
    ::Swagger::setValue(&deposit_enabled, pJson["depositEnabled"], "bool", "");
    
    ::Swagger::setValue(&withdrawal_enabled, pJson["withdrawalEnabled"], "bool", "");
    
    ::Swagger::setValue(&withdrawal_fee, pJson["withdrawalFee"], "double", "");
    
    ::Swagger::setValue(&min_fee, pJson["minFee"], "double", "");
    
    ::Swagger::setValue(&max_fee, pJson["maxFee"], "double", "");
    
}

QString
SWGAssetsConfigNetworkItem::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGAssetsConfigNetworkItem::asJsonObject() {
    QJsonObject obj;
    if(asset != nullptr && *asset != QString("")){
        toJsonValue(QString("asset"), asset, obj, QString("QString"));
    }
    if(token_address != nullptr && *token_address != QString("")){
        toJsonValue(QString("tokenAddress"), token_address, obj, QString("QString"));
    }
    if(m_deposit_enabled_isSet){
        obj.insert("depositEnabled", QJsonValue(deposit_enabled));
    }
    if(m_withdrawal_enabled_isSet){
        obj.insert("withdrawalEnabled", QJsonValue(withdrawal_enabled));
    }
    if(m_withdrawal_fee_isSet){
        obj.insert("withdrawalFee", QJsonValue(withdrawal_fee));
    }
    if(m_min_fee_isSet){
        obj.insert("minFee", QJsonValue(min_fee));
    }
    if(m_max_fee_isSet){
        obj.insert("maxFee", QJsonValue(max_fee));
    }

    return obj;
}

QString*
SWGAssetsConfigNetworkItem::getAsset() {
    return asset;
}
void
SWGAssetsConfigNetworkItem::setAsset(QString* asset) {
    this->asset = asset;
    this->m_asset_isSet = true;
}

QString*
SWGAssetsConfigNetworkItem::getTokenAddress() {
    return token_address;
}
void
SWGAssetsConfigNetworkItem::setTokenAddress(QString* token_address) {
    this->token_address = token_address;
    this->m_token_address_isSet = true;
}

bool
SWGAssetsConfigNetworkItem::isDepositEnabled() {
    return deposit_enabled;
}
void
SWGAssetsConfigNetworkItem::setDepositEnabled(bool deposit_enabled) {
    this->deposit_enabled = deposit_enabled;
    this->m_deposit_enabled_isSet = true;
}

bool
SWGAssetsConfigNetworkItem::isWithdrawalEnabled() {
    return withdrawal_enabled;
}
void
SWGAssetsConfigNetworkItem::setWithdrawalEnabled(bool withdrawal_enabled) {
    this->withdrawal_enabled = withdrawal_enabled;
    this->m_withdrawal_enabled_isSet = true;
}

double
SWGAssetsConfigNetworkItem::getWithdrawalFee() {
    return withdrawal_fee;
}
void
SWGAssetsConfigNetworkItem::setWithdrawalFee(double withdrawal_fee) {
    this->withdrawal_fee = withdrawal_fee;
    this->m_withdrawal_fee_isSet = true;
}

double
SWGAssetsConfigNetworkItem::getMinFee() {
    return min_fee;
}
void
SWGAssetsConfigNetworkItem::setMinFee(double min_fee) {
    this->min_fee = min_fee;
    this->m_min_fee_isSet = true;
}

double
SWGAssetsConfigNetworkItem::getMaxFee() {
    return max_fee;
}
void
SWGAssetsConfigNetworkItem::setMaxFee(double max_fee) {
    this->max_fee = max_fee;
    this->m_max_fee_isSet = true;
}


bool
SWGAssetsConfigNetworkItem::isSet(){
    bool isObjectUpdated = false;
    do{
        if(asset != nullptr && *asset != QString("")){ isObjectUpdated = true; break;}
        if(token_address != nullptr && *token_address != QString("")){ isObjectUpdated = true; break;}
        if(m_deposit_enabled_isSet){ isObjectUpdated = true; break;}
        if(m_withdrawal_enabled_isSet){ isObjectUpdated = true; break;}
        if(m_withdrawal_fee_isSet){ isObjectUpdated = true; break;}
        if(m_min_fee_isSet){ isObjectUpdated = true; break;}
        if(m_max_fee_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

