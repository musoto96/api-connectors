/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGExecution.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGExecution::SWGExecution(QString json) {
    init();
    this->fromJson(json);
}

SWGExecution::SWGExecution() {
    init();
}

SWGExecution::~SWGExecution() {
    this->cleanup();
}

void
SWGExecution::init() {
    exec_id = new QString("");
    m_exec_id_isSet = false;
    order_id = new QString("");
    m_order_id_isSet = false;
    cl_ord_id = new QString("");
    m_cl_ord_id_isSet = false;
    cl_ord_link_id = new QString("");
    m_cl_ord_link_id_isSet = false;
    account = 0.0;
    m_account_isSet = false;
    symbol = new QString("");
    m_symbol_isSet = false;
    side = new QString("");
    m_side_isSet = false;
    last_qty = 0.0;
    m_last_qty_isSet = false;
    last_px = 0.0;
    m_last_px_isSet = false;
    last_liquidity_ind = new QString("");
    m_last_liquidity_ind_isSet = false;
    order_qty = 0.0;
    m_order_qty_isSet = false;
    price = 0.0;
    m_price_isSet = false;
    display_qty = 0.0;
    m_display_qty_isSet = false;
    stop_px = 0.0;
    m_stop_px_isSet = false;
    peg_offset_value = 0.0;
    m_peg_offset_value_isSet = false;
    peg_price_type = new QString("");
    m_peg_price_type_isSet = false;
    currency = new QString("");
    m_currency_isSet = false;
    settl_currency = new QString("");
    m_settl_currency_isSet = false;
    exec_type = new QString("");
    m_exec_type_isSet = false;
    ord_type = new QString("");
    m_ord_type_isSet = false;
    time_in_force = new QString("");
    m_time_in_force_isSet = false;
    exec_inst = new QString("");
    m_exec_inst_isSet = false;
    contingency_type = new QString("");
    m_contingency_type_isSet = false;
    ord_status = new QString("");
    m_ord_status_isSet = false;
    triggered = new QString("");
    m_triggered_isSet = false;
    working_indicator = false;
    m_working_indicator_isSet = false;
    ord_rej_reason = new QString("");
    m_ord_rej_reason_isSet = false;
    leaves_qty = 0.0;
    m_leaves_qty_isSet = false;
    cum_qty = 0.0;
    m_cum_qty_isSet = false;
    avg_px = 0.0;
    m_avg_px_isSet = false;
    commission = 0.0;
    m_commission_isSet = false;
    trade_publish_indicator = new QString("");
    m_trade_publish_indicator_isSet = false;
    text = new QString("");
    m_text_isSet = false;
    trd_match_id = new QString("");
    m_trd_match_id_isSet = false;
    exec_cost = 0.0;
    m_exec_cost_isSet = false;
    exec_comm = 0.0;
    m_exec_comm_isSet = false;
    home_notional = 0.0;
    m_home_notional_isSet = false;
    foreign_notional = 0.0;
    m_foreign_notional_isSet = false;
    transact_time = NULL;
    m_transact_time_isSet = false;
    timestamp = NULL;
    m_timestamp_isSet = false;
    exec_gross_pnl = 0.0;
    m_exec_gross_pnl_isSet = false;
    current_qty = 0.0;
    m_current_qty_isSet = false;
    avg_entry_price = 0.0;
    m_avg_entry_price_isSet = false;
    realised_pnl = 0.0;
    m_realised_pnl_isSet = false;
    unrealised_pnl = 0.0;
    m_unrealised_pnl_isSet = false;
}

void
SWGExecution::cleanup() {
    if(exec_id != nullptr) { 
        delete exec_id;
    }
    if(order_id != nullptr) { 
        delete order_id;
    }
    if(cl_ord_id != nullptr) { 
        delete cl_ord_id;
    }
    if(cl_ord_link_id != nullptr) { 
        delete cl_ord_link_id;
    }

    if(symbol != nullptr) { 
        delete symbol;
    }
    if(side != nullptr) { 
        delete side;
    }


    if(last_liquidity_ind != nullptr) { 
        delete last_liquidity_ind;
    }


    if(display_qty != nullptr) { 
        delete display_qty;
    }


    if(peg_price_type != nullptr) { 
        delete peg_price_type;
    }
    if(currency != nullptr) { 
        delete currency;
    }
    if(settl_currency != nullptr) { 
        delete settl_currency;
    }
    if(exec_type != nullptr) { 
        delete exec_type;
    }
    if(ord_type != nullptr) { 
        delete ord_type;
    }
    if(time_in_force != nullptr) { 
        delete time_in_force;
    }
    if(exec_inst != nullptr) { 
        delete exec_inst;
    }
    if(contingency_type != nullptr) { 
        delete contingency_type;
    }
    if(ord_status != nullptr) { 
        delete ord_status;
    }
    if(triggered != nullptr) { 
        delete triggered;
    }

    if(ord_rej_reason != nullptr) { 
        delete ord_rej_reason;
    }

    if(cum_qty != nullptr) { 
        delete cum_qty;
    }


    if(trade_publish_indicator != nullptr) { 
        delete trade_publish_indicator;
    }
    if(text != nullptr) { 
        delete text;
    }
    if(trd_match_id != nullptr) { 
        delete trd_match_id;
    }




    if(transact_time != nullptr) { 
        delete transact_time;
    }
    if(timestamp != nullptr) { 
        delete timestamp;
    }





}

SWGExecution*
SWGExecution::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGExecution::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&exec_id, pJson["execID"], "QString", "QString");
    
    ::Swagger::setValue(&order_id, pJson["orderID"], "QString", "QString");
    
    ::Swagger::setValue(&cl_ord_id, pJson["clOrdID"], "QString", "QString");
    
    ::Swagger::setValue(&cl_ord_link_id, pJson["clOrdLinkID"], "QString", "QString");
    
    ::Swagger::setValue(&account, pJson["account"], "double", "");
    
    ::Swagger::setValue(&symbol, pJson["symbol"], "QString", "QString");
    
    ::Swagger::setValue(&side, pJson["side"], "QString", "QString");
    
    ::Swagger::setValue(&last_qty, pJson["lastQty"], "double", "");
    
    ::Swagger::setValue(&last_px, pJson["lastPx"], "double", "");
    
    ::Swagger::setValue(&last_liquidity_ind, pJson["lastLiquidityInd"], "QString", "QString");
    
    ::Swagger::setValue(&order_qty, pJson["orderQty"], "double", "");
    
    ::Swagger::setValue(&price, pJson["price"], "double", "");
    
    ::Swagger::setValue(&display_qty, pJson["displayQty"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&stop_px, pJson["stopPx"], "double", "");
    
    ::Swagger::setValue(&peg_offset_value, pJson["pegOffsetValue"], "double", "");
    
    ::Swagger::setValue(&peg_price_type, pJson["pegPriceType"], "QString", "QString");
    
    ::Swagger::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::Swagger::setValue(&settl_currency, pJson["settlCurrency"], "QString", "QString");
    
    ::Swagger::setValue(&exec_type, pJson["execType"], "QString", "QString");
    
    ::Swagger::setValue(&ord_type, pJson["ordType"], "QString", "QString");
    
    ::Swagger::setValue(&time_in_force, pJson["timeInForce"], "QString", "QString");
    
    ::Swagger::setValue(&exec_inst, pJson["execInst"], "QString", "QString");
    
    ::Swagger::setValue(&contingency_type, pJson["contingencyType"], "QString", "QString");
    
    ::Swagger::setValue(&ord_status, pJson["ordStatus"], "QString", "QString");
    
    ::Swagger::setValue(&triggered, pJson["triggered"], "QString", "QString");
    
    ::Swagger::setValue(&working_indicator, pJson["workingIndicator"], "bool", "");
    
    ::Swagger::setValue(&ord_rej_reason, pJson["ordRejReason"], "QString", "QString");
    
    ::Swagger::setValue(&leaves_qty, pJson["leavesQty"], "double", "");
    
    ::Swagger::setValue(&cum_qty, pJson["cumQty"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&avg_px, pJson["avgPx"], "double", "");
    
    ::Swagger::setValue(&commission, pJson["commission"], "double", "");
    
    ::Swagger::setValue(&trade_publish_indicator, pJson["tradePublishIndicator"], "QString", "QString");
    
    ::Swagger::setValue(&text, pJson["text"], "QString", "QString");
    
    ::Swagger::setValue(&trd_match_id, pJson["trdMatchID"], "QString", "QString");
    
    ::Swagger::setValue(&exec_cost, pJson["execCost"], "double", "");
    
    ::Swagger::setValue(&exec_comm, pJson["execComm"], "double", "");
    
    ::Swagger::setValue(&home_notional, pJson["homeNotional"], "double", "");
    
    ::Swagger::setValue(&foreign_notional, pJson["foreignNotional"], "double", "");
    
    ::Swagger::setValue(&transact_time, pJson["transactTime"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&exec_gross_pnl, pJson["execGrossPnl"], "double", "");
    
    ::Swagger::setValue(&current_qty, pJson["currentQty"], "double", "");
    
    ::Swagger::setValue(&avg_entry_price, pJson["avgEntryPrice"], "double", "");
    
    ::Swagger::setValue(&realised_pnl, pJson["realisedPnl"], "double", "");
    
    ::Swagger::setValue(&unrealised_pnl, pJson["unrealisedPnl"], "double", "");
    
}

QString
SWGExecution::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGExecution::asJsonObject() {
    QJsonObject obj;
    if(exec_id != nullptr && *exec_id != QString("")){
        toJsonValue(QString("execID"), exec_id, obj, QString("QString"));
    }
    if(order_id != nullptr && *order_id != QString("")){
        toJsonValue(QString("orderID"), order_id, obj, QString("QString"));
    }
    if(cl_ord_id != nullptr && *cl_ord_id != QString("")){
        toJsonValue(QString("clOrdID"), cl_ord_id, obj, QString("QString"));
    }
    if(cl_ord_link_id != nullptr && *cl_ord_link_id != QString("")){
        toJsonValue(QString("clOrdLinkID"), cl_ord_link_id, obj, QString("QString"));
    }
    if(m_account_isSet){
        obj.insert("account", QJsonValue(account));
    }
    if(symbol != nullptr && *symbol != QString("")){
        toJsonValue(QString("symbol"), symbol, obj, QString("QString"));
    }
    if(side != nullptr && *side != QString("")){
        toJsonValue(QString("side"), side, obj, QString("QString"));
    }
    if(m_last_qty_isSet){
        obj.insert("lastQty", QJsonValue(last_qty));
    }
    if(m_last_px_isSet){
        obj.insert("lastPx", QJsonValue(last_px));
    }
    if(last_liquidity_ind != nullptr && *last_liquidity_ind != QString("")){
        toJsonValue(QString("lastLiquidityInd"), last_liquidity_ind, obj, QString("QString"));
    }
    if(m_order_qty_isSet){
        obj.insert("orderQty", QJsonValue(order_qty));
    }
    if(m_price_isSet){
        obj.insert("price", QJsonValue(price));
    }
    if((display_qty != nullptr) && (display_qty->isSet())){
        toJsonValue(QString("displayQty"), display_qty, obj, QString("SWGNumber"));
    }
    if(m_stop_px_isSet){
        obj.insert("stopPx", QJsonValue(stop_px));
    }
    if(m_peg_offset_value_isSet){
        obj.insert("pegOffsetValue", QJsonValue(peg_offset_value));
    }
    if(peg_price_type != nullptr && *peg_price_type != QString("")){
        toJsonValue(QString("pegPriceType"), peg_price_type, obj, QString("QString"));
    }
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if(settl_currency != nullptr && *settl_currency != QString("")){
        toJsonValue(QString("settlCurrency"), settl_currency, obj, QString("QString"));
    }
    if(exec_type != nullptr && *exec_type != QString("")){
        toJsonValue(QString("execType"), exec_type, obj, QString("QString"));
    }
    if(ord_type != nullptr && *ord_type != QString("")){
        toJsonValue(QString("ordType"), ord_type, obj, QString("QString"));
    }
    if(time_in_force != nullptr && *time_in_force != QString("")){
        toJsonValue(QString("timeInForce"), time_in_force, obj, QString("QString"));
    }
    if(exec_inst != nullptr && *exec_inst != QString("")){
        toJsonValue(QString("execInst"), exec_inst, obj, QString("QString"));
    }
    if(contingency_type != nullptr && *contingency_type != QString("")){
        toJsonValue(QString("contingencyType"), contingency_type, obj, QString("QString"));
    }
    if(ord_status != nullptr && *ord_status != QString("")){
        toJsonValue(QString("ordStatus"), ord_status, obj, QString("QString"));
    }
    if(triggered != nullptr && *triggered != QString("")){
        toJsonValue(QString("triggered"), triggered, obj, QString("QString"));
    }
    if(m_working_indicator_isSet){
        obj.insert("workingIndicator", QJsonValue(working_indicator));
    }
    if(ord_rej_reason != nullptr && *ord_rej_reason != QString("")){
        toJsonValue(QString("ordRejReason"), ord_rej_reason, obj, QString("QString"));
    }
    if(m_leaves_qty_isSet){
        obj.insert("leavesQty", QJsonValue(leaves_qty));
    }
    if((cum_qty != nullptr) && (cum_qty->isSet())){
        toJsonValue(QString("cumQty"), cum_qty, obj, QString("SWGNumber"));
    }
    if(m_avg_px_isSet){
        obj.insert("avgPx", QJsonValue(avg_px));
    }
    if(m_commission_isSet){
        obj.insert("commission", QJsonValue(commission));
    }
    if(trade_publish_indicator != nullptr && *trade_publish_indicator != QString("")){
        toJsonValue(QString("tradePublishIndicator"), trade_publish_indicator, obj, QString("QString"));
    }
    if(text != nullptr && *text != QString("")){
        toJsonValue(QString("text"), text, obj, QString("QString"));
    }
    if(trd_match_id != nullptr && *trd_match_id != QString("")){
        toJsonValue(QString("trdMatchID"), trd_match_id, obj, QString("QString"));
    }
    if(m_exec_cost_isSet){
        obj.insert("execCost", QJsonValue(exec_cost));
    }
    if(m_exec_comm_isSet){
        obj.insert("execComm", QJsonValue(exec_comm));
    }
    if(m_home_notional_isSet){
        obj.insert("homeNotional", QJsonValue(home_notional));
    }
    if(m_foreign_notional_isSet){
        obj.insert("foreignNotional", QJsonValue(foreign_notional));
    }
    if(transact_time != nullptr) { 
        toJsonValue(QString("transactTime"), transact_time, obj, QString("QDateTime"));
    }
    if(timestamp != nullptr) { 
        toJsonValue(QString("timestamp"), timestamp, obj, QString("QDateTime"));
    }
    if(m_exec_gross_pnl_isSet){
        obj.insert("execGrossPnl", QJsonValue(exec_gross_pnl));
    }
    if(m_current_qty_isSet){
        obj.insert("currentQty", QJsonValue(current_qty));
    }
    if(m_avg_entry_price_isSet){
        obj.insert("avgEntryPrice", QJsonValue(avg_entry_price));
    }
    if(m_realised_pnl_isSet){
        obj.insert("realisedPnl", QJsonValue(realised_pnl));
    }
    if(m_unrealised_pnl_isSet){
        obj.insert("unrealisedPnl", QJsonValue(unrealised_pnl));
    }

    return obj;
}

QString*
SWGExecution::getExecId() {
    return exec_id;
}
void
SWGExecution::setExecId(QString* exec_id) {
    this->exec_id = exec_id;
    this->m_exec_id_isSet = true;
}

QString*
SWGExecution::getOrderId() {
    return order_id;
}
void
SWGExecution::setOrderId(QString* order_id) {
    this->order_id = order_id;
    this->m_order_id_isSet = true;
}

QString*
SWGExecution::getClOrdId() {
    return cl_ord_id;
}
void
SWGExecution::setClOrdId(QString* cl_ord_id) {
    this->cl_ord_id = cl_ord_id;
    this->m_cl_ord_id_isSet = true;
}

QString*
SWGExecution::getClOrdLinkId() {
    return cl_ord_link_id;
}
void
SWGExecution::setClOrdLinkId(QString* cl_ord_link_id) {
    this->cl_ord_link_id = cl_ord_link_id;
    this->m_cl_ord_link_id_isSet = true;
}

double
SWGExecution::getAccount() {
    return account;
}
void
SWGExecution::setAccount(double account) {
    this->account = account;
    this->m_account_isSet = true;
}

QString*
SWGExecution::getSymbol() {
    return symbol;
}
void
SWGExecution::setSymbol(QString* symbol) {
    this->symbol = symbol;
    this->m_symbol_isSet = true;
}

QString*
SWGExecution::getSide() {
    return side;
}
void
SWGExecution::setSide(QString* side) {
    this->side = side;
    this->m_side_isSet = true;
}

double
SWGExecution::getLastQty() {
    return last_qty;
}
void
SWGExecution::setLastQty(double last_qty) {
    this->last_qty = last_qty;
    this->m_last_qty_isSet = true;
}

double
SWGExecution::getLastPx() {
    return last_px;
}
void
SWGExecution::setLastPx(double last_px) {
    this->last_px = last_px;
    this->m_last_px_isSet = true;
}

QString*
SWGExecution::getLastLiquidityInd() {
    return last_liquidity_ind;
}
void
SWGExecution::setLastLiquidityInd(QString* last_liquidity_ind) {
    this->last_liquidity_ind = last_liquidity_ind;
    this->m_last_liquidity_ind_isSet = true;
}

double
SWGExecution::getOrderQty() {
    return order_qty;
}
void
SWGExecution::setOrderQty(double order_qty) {
    this->order_qty = order_qty;
    this->m_order_qty_isSet = true;
}

double
SWGExecution::getPrice() {
    return price;
}
void
SWGExecution::setPrice(double price) {
    this->price = price;
    this->m_price_isSet = true;
}

SWGNumber*
SWGExecution::getDisplayQty() {
    return display_qty;
}
void
SWGExecution::setDisplayQty(SWGNumber* display_qty) {
    this->display_qty = display_qty;
    this->m_display_qty_isSet = true;
}

double
SWGExecution::getStopPx() {
    return stop_px;
}
void
SWGExecution::setStopPx(double stop_px) {
    this->stop_px = stop_px;
    this->m_stop_px_isSet = true;
}

double
SWGExecution::getPegOffsetValue() {
    return peg_offset_value;
}
void
SWGExecution::setPegOffsetValue(double peg_offset_value) {
    this->peg_offset_value = peg_offset_value;
    this->m_peg_offset_value_isSet = true;
}

QString*
SWGExecution::getPegPriceType() {
    return peg_price_type;
}
void
SWGExecution::setPegPriceType(QString* peg_price_type) {
    this->peg_price_type = peg_price_type;
    this->m_peg_price_type_isSet = true;
}

QString*
SWGExecution::getCurrency() {
    return currency;
}
void
SWGExecution::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

QString*
SWGExecution::getSettlCurrency() {
    return settl_currency;
}
void
SWGExecution::setSettlCurrency(QString* settl_currency) {
    this->settl_currency = settl_currency;
    this->m_settl_currency_isSet = true;
}

QString*
SWGExecution::getExecType() {
    return exec_type;
}
void
SWGExecution::setExecType(QString* exec_type) {
    this->exec_type = exec_type;
    this->m_exec_type_isSet = true;
}

QString*
SWGExecution::getOrdType() {
    return ord_type;
}
void
SWGExecution::setOrdType(QString* ord_type) {
    this->ord_type = ord_type;
    this->m_ord_type_isSet = true;
}

QString*
SWGExecution::getTimeInForce() {
    return time_in_force;
}
void
SWGExecution::setTimeInForce(QString* time_in_force) {
    this->time_in_force = time_in_force;
    this->m_time_in_force_isSet = true;
}

QString*
SWGExecution::getExecInst() {
    return exec_inst;
}
void
SWGExecution::setExecInst(QString* exec_inst) {
    this->exec_inst = exec_inst;
    this->m_exec_inst_isSet = true;
}

QString*
SWGExecution::getContingencyType() {
    return contingency_type;
}
void
SWGExecution::setContingencyType(QString* contingency_type) {
    this->contingency_type = contingency_type;
    this->m_contingency_type_isSet = true;
}

QString*
SWGExecution::getOrdStatus() {
    return ord_status;
}
void
SWGExecution::setOrdStatus(QString* ord_status) {
    this->ord_status = ord_status;
    this->m_ord_status_isSet = true;
}

QString*
SWGExecution::getTriggered() {
    return triggered;
}
void
SWGExecution::setTriggered(QString* triggered) {
    this->triggered = triggered;
    this->m_triggered_isSet = true;
}

bool
SWGExecution::isWorkingIndicator() {
    return working_indicator;
}
void
SWGExecution::setWorkingIndicator(bool working_indicator) {
    this->working_indicator = working_indicator;
    this->m_working_indicator_isSet = true;
}

QString*
SWGExecution::getOrdRejReason() {
    return ord_rej_reason;
}
void
SWGExecution::setOrdRejReason(QString* ord_rej_reason) {
    this->ord_rej_reason = ord_rej_reason;
    this->m_ord_rej_reason_isSet = true;
}

double
SWGExecution::getLeavesQty() {
    return leaves_qty;
}
void
SWGExecution::setLeavesQty(double leaves_qty) {
    this->leaves_qty = leaves_qty;
    this->m_leaves_qty_isSet = true;
}

SWGNumber*
SWGExecution::getCumQty() {
    return cum_qty;
}
void
SWGExecution::setCumQty(SWGNumber* cum_qty) {
    this->cum_qty = cum_qty;
    this->m_cum_qty_isSet = true;
}

double
SWGExecution::getAvgPx() {
    return avg_px;
}
void
SWGExecution::setAvgPx(double avg_px) {
    this->avg_px = avg_px;
    this->m_avg_px_isSet = true;
}

double
SWGExecution::getCommission() {
    return commission;
}
void
SWGExecution::setCommission(double commission) {
    this->commission = commission;
    this->m_commission_isSet = true;
}

QString*
SWGExecution::getTradePublishIndicator() {
    return trade_publish_indicator;
}
void
SWGExecution::setTradePublishIndicator(QString* trade_publish_indicator) {
    this->trade_publish_indicator = trade_publish_indicator;
    this->m_trade_publish_indicator_isSet = true;
}

QString*
SWGExecution::getText() {
    return text;
}
void
SWGExecution::setText(QString* text) {
    this->text = text;
    this->m_text_isSet = true;
}

QString*
SWGExecution::getTrdMatchId() {
    return trd_match_id;
}
void
SWGExecution::setTrdMatchId(QString* trd_match_id) {
    this->trd_match_id = trd_match_id;
    this->m_trd_match_id_isSet = true;
}

double
SWGExecution::getExecCost() {
    return exec_cost;
}
void
SWGExecution::setExecCost(double exec_cost) {
    this->exec_cost = exec_cost;
    this->m_exec_cost_isSet = true;
}

double
SWGExecution::getExecComm() {
    return exec_comm;
}
void
SWGExecution::setExecComm(double exec_comm) {
    this->exec_comm = exec_comm;
    this->m_exec_comm_isSet = true;
}

double
SWGExecution::getHomeNotional() {
    return home_notional;
}
void
SWGExecution::setHomeNotional(double home_notional) {
    this->home_notional = home_notional;
    this->m_home_notional_isSet = true;
}

double
SWGExecution::getForeignNotional() {
    return foreign_notional;
}
void
SWGExecution::setForeignNotional(double foreign_notional) {
    this->foreign_notional = foreign_notional;
    this->m_foreign_notional_isSet = true;
}

QDateTime*
SWGExecution::getTransactTime() {
    return transact_time;
}
void
SWGExecution::setTransactTime(QDateTime* transact_time) {
    this->transact_time = transact_time;
    this->m_transact_time_isSet = true;
}

QDateTime*
SWGExecution::getTimestamp() {
    return timestamp;
}
void
SWGExecution::setTimestamp(QDateTime* timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

double
SWGExecution::getExecGrossPnl() {
    return exec_gross_pnl;
}
void
SWGExecution::setExecGrossPnl(double exec_gross_pnl) {
    this->exec_gross_pnl = exec_gross_pnl;
    this->m_exec_gross_pnl_isSet = true;
}

double
SWGExecution::getCurrentQty() {
    return current_qty;
}
void
SWGExecution::setCurrentQty(double current_qty) {
    this->current_qty = current_qty;
    this->m_current_qty_isSet = true;
}

double
SWGExecution::getAvgEntryPrice() {
    return avg_entry_price;
}
void
SWGExecution::setAvgEntryPrice(double avg_entry_price) {
    this->avg_entry_price = avg_entry_price;
    this->m_avg_entry_price_isSet = true;
}

double
SWGExecution::getRealisedPnl() {
    return realised_pnl;
}
void
SWGExecution::setRealisedPnl(double realised_pnl) {
    this->realised_pnl = realised_pnl;
    this->m_realised_pnl_isSet = true;
}

double
SWGExecution::getUnrealisedPnl() {
    return unrealised_pnl;
}
void
SWGExecution::setUnrealisedPnl(double unrealised_pnl) {
    this->unrealised_pnl = unrealised_pnl;
    this->m_unrealised_pnl_isSet = true;
}


bool
SWGExecution::isSet(){
    bool isObjectUpdated = false;
    do{
        if(exec_id != nullptr && *exec_id != QString("")){ isObjectUpdated = true; break;}
        if(order_id != nullptr && *order_id != QString("")){ isObjectUpdated = true; break;}
        if(cl_ord_id != nullptr && *cl_ord_id != QString("")){ isObjectUpdated = true; break;}
        if(cl_ord_link_id != nullptr && *cl_ord_link_id != QString("")){ isObjectUpdated = true; break;}
        if(m_account_isSet){ isObjectUpdated = true; break;}
        if(symbol != nullptr && *symbol != QString("")){ isObjectUpdated = true; break;}
        if(side != nullptr && *side != QString("")){ isObjectUpdated = true; break;}
        if(m_last_qty_isSet){ isObjectUpdated = true; break;}
        if(m_last_px_isSet){ isObjectUpdated = true; break;}
        if(last_liquidity_ind != nullptr && *last_liquidity_ind != QString("")){ isObjectUpdated = true; break;}
        if(m_order_qty_isSet){ isObjectUpdated = true; break;}
        if(m_price_isSet){ isObjectUpdated = true; break;}
        if(display_qty != nullptr && display_qty->isSet()){ isObjectUpdated = true; break;}
        if(m_stop_px_isSet){ isObjectUpdated = true; break;}
        if(m_peg_offset_value_isSet){ isObjectUpdated = true; break;}
        if(peg_price_type != nullptr && *peg_price_type != QString("")){ isObjectUpdated = true; break;}
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(settl_currency != nullptr && *settl_currency != QString("")){ isObjectUpdated = true; break;}
        if(exec_type != nullptr && *exec_type != QString("")){ isObjectUpdated = true; break;}
        if(ord_type != nullptr && *ord_type != QString("")){ isObjectUpdated = true; break;}
        if(time_in_force != nullptr && *time_in_force != QString("")){ isObjectUpdated = true; break;}
        if(exec_inst != nullptr && *exec_inst != QString("")){ isObjectUpdated = true; break;}
        if(contingency_type != nullptr && *contingency_type != QString("")){ isObjectUpdated = true; break;}
        if(ord_status != nullptr && *ord_status != QString("")){ isObjectUpdated = true; break;}
        if(triggered != nullptr && *triggered != QString("")){ isObjectUpdated = true; break;}
        if(m_working_indicator_isSet){ isObjectUpdated = true; break;}
        if(ord_rej_reason != nullptr && *ord_rej_reason != QString("")){ isObjectUpdated = true; break;}
        if(m_leaves_qty_isSet){ isObjectUpdated = true; break;}
        if(cum_qty != nullptr && cum_qty->isSet()){ isObjectUpdated = true; break;}
        if(m_avg_px_isSet){ isObjectUpdated = true; break;}
        if(m_commission_isSet){ isObjectUpdated = true; break;}
        if(trade_publish_indicator != nullptr && *trade_publish_indicator != QString("")){ isObjectUpdated = true; break;}
        if(text != nullptr && *text != QString("")){ isObjectUpdated = true; break;}
        if(trd_match_id != nullptr && *trd_match_id != QString("")){ isObjectUpdated = true; break;}
        if(m_exec_cost_isSet){ isObjectUpdated = true; break;}
        if(m_exec_comm_isSet){ isObjectUpdated = true; break;}
        if(m_home_notional_isSet){ isObjectUpdated = true; break;}
        if(m_foreign_notional_isSet){ isObjectUpdated = true; break;}
        
        
        if(m_exec_gross_pnl_isSet){ isObjectUpdated = true; break;}
        if(m_current_qty_isSet){ isObjectUpdated = true; break;}
        if(m_avg_entry_price_isSet){ isObjectUpdated = true; break;}
        if(m_realised_pnl_isSet){ isObjectUpdated = true; break;}
        if(m_unrealised_pnl_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

