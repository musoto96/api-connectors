/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGPinnedMessage.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGPinnedMessage::SWGPinnedMessage(QString json) {
    init();
    this->fromJson(json);
}

SWGPinnedMessage::SWGPinnedMessage() {
    init();
}

SWGPinnedMessage::~SWGPinnedMessage() {
    this->cleanup();
}

void
SWGPinnedMessage::init() {
    id = 0.0;
    m_id_isSet = false;
    channel_id = 0.0;
    m_channel_id_isSet = false;
    message_id = 0.0;
    m_message_id_isSet = false;
    created = NULL;
    m_created_isSet = false;
    ended = NULL;
    m_ended_isSet = false;
    created_user_id = 0.0;
    m_created_user_id_isSet = false;
    ended_user_id = 0.0;
    m_ended_user_id_isSet = false;
}

void
SWGPinnedMessage::cleanup() {
    if(id != nullptr) { 
        delete id;
    }
    if(channel_id != nullptr) { 
        delete channel_id;
    }
    if(message_id != nullptr) { 
        delete message_id;
    }
    if(created != nullptr) { 
        delete created;
    }
    if(ended != nullptr) { 
        delete ended;
    }


}

SWGPinnedMessage*
SWGPinnedMessage::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGPinnedMessage::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&id, pJson["id"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&channel_id, pJson["channelID"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&message_id, pJson["messageId"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&created, pJson["created"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&ended, pJson["ended"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&created_user_id, pJson["createdUserId"], "double", "");
    
    ::Swagger::setValue(&ended_user_id, pJson["endedUserId"], "double", "");
    
}

QString
SWGPinnedMessage::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGPinnedMessage::asJsonObject() {
    QJsonObject obj;
    if((id != nullptr) && (id->isSet())){
        toJsonValue(QString("id"), id, obj, QString("SWGNumber"));
    }
    if((channel_id != nullptr) && (channel_id->isSet())){
        toJsonValue(QString("channelID"), channel_id, obj, QString("SWGNumber"));
    }
    if((message_id != nullptr) && (message_id->isSet())){
        toJsonValue(QString("messageId"), message_id, obj, QString("SWGNumber"));
    }
    if(created != nullptr) { 
        toJsonValue(QString("created"), created, obj, QString("QDateTime"));
    }
    if(ended != nullptr) { 
        toJsonValue(QString("ended"), ended, obj, QString("QDateTime"));
    }
    if(m_created_user_id_isSet){
        obj.insert("createdUserId", QJsonValue(created_user_id));
    }
    if(m_ended_user_id_isSet){
        obj.insert("endedUserId", QJsonValue(ended_user_id));
    }

    return obj;
}

SWGNumber*
SWGPinnedMessage::getId() {
    return id;
}
void
SWGPinnedMessage::setId(SWGNumber* id) {
    this->id = id;
    this->m_id_isSet = true;
}

SWGNumber*
SWGPinnedMessage::getChannelId() {
    return channel_id;
}
void
SWGPinnedMessage::setChannelId(SWGNumber* channel_id) {
    this->channel_id = channel_id;
    this->m_channel_id_isSet = true;
}

SWGNumber*
SWGPinnedMessage::getMessageId() {
    return message_id;
}
void
SWGPinnedMessage::setMessageId(SWGNumber* message_id) {
    this->message_id = message_id;
    this->m_message_id_isSet = true;
}

QDateTime*
SWGPinnedMessage::getCreated() {
    return created;
}
void
SWGPinnedMessage::setCreated(QDateTime* created) {
    this->created = created;
    this->m_created_isSet = true;
}

QDateTime*
SWGPinnedMessage::getEnded() {
    return ended;
}
void
SWGPinnedMessage::setEnded(QDateTime* ended) {
    this->ended = ended;
    this->m_ended_isSet = true;
}

double
SWGPinnedMessage::getCreatedUserId() {
    return created_user_id;
}
void
SWGPinnedMessage::setCreatedUserId(double created_user_id) {
    this->created_user_id = created_user_id;
    this->m_created_user_id_isSet = true;
}

double
SWGPinnedMessage::getEndedUserId() {
    return ended_user_id;
}
void
SWGPinnedMessage::setEndedUserId(double ended_user_id) {
    this->ended_user_id = ended_user_id;
    this->m_ended_user_id_isSet = true;
}


bool
SWGPinnedMessage::isSet(){
    bool isObjectUpdated = false;
    do{
        if(id != nullptr && id->isSet()){ isObjectUpdated = true; break;}
        if(channel_id != nullptr && channel_id->isSet()){ isObjectUpdated = true; break;}
        if(message_id != nullptr && message_id->isSet()){ isObjectUpdated = true; break;}
        
        
        if(m_created_user_id_isSet){ isObjectUpdated = true; break;}
        if(m_ended_user_id_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

