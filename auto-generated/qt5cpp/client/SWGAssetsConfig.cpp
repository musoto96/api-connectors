/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGAssetsConfig.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGAssetsConfig::SWGAssetsConfig(QString json) {
    init();
    this->fromJson(json);
}

SWGAssetsConfig::SWGAssetsConfig() {
    init();
}

SWGAssetsConfig::~SWGAssetsConfig() {
    this->cleanup();
}

void
SWGAssetsConfig::init() {
    asset = new QString("");
    m_asset_isSet = false;
    currency = new QString("");
    m_currency_isSet = false;
    major_currency = new QString("");
    m_major_currency_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    currency_type = new QString("");
    m_currency_type_isSet = false;
    scale = 0.0;
    m_scale_isSet = false;
    enabled = false;
    m_enabled_isSet = false;
    is_margin_currency = false;
    m_is_margin_currency_isSet = false;
    networks = new QList<SWGAssetsConfigNetworkItem*>();
    m_networks_isSet = false;
}

void
SWGAssetsConfig::cleanup() {
    if(asset != nullptr) { 
        delete asset;
    }
    if(currency != nullptr) { 
        delete currency;
    }
    if(major_currency != nullptr) { 
        delete major_currency;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(currency_type != nullptr) { 
        delete currency_type;
    }



    if(networks != nullptr) { 
        auto arr = networks;
        for(auto o: *arr) { 
            delete o;
        }
        delete networks;
    }
}

SWGAssetsConfig*
SWGAssetsConfig::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGAssetsConfig::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&asset, pJson["asset"], "QString", "QString");
    
    ::Swagger::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::Swagger::setValue(&major_currency, pJson["majorCurrency"], "QString", "QString");
    
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    
    ::Swagger::setValue(&currency_type, pJson["currencyType"], "QString", "QString");
    
    ::Swagger::setValue(&scale, pJson["scale"], "double", "");
    
    ::Swagger::setValue(&enabled, pJson["enabled"], "bool", "");
    
    ::Swagger::setValue(&is_margin_currency, pJson["isMarginCurrency"], "bool", "");
    
    
    ::Swagger::setValue(&networks, pJson["networks"], "QList", "SWGAssetsConfigNetworkItem");
}

QString
SWGAssetsConfig::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGAssetsConfig::asJsonObject() {
    QJsonObject obj;
    if(asset != nullptr && *asset != QString("")){
        toJsonValue(QString("asset"), asset, obj, QString("QString"));
    }
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if(major_currency != nullptr && *major_currency != QString("")){
        toJsonValue(QString("majorCurrency"), major_currency, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(currency_type != nullptr && *currency_type != QString("")){
        toJsonValue(QString("currencyType"), currency_type, obj, QString("QString"));
    }
    if(m_scale_isSet){
        obj.insert("scale", QJsonValue(scale));
    }
    if(m_enabled_isSet){
        obj.insert("enabled", QJsonValue(enabled));
    }
    if(m_is_margin_currency_isSet){
        obj.insert("isMarginCurrency", QJsonValue(is_margin_currency));
    }
    if(networks->size() > 0){
        toJsonArray((QList<void*>*)networks, obj, "networks", "SWGAssetsConfigNetworkItem");
    }

    return obj;
}

QString*
SWGAssetsConfig::getAsset() {
    return asset;
}
void
SWGAssetsConfig::setAsset(QString* asset) {
    this->asset = asset;
    this->m_asset_isSet = true;
}

QString*
SWGAssetsConfig::getCurrency() {
    return currency;
}
void
SWGAssetsConfig::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

QString*
SWGAssetsConfig::getMajorCurrency() {
    return major_currency;
}
void
SWGAssetsConfig::setMajorCurrency(QString* major_currency) {
    this->major_currency = major_currency;
    this->m_major_currency_isSet = true;
}

QString*
SWGAssetsConfig::getName() {
    return name;
}
void
SWGAssetsConfig::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
SWGAssetsConfig::getCurrencyType() {
    return currency_type;
}
void
SWGAssetsConfig::setCurrencyType(QString* currency_type) {
    this->currency_type = currency_type;
    this->m_currency_type_isSet = true;
}

double
SWGAssetsConfig::getScale() {
    return scale;
}
void
SWGAssetsConfig::setScale(double scale) {
    this->scale = scale;
    this->m_scale_isSet = true;
}

bool
SWGAssetsConfig::isEnabled() {
    return enabled;
}
void
SWGAssetsConfig::setEnabled(bool enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}

bool
SWGAssetsConfig::isIsMarginCurrency() {
    return is_margin_currency;
}
void
SWGAssetsConfig::setIsMarginCurrency(bool is_margin_currency) {
    this->is_margin_currency = is_margin_currency;
    this->m_is_margin_currency_isSet = true;
}

QList<SWGAssetsConfigNetworkItem*>*
SWGAssetsConfig::getNetworks() {
    return networks;
}
void
SWGAssetsConfig::setNetworks(QList<SWGAssetsConfigNetworkItem*>* networks) {
    this->networks = networks;
    this->m_networks_isSet = true;
}


bool
SWGAssetsConfig::isSet(){
    bool isObjectUpdated = false;
    do{
        if(asset != nullptr && *asset != QString("")){ isObjectUpdated = true; break;}
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(major_currency != nullptr && *major_currency != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(currency_type != nullptr && *currency_type != QString("")){ isObjectUpdated = true; break;}
        if(m_scale_isSet){ isObjectUpdated = true; break;}
        if(m_enabled_isSet){ isObjectUpdated = true; break;}
        if(m_is_margin_currency_isSet){ isObjectUpdated = true; break;}
        if(networks->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

