/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGGuildApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"
#include "SWGQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGGuildApi::SWGGuildApi() {}

SWGGuildApi::~SWGGuildApi() {}

SWGGuildApi::SWGGuildApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGGuildApi::guild_archive() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/guild/archive");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGGuildApi::guild_archiveCallback);

    worker->execute(&input);
}

void
SWGGuildApi::guild_archiveCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    auto wrapper = new SWGQObjectWrapper<SWGObject*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit guild_archiveSignal(output);
    } else {
        emit guild_archiveSignalE(output, error_type, error_str);
        emit guild_archiveSignalEFull(worker, error_type, error_str);
    }
}

void
SWGGuildApi::guild_edit(QString* name, QString* emoji, double pot_distribution_percent, QString* pot_distribution_type, double pot_trader_id, QString* description, QString* twitter, QString* discord, QString* img_url, bool is_private) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/guild");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "PUT");

    if (name != nullptr) {
        input.add_var("name", *name);
    }
    if (emoji != nullptr) {
        input.add_var("emoji", *emoji);
    }
    if (pot_distribution_percent != nullptr) {
        input.add_var("potDistributionPercent", *pot_distribution_percent);
    }
    if (pot_distribution_type != nullptr) {
        input.add_var("potDistributionType", *pot_distribution_type);
    }
    if (pot_trader_id != nullptr) {
        input.add_var("potTraderId", *pot_trader_id);
    }
    if (description != nullptr) {
        input.add_var("description", *description);
    }
    if (twitter != nullptr) {
        input.add_var("twitter", *twitter);
    }
    if (discord != nullptr) {
        input.add_var("discord", *discord);
    }
    if (img_url != nullptr) {
        input.add_var("imgUrl", *img_url);
    }
    if (is_private != nullptr) {
        input.add_var("isPrivate", *is_private);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGGuildApi::guild_editCallback);

    worker->execute(&input);
}

void
SWGGuildApi::guild_editCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGGuild* output = static_cast<SWGGuild*>(create(json, QString("SWGGuild")));
    auto wrapper = new SWGQObjectWrapper<SWGGuild*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit guild_editSignal(output);
    } else {
        emit guild_editSignalE(output, error_type, error_str);
        emit guild_editSignalEFull(worker, error_type, error_str);
    }
}

void
SWGGuildApi::guild_get() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/guild");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGGuildApi::guild_getCallback);

    worker->execute(&input);
}

void
SWGGuildApi::guild_getCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<SWGX-any*>* output = new QList<SWGX-any*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new SWGQObjectWrapper<QList<SWGX-any*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        SWGX-any* o = new SWGX-any();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new SWGQObjectWrapper<SWGX-any*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit guild_getSignal(output);
    } else {
        emit guild_getSignalE(output, error_type, error_str);
        emit guild_getSignalEFull(worker, error_type, error_str);
    }
}

void
SWGGuildApi::guild_join(QString* code) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/guild/join");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (code != nullptr) {
        input.add_var("code", *code);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGGuildApi::guild_joinCallback);

    worker->execute(&input);
}

void
SWGGuildApi::guild_joinCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    auto wrapper = new SWGQObjectWrapper<SWGObject*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit guild_joinSignal(output);
    } else {
        emit guild_joinSignalE(output, error_type, error_str);
        emit guild_joinSignalEFull(worker, error_type, error_str);
    }
}

void
SWGGuildApi::guild_kick(double member_user_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/guild/kick");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (member_user_id != nullptr) {
        input.add_var("memberUserId", *member_user_id);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGGuildApi::guild_kickCallback);

    worker->execute(&input);
}

void
SWGGuildApi::guild_kickCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    auto wrapper = new SWGQObjectWrapper<SWGObject*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit guild_kickSignal(output);
    } else {
        emit guild_kickSignalE(output, error_type, error_str);
        emit guild_kickSignalEFull(worker, error_type, error_str);
    }
}

void
SWGGuildApi::guild_leave() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/guild/leave");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGGuildApi::guild_leaveCallback);

    worker->execute(&input);
}

void
SWGGuildApi::guild_leaveCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    auto wrapper = new SWGQObjectWrapper<SWGObject*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit guild_leaveSignal(output);
    } else {
        emit guild_leaveSignalE(output, error_type, error_str);
        emit guild_leaveSignalEFull(worker, error_type, error_str);
    }
}

void
SWGGuildApi::guild_new(QString* name, QString* emoji, double pot_distribution_percent, QString* pot_distribution_type, QString* description, QString* twitter, QString* discord, QString* img_url, bool is_private) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/guild");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (name != nullptr) {
        input.add_var("name", *name);
    }
    if (emoji != nullptr) {
        input.add_var("emoji", *emoji);
    }
    if (pot_distribution_percent != nullptr) {
        input.add_var("potDistributionPercent", *pot_distribution_percent);
    }
    if (pot_distribution_type != nullptr) {
        input.add_var("potDistributionType", *pot_distribution_type);
    }
    if (description != nullptr) {
        input.add_var("description", *description);
    }
    if (twitter != nullptr) {
        input.add_var("twitter", *twitter);
    }
    if (discord != nullptr) {
        input.add_var("discord", *discord);
    }
    if (img_url != nullptr) {
        input.add_var("imgUrl", *img_url);
    }
    if (is_private != nullptr) {
        input.add_var("isPrivate", *is_private);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGGuildApi::guild_newCallback);

    worker->execute(&input);
}

void
SWGGuildApi::guild_newCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGGuild* output = static_cast<SWGGuild*>(create(json, QString("SWGGuild")));
    auto wrapper = new SWGQObjectWrapper<SWGGuild*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit guild_newSignal(output);
    } else {
        emit guild_newSignalE(output, error_type, error_str);
        emit guild_newSignalEFull(worker, error_type, error_str);
    }
}

void
SWGGuildApi::guild_shareTrades(bool share_trades) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/guild/shareTrades");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (share_trades != nullptr) {
        input.add_var("shareTrades", *share_trades);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGGuildApi::guild_shareTradesCallback);

    worker->execute(&input);
}

void
SWGGuildApi::guild_shareTradesCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    auto wrapper = new SWGQObjectWrapper<SWGObject*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit guild_shareTradesSignal(output);
    } else {
        emit guild_shareTradesSignalE(output, error_type, error_str);
        emit guild_shareTradesSignalEFull(worker, error_type, error_str);
    }
}


}
