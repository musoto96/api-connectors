/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGCollateralSupportAgreement.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGCollateralSupportAgreement::SWGCollateralSupportAgreement(QString json) {
    init();
    this->fromJson(json);
}

SWGCollateralSupportAgreement::SWGCollateralSupportAgreement() {
    init();
}

SWGCollateralSupportAgreement::~SWGCollateralSupportAgreement() {
    this->cleanup();
}

void
SWGCollateralSupportAgreement::init() {
    csa_id = new QString("");
    m_csa_id_isSet = false;
    account = 0.0;
    m_account_isSet = false;
    currency = new QString("");
    m_currency_isSet = false;
    amount = 0.0;
    m_amount_isSet = false;
    min_amount = 0.0;
    m_min_amount_isSet = false;
    threshold = 0.0;
    m_threshold_isSet = false;
    mm_ratio_margin_call = 0.0;
    m_mm_ratio_margin_call_isSet = false;
    mm_ratio_liquidation = 0.0;
    m_mm_ratio_liquidation_isSet = false;
    start_time = new QString("");
    m_start_time_isSet = false;
    maturity_time = new QString("");
    m_maturity_time_isSet = false;
    maturity_instruction = new QString("");
    m_maturity_instruction_isSet = false;
    csa_status = new QString("");
    m_csa_status_isSet = false;
    requester = new QString("");
    m_requester_isSet = false;
    client_details = new QString("");
    m_client_details_isSet = false;
    text = new QString("");
    m_text_isSet = false;
    timestamp = new QString("");
    m_timestamp_isSet = false;
}

void
SWGCollateralSupportAgreement::cleanup() {
    if(csa_id != nullptr) { 
        delete csa_id;
    }
    if(account != nullptr) { 
        delete account;
    }
    if(currency != nullptr) { 
        delete currency;
    }
    if(amount != nullptr) { 
        delete amount;
    }
    if(min_amount != nullptr) { 
        delete min_amount;
    }
    if(threshold != nullptr) { 
        delete threshold;
    }
    if(mm_ratio_margin_call != nullptr) { 
        delete mm_ratio_margin_call;
    }
    if(mm_ratio_liquidation != nullptr) { 
        delete mm_ratio_liquidation;
    }
    if(start_time != nullptr) { 
        delete start_time;
    }
    if(maturity_time != nullptr) { 
        delete maturity_time;
    }
    if(maturity_instruction != nullptr) { 
        delete maturity_instruction;
    }
    if(csa_status != nullptr) { 
        delete csa_status;
    }
    if(requester != nullptr) { 
        delete requester;
    }
    if(client_details != nullptr) { 
        delete client_details;
    }
    if(text != nullptr) { 
        delete text;
    }
    if(timestamp != nullptr) { 
        delete timestamp;
    }
}

SWGCollateralSupportAgreement*
SWGCollateralSupportAgreement::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGCollateralSupportAgreement::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&csa_id, pJson["csaID"], "QString", "QString");
    
    ::Swagger::setValue(&account, pJson["account"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::Swagger::setValue(&amount, pJson["amount"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&min_amount, pJson["minAmount"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&threshold, pJson["threshold"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&mm_ratio_margin_call, pJson["mmRatioMarginCall"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&mm_ratio_liquidation, pJson["mmRatioLiquidation"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&start_time, pJson["startTime"], "QString", "QString");
    
    ::Swagger::setValue(&maturity_time, pJson["maturityTime"], "QString", "QString");
    
    ::Swagger::setValue(&maturity_instruction, pJson["maturityInstruction"], "QString", "QString");
    
    ::Swagger::setValue(&csa_status, pJson["csaStatus"], "QString", "QString");
    
    ::Swagger::setValue(&requester, pJson["requester"], "QString", "QString");
    
    ::Swagger::setValue(&client_details, pJson["clientDetails"], "QString", "QString");
    
    ::Swagger::setValue(&text, pJson["text"], "QString", "QString");
    
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "QString", "QString");
    
}

QString
SWGCollateralSupportAgreement::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGCollateralSupportAgreement::asJsonObject() {
    QJsonObject obj;
    if(csa_id != nullptr && *csa_id != QString("")){
        toJsonValue(QString("csaID"), csa_id, obj, QString("QString"));
    }
    if((account != nullptr) && (account->isSet())){
        toJsonValue(QString("account"), account, obj, QString("SWGNumber"));
    }
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if((amount != nullptr) && (amount->isSet())){
        toJsonValue(QString("amount"), amount, obj, QString("SWGNumber"));
    }
    if((min_amount != nullptr) && (min_amount->isSet())){
        toJsonValue(QString("minAmount"), min_amount, obj, QString("SWGNumber"));
    }
    if((threshold != nullptr) && (threshold->isSet())){
        toJsonValue(QString("threshold"), threshold, obj, QString("SWGNumber"));
    }
    if((mm_ratio_margin_call != nullptr) && (mm_ratio_margin_call->isSet())){
        toJsonValue(QString("mmRatioMarginCall"), mm_ratio_margin_call, obj, QString("SWGNumber"));
    }
    if((mm_ratio_liquidation != nullptr) && (mm_ratio_liquidation->isSet())){
        toJsonValue(QString("mmRatioLiquidation"), mm_ratio_liquidation, obj, QString("SWGNumber"));
    }
    if(start_time != nullptr && *start_time != QString("")){
        toJsonValue(QString("startTime"), start_time, obj, QString("QString"));
    }
    if(maturity_time != nullptr && *maturity_time != QString("")){
        toJsonValue(QString("maturityTime"), maturity_time, obj, QString("QString"));
    }
    if(maturity_instruction != nullptr && *maturity_instruction != QString("")){
        toJsonValue(QString("maturityInstruction"), maturity_instruction, obj, QString("QString"));
    }
    if(csa_status != nullptr && *csa_status != QString("")){
        toJsonValue(QString("csaStatus"), csa_status, obj, QString("QString"));
    }
    if(requester != nullptr && *requester != QString("")){
        toJsonValue(QString("requester"), requester, obj, QString("QString"));
    }
    if(client_details != nullptr && *client_details != QString("")){
        toJsonValue(QString("clientDetails"), client_details, obj, QString("QString"));
    }
    if(text != nullptr && *text != QString("")){
        toJsonValue(QString("text"), text, obj, QString("QString"));
    }
    if(timestamp != nullptr && *timestamp != QString("")){
        toJsonValue(QString("timestamp"), timestamp, obj, QString("QString"));
    }

    return obj;
}

QString*
SWGCollateralSupportAgreement::getCsaId() {
    return csa_id;
}
void
SWGCollateralSupportAgreement::setCsaId(QString* csa_id) {
    this->csa_id = csa_id;
    this->m_csa_id_isSet = true;
}

SWGNumber*
SWGCollateralSupportAgreement::getAccount() {
    return account;
}
void
SWGCollateralSupportAgreement::setAccount(SWGNumber* account) {
    this->account = account;
    this->m_account_isSet = true;
}

QString*
SWGCollateralSupportAgreement::getCurrency() {
    return currency;
}
void
SWGCollateralSupportAgreement::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

SWGNumber*
SWGCollateralSupportAgreement::getAmount() {
    return amount;
}
void
SWGCollateralSupportAgreement::setAmount(SWGNumber* amount) {
    this->amount = amount;
    this->m_amount_isSet = true;
}

SWGNumber*
SWGCollateralSupportAgreement::getMinAmount() {
    return min_amount;
}
void
SWGCollateralSupportAgreement::setMinAmount(SWGNumber* min_amount) {
    this->min_amount = min_amount;
    this->m_min_amount_isSet = true;
}

SWGNumber*
SWGCollateralSupportAgreement::getThreshold() {
    return threshold;
}
void
SWGCollateralSupportAgreement::setThreshold(SWGNumber* threshold) {
    this->threshold = threshold;
    this->m_threshold_isSet = true;
}

SWGNumber*
SWGCollateralSupportAgreement::getMmRatioMarginCall() {
    return mm_ratio_margin_call;
}
void
SWGCollateralSupportAgreement::setMmRatioMarginCall(SWGNumber* mm_ratio_margin_call) {
    this->mm_ratio_margin_call = mm_ratio_margin_call;
    this->m_mm_ratio_margin_call_isSet = true;
}

SWGNumber*
SWGCollateralSupportAgreement::getMmRatioLiquidation() {
    return mm_ratio_liquidation;
}
void
SWGCollateralSupportAgreement::setMmRatioLiquidation(SWGNumber* mm_ratio_liquidation) {
    this->mm_ratio_liquidation = mm_ratio_liquidation;
    this->m_mm_ratio_liquidation_isSet = true;
}

QString*
SWGCollateralSupportAgreement::getStartTime() {
    return start_time;
}
void
SWGCollateralSupportAgreement::setStartTime(QString* start_time) {
    this->start_time = start_time;
    this->m_start_time_isSet = true;
}

QString*
SWGCollateralSupportAgreement::getMaturityTime() {
    return maturity_time;
}
void
SWGCollateralSupportAgreement::setMaturityTime(QString* maturity_time) {
    this->maturity_time = maturity_time;
    this->m_maturity_time_isSet = true;
}

QString*
SWGCollateralSupportAgreement::getMaturityInstruction() {
    return maturity_instruction;
}
void
SWGCollateralSupportAgreement::setMaturityInstruction(QString* maturity_instruction) {
    this->maturity_instruction = maturity_instruction;
    this->m_maturity_instruction_isSet = true;
}

QString*
SWGCollateralSupportAgreement::getCsaStatus() {
    return csa_status;
}
void
SWGCollateralSupportAgreement::setCsaStatus(QString* csa_status) {
    this->csa_status = csa_status;
    this->m_csa_status_isSet = true;
}

QString*
SWGCollateralSupportAgreement::getRequester() {
    return requester;
}
void
SWGCollateralSupportAgreement::setRequester(QString* requester) {
    this->requester = requester;
    this->m_requester_isSet = true;
}

QString*
SWGCollateralSupportAgreement::getClientDetails() {
    return client_details;
}
void
SWGCollateralSupportAgreement::setClientDetails(QString* client_details) {
    this->client_details = client_details;
    this->m_client_details_isSet = true;
}

QString*
SWGCollateralSupportAgreement::getText() {
    return text;
}
void
SWGCollateralSupportAgreement::setText(QString* text) {
    this->text = text;
    this->m_text_isSet = true;
}

QString*
SWGCollateralSupportAgreement::getTimestamp() {
    return timestamp;
}
void
SWGCollateralSupportAgreement::setTimestamp(QString* timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}


bool
SWGCollateralSupportAgreement::isSet(){
    bool isObjectUpdated = false;
    do{
        if(csa_id != nullptr && *csa_id != QString("")){ isObjectUpdated = true; break;}
        if(account != nullptr && account->isSet()){ isObjectUpdated = true; break;}
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(amount != nullptr && amount->isSet()){ isObjectUpdated = true; break;}
        if(min_amount != nullptr && min_amount->isSet()){ isObjectUpdated = true; break;}
        if(threshold != nullptr && threshold->isSet()){ isObjectUpdated = true; break;}
        if(mm_ratio_margin_call != nullptr && mm_ratio_margin_call->isSet()){ isObjectUpdated = true; break;}
        if(mm_ratio_liquidation != nullptr && mm_ratio_liquidation->isSet()){ isObjectUpdated = true; break;}
        if(start_time != nullptr && *start_time != QString("")){ isObjectUpdated = true; break;}
        if(maturity_time != nullptr && *maturity_time != QString("")){ isObjectUpdated = true; break;}
        if(maturity_instruction != nullptr && *maturity_instruction != QString("")){ isObjectUpdated = true; break;}
        if(csa_status != nullptr && *csa_status != QString("")){ isObjectUpdated = true; break;}
        if(requester != nullptr && *requester != QString("")){ isObjectUpdated = true; break;}
        if(client_details != nullptr && *client_details != QString("")){ isObjectUpdated = true; break;}
        if(text != nullptr && *text != QString("")){ isObjectUpdated = true; break;}
        if(timestamp != nullptr && *timestamp != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

