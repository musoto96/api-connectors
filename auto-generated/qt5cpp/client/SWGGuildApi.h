/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGGuildApi_H_
#define _SWG_SWGGuildApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGError.h"
#include "SWGGuild.h"
#include "SWGObject.h"
#include "SWGX-any.h"

#include <QObject>

namespace Swagger {

class SWGGuildApi: public QObject {
    Q_OBJECT

public:
    SWGGuildApi();
    SWGGuildApi(QString host, QString basePath);
    ~SWGGuildApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void guild_archive();
    void guild_edit(QString* name, QString* emoji, double pot_distribution_percent, QString* pot_distribution_type, double pot_trader_id, QString* description, QString* twitter, QString* discord, QString* img_url, bool is_private);
    void guild_get();
    void guild_join(QString* code);
    void guild_kick(double member_user_id);
    void guild_leave();
    void guild_new(QString* name, QString* emoji, double pot_distribution_percent, QString* pot_distribution_type, QString* description, QString* twitter, QString* discord, QString* img_url, bool is_private);
    void guild_shareTrades(bool share_trades);
    
private:
    void guild_archiveCallback (SWGHttpRequestWorker * worker);
    void guild_editCallback (SWGHttpRequestWorker * worker);
    void guild_getCallback (SWGHttpRequestWorker * worker);
    void guild_joinCallback (SWGHttpRequestWorker * worker);
    void guild_kickCallback (SWGHttpRequestWorker * worker);
    void guild_leaveCallback (SWGHttpRequestWorker * worker);
    void guild_newCallback (SWGHttpRequestWorker * worker);
    void guild_shareTradesCallback (SWGHttpRequestWorker * worker);
    
signals:
    void guild_archiveSignal(SWGObject* summary);
    void guild_editSignal(SWGGuild* summary);
    void guild_getSignal(QList<SWGX-any*>* summary);
    void guild_joinSignal(SWGObject* summary);
    void guild_kickSignal(SWGObject* summary);
    void guild_leaveSignal(SWGObject* summary);
    void guild_newSignal(SWGGuild* summary);
    void guild_shareTradesSignal(SWGObject* summary);
    
    void guild_archiveSignalE(SWGObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void guild_editSignalE(SWGGuild* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void guild_getSignalE(QList<SWGX-any*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void guild_joinSignalE(SWGObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void guild_kickSignalE(SWGObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void guild_leaveSignalE(SWGObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void guild_newSignalE(SWGGuild* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void guild_shareTradesSignalE(SWGObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void guild_archiveSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void guild_editSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void guild_getSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void guild_joinSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void guild_kickSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void guild_leaveSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void guild_newSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void guild_shareTradesSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
