/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGUserPreferences.h
 *
 * 
 */

#ifndef SWGUserPreferences_H_
#define SWGUserPreferences_H_

#include <QJsonObject>


#include "SWGObject.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "SWGObject.h"

namespace Swagger {

class SWGUserPreferences: public SWGObject {
public:
    SWGUserPreferences();
    SWGUserPreferences(QString json);
    ~SWGUserPreferences();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    SWGUserPreferences* fromJson(QString jsonString) override;

    bool isAlertOnLiquidations();
    void setAlertOnLiquidations(bool alert_on_liquidations);

    bool isAnimationsEnabled();
    void setAnimationsEnabled(bool animations_enabled);

    QDateTime* getAnnouncementsLastSeen();
    void setAnnouncementsLastSeen(QDateTime* announcements_last_seen);

    double getChatChannelId();
    void setChatChannelId(double chat_channel_id);

    QString* getColorTheme();
    void setColorTheme(QString* color_theme);

    QString* getCurrency();
    void setCurrency(QString* currency);

    bool isDebug();
    void setDebug(bool debug);

    QList<QString*>* getDisableEmails();
    void setDisableEmails(QList<QString*>* disable_emails);

    QList<QString*>* getDisablePush();
    void setDisablePush(QList<QString*>* disable_push);

    bool isDisplayCorpEnrollUpsell();
    void setDisplayCorpEnrollUpsell(bool display_corp_enroll_upsell);

    QString* getEquivalentCurrency();
    void setEquivalentCurrency(QString* equivalent_currency);

    QList<QString*>* getFeatures();
    void setFeatures(QList<QString*>* features);

    QList<QString*>* getFavourites();
    void setFavourites(QList<QString*>* favourites);

    QList<QString*>* getFavouritesAssets();
    void setFavouritesAssets(QList<QString*>* favourites_assets);

    QList<QString*>* getFavouritesOrdered();
    void setFavouritesOrdered(QList<QString*>* favourites_ordered);

    QList<QString*>* getHideConfirmDialogs();
    void setHideConfirmDialogs(QList<QString*>* hide_confirm_dialogs);

    bool isHideConnectionModal();
    void setHideConnectionModal(bool hide_connection_modal);

    bool isHideFromLeaderboard();
    void setHideFromLeaderboard(bool hide_from_leaderboard);

    bool isHideNameFromLeaderboard();
    void setHideNameFromLeaderboard(bool hide_name_from_leaderboard);

    QList<QString*>* getHideNotifications();
    void setHideNotifications(QList<QString*>* hide_notifications);

    bool isHidePhoneConfirm();
    void setHidePhoneConfirm(bool hide_phone_confirm);

    bool isIsSensitiveInfoVisible();
    void setIsSensitiveInfoVisible(bool is_sensitive_info_visible);

    bool isIsWalletZeroBalanceHidden();
    void setIsWalletZeroBalanceHidden(bool is_wallet_zero_balance_hidden);

    QString* getLocale();
    void setLocale(QString* locale);

    double getLocaleSetTime();
    void setLocaleSetTime(double locale_set_time);

    QString* getMarginPnlRow();
    void setMarginPnlRow(QString* margin_pnl_row);

    QString* getMarginPnlRowKind();
    void setMarginPnlRowKind(QString* margin_pnl_row_kind);

    QList<QString*>* getMsgsSeen();
    void setMsgsSeen(QList<QString*>* msgs_seen);

    SWGObject* getNotifications();
    void setNotifications(SWGObject* notifications);

    SWGObject* getOrderBookBinning();
    void setOrderBookBinning(SWGObject* order_book_binning);

    QString* getOrderBookType();
    void setOrderBookType(QString* order_book_type);

    bool isOrderClearImmediate();
    void setOrderClearImmediate(bool order_clear_immediate);

    bool isOrderControlsPlusMinus();
    void setOrderControlsPlusMinus(bool order_controls_plus_minus);

    QString* getPlatformLayout();
    void setPlatformLayout(QString* platform_layout);

    QString* getSelectedFiatCurrency();
    void setSelectedFiatCurrency(QString* selected_fiat_currency);

    bool isShowChartBottomToolbar();
    void setShowChartBottomToolbar(bool show_chart_bottom_toolbar);

    bool isShowLocaleNumbers();
    void setShowLocaleNumbers(bool show_locale_numbers);

    QList<QString*>* getSounds();
    void setSounds(QList<QString*>* sounds);

    bool isStrictIpCheck();
    void setStrictIpCheck(bool strict_ip_check);

    bool isStrictTimeout();
    void setStrictTimeout(bool strict_timeout);

    QString* getTickerGroup();
    void setTickerGroup(QString* ticker_group);

    bool isTickerPinned();
    void setTickerPinned(bool ticker_pinned);

    QString* getTradeLayout();
    void setTradeLayout(QString* trade_layout);

    QString* getUserColor();
    void setUserColor(QString* user_color);


    virtual bool isSet() override;

private:
    bool alert_on_liquidations;
    bool m_alert_on_liquidations_isSet;

    bool animations_enabled;
    bool m_animations_enabled_isSet;

    QDateTime* announcements_last_seen;
    bool m_announcements_last_seen_isSet;

    double chat_channel_id;
    bool m_chat_channel_id_isSet;

    QString* color_theme;
    bool m_color_theme_isSet;

    QString* currency;
    bool m_currency_isSet;

    bool debug;
    bool m_debug_isSet;

    QList<QString*>* disable_emails;
    bool m_disable_emails_isSet;

    QList<QString*>* disable_push;
    bool m_disable_push_isSet;

    bool display_corp_enroll_upsell;
    bool m_display_corp_enroll_upsell_isSet;

    QString* equivalent_currency;
    bool m_equivalent_currency_isSet;

    QList<QString*>* features;
    bool m_features_isSet;

    QList<QString*>* favourites;
    bool m_favourites_isSet;

    QList<QString*>* favourites_assets;
    bool m_favourites_assets_isSet;

    QList<QString*>* favourites_ordered;
    bool m_favourites_ordered_isSet;

    QList<QString*>* hide_confirm_dialogs;
    bool m_hide_confirm_dialogs_isSet;

    bool hide_connection_modal;
    bool m_hide_connection_modal_isSet;

    bool hide_from_leaderboard;
    bool m_hide_from_leaderboard_isSet;

    bool hide_name_from_leaderboard;
    bool m_hide_name_from_leaderboard_isSet;

    QList<QString*>* hide_notifications;
    bool m_hide_notifications_isSet;

    bool hide_phone_confirm;
    bool m_hide_phone_confirm_isSet;

    bool is_sensitive_info_visible;
    bool m_is_sensitive_info_visible_isSet;

    bool is_wallet_zero_balance_hidden;
    bool m_is_wallet_zero_balance_hidden_isSet;

    QString* locale;
    bool m_locale_isSet;

    double locale_set_time;
    bool m_locale_set_time_isSet;

    QString* margin_pnl_row;
    bool m_margin_pnl_row_isSet;

    QString* margin_pnl_row_kind;
    bool m_margin_pnl_row_kind_isSet;

    QList<QString*>* msgs_seen;
    bool m_msgs_seen_isSet;

    SWGObject* notifications;
    bool m_notifications_isSet;

    SWGObject* order_book_binning;
    bool m_order_book_binning_isSet;

    QString* order_book_type;
    bool m_order_book_type_isSet;

    bool order_clear_immediate;
    bool m_order_clear_immediate_isSet;

    bool order_controls_plus_minus;
    bool m_order_controls_plus_minus_isSet;

    QString* platform_layout;
    bool m_platform_layout_isSet;

    QString* selected_fiat_currency;
    bool m_selected_fiat_currency_isSet;

    bool show_chart_bottom_toolbar;
    bool m_show_chart_bottom_toolbar_isSet;

    bool show_locale_numbers;
    bool m_show_locale_numbers_isSet;

    QList<QString*>* sounds;
    bool m_sounds_isSet;

    bool strict_ip_check;
    bool m_strict_ip_check_isSet;

    bool strict_timeout;
    bool m_strict_timeout_isSet;

    QString* ticker_group;
    bool m_ticker_group_isSet;

    bool ticker_pinned;
    bool m_ticker_pinned_isSet;

    QString* trade_layout;
    bool m_trade_layout_isSet;

    QString* user_color;
    bool m_user_color_isSet;

};

}

#endif /* SWGUserPreferences_H_ */
