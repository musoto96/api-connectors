/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGPorl.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGPorl::SWGPorl(QString json) {
    init();
    this->fromJson(json);
}

SWGPorl::SWGPorl() {
    init();
}

SWGPorl::~SWGPorl() {
    this->cleanup();
}

void
SWGPorl::init() {
    account = 0.0;
    m_account_isSet = false;
    nonce = new QString("");
    m_nonce_isSet = false;
    account_nonce = new QString("");
    m_account_nonce_isSet = false;
    total = 0.0;
    m_total_isSet = false;
    balance = 0.0;
    m_balance_isSet = false;
    filename = new QString("");
    m_filename_isSet = false;
    height = 0.0;
    m_height_isSet = false;
    created = NULL;
    m_created_isSet = false;
}

void
SWGPorl::cleanup() {
    if(account != nullptr) { 
        delete account;
    }
    if(nonce != nullptr) { 
        delete nonce;
    }
    if(account_nonce != nullptr) { 
        delete account_nonce;
    }


    if(filename != nullptr) { 
        delete filename;
    }

    if(created != nullptr) { 
        delete created;
    }
}

SWGPorl*
SWGPorl::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGPorl::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&account, pJson["account"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&nonce, pJson["nonce"], "QString", "QString");
    
    ::Swagger::setValue(&account_nonce, pJson["accountNonce"], "QString", "QString");
    
    ::Swagger::setValue(&total, pJson["total"], "double", "");
    
    ::Swagger::setValue(&balance, pJson["balance"], "double", "");
    
    ::Swagger::setValue(&filename, pJson["filename"], "QString", "QString");
    
    ::Swagger::setValue(&height, pJson["height"], "double", "");
    
    ::Swagger::setValue(&created, pJson["created"], "QDateTime", "QDateTime");
    
}

QString
SWGPorl::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGPorl::asJsonObject() {
    QJsonObject obj;
    if((account != nullptr) && (account->isSet())){
        toJsonValue(QString("account"), account, obj, QString("SWGNumber"));
    }
    if(nonce != nullptr && *nonce != QString("")){
        toJsonValue(QString("nonce"), nonce, obj, QString("QString"));
    }
    if(account_nonce != nullptr && *account_nonce != QString("")){
        toJsonValue(QString("accountNonce"), account_nonce, obj, QString("QString"));
    }
    if(m_total_isSet){
        obj.insert("total", QJsonValue(total));
    }
    if(m_balance_isSet){
        obj.insert("balance", QJsonValue(balance));
    }
    if(filename != nullptr && *filename != QString("")){
        toJsonValue(QString("filename"), filename, obj, QString("QString"));
    }
    if(m_height_isSet){
        obj.insert("height", QJsonValue(height));
    }
    if(created != nullptr) { 
        toJsonValue(QString("created"), created, obj, QString("QDateTime"));
    }

    return obj;
}

SWGNumber*
SWGPorl::getAccount() {
    return account;
}
void
SWGPorl::setAccount(SWGNumber* account) {
    this->account = account;
    this->m_account_isSet = true;
}

QString*
SWGPorl::getNonce() {
    return nonce;
}
void
SWGPorl::setNonce(QString* nonce) {
    this->nonce = nonce;
    this->m_nonce_isSet = true;
}

QString*
SWGPorl::getAccountNonce() {
    return account_nonce;
}
void
SWGPorl::setAccountNonce(QString* account_nonce) {
    this->account_nonce = account_nonce;
    this->m_account_nonce_isSet = true;
}

double
SWGPorl::getTotal() {
    return total;
}
void
SWGPorl::setTotal(double total) {
    this->total = total;
    this->m_total_isSet = true;
}

double
SWGPorl::getBalance() {
    return balance;
}
void
SWGPorl::setBalance(double balance) {
    this->balance = balance;
    this->m_balance_isSet = true;
}

QString*
SWGPorl::getFilename() {
    return filename;
}
void
SWGPorl::setFilename(QString* filename) {
    this->filename = filename;
    this->m_filename_isSet = true;
}

double
SWGPorl::getHeight() {
    return height;
}
void
SWGPorl::setHeight(double height) {
    this->height = height;
    this->m_height_isSet = true;
}

QDateTime*
SWGPorl::getCreated() {
    return created;
}
void
SWGPorl::setCreated(QDateTime* created) {
    this->created = created;
    this->m_created_isSet = true;
}


bool
SWGPorl::isSet(){
    bool isObjectUpdated = false;
    do{
        if(account != nullptr && account->isSet()){ isObjectUpdated = true; break;}
        if(nonce != nullptr && *nonce != QString("")){ isObjectUpdated = true; break;}
        if(account_nonce != nullptr && *account_nonce != QString("")){ isObjectUpdated = true; break;}
        if(m_total_isSet){ isObjectUpdated = true; break;}
        if(m_balance_isSet){ isObjectUpdated = true; break;}
        if(filename != nullptr && *filename != QString("")){ isObjectUpdated = true; break;}
        if(m_height_isSet){ isObjectUpdated = true; break;}
        
    }while(false);
    return isObjectUpdated;
}
}

