/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGPosition.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGPosition::SWGPosition(QString json) {
    init();
    this->fromJson(json);
}

SWGPosition::SWGPosition() {
    init();
}

SWGPosition::~SWGPosition() {
    this->cleanup();
}

void
SWGPosition::init() {
    account = 0.0;
    m_account_isSet = false;
    symbol = new QString("");
    m_symbol_isSet = false;
    currency = new QString("");
    m_currency_isSet = false;
    underlying = new QString("");
    m_underlying_isSet = false;
    quote_currency = new QString("");
    m_quote_currency_isSet = false;
    commission = 0.0;
    m_commission_isSet = false;
    init_margin_req = 0.0;
    m_init_margin_req_isSet = false;
    maint_margin_req = 0.0;
    m_maint_margin_req_isSet = false;
    risk_limit = 0.0;
    m_risk_limit_isSet = false;
    leverage = 0.0;
    m_leverage_isSet = false;
    cross_margin = false;
    m_cross_margin_isSet = false;
    deleverage_percentile = 0.0;
    m_deleverage_percentile_isSet = false;
    rebalanced_pnl = 0.0;
    m_rebalanced_pnl_isSet = false;
    prev_realised_pnl = 0.0;
    m_prev_realised_pnl_isSet = false;
    prev_unrealised_pnl = 0.0;
    m_prev_unrealised_pnl_isSet = false;
    opening_qty = 0.0;
    m_opening_qty_isSet = false;
    open_order_buy_qty = 0.0;
    m_open_order_buy_qty_isSet = false;
    open_order_buy_cost = 0.0;
    m_open_order_buy_cost_isSet = false;
    open_order_buy_premium = 0.0;
    m_open_order_buy_premium_isSet = false;
    open_order_sell_qty = 0.0;
    m_open_order_sell_qty_isSet = false;
    open_order_sell_cost = 0.0;
    m_open_order_sell_cost_isSet = false;
    open_order_sell_premium = 0.0;
    m_open_order_sell_premium_isSet = false;
    current_qty = 0.0;
    m_current_qty_isSet = false;
    current_cost = 0.0;
    m_current_cost_isSet = false;
    current_comm = 0.0;
    m_current_comm_isSet = false;
    realised_cost = 0.0;
    m_realised_cost_isSet = false;
    unrealised_cost = 0.0;
    m_unrealised_cost_isSet = false;
    gross_open_premium = 0.0;
    m_gross_open_premium_isSet = false;
    is_open = false;
    m_is_open_isSet = false;
    mark_price = 0.0;
    m_mark_price_isSet = false;
    mark_value = 0.0;
    m_mark_value_isSet = false;
    risk_value = 0.0;
    m_risk_value_isSet = false;
    home_notional = 0.0;
    m_home_notional_isSet = false;
    foreign_notional = 0.0;
    m_foreign_notional_isSet = false;
    pos_state = new QString("");
    m_pos_state_isSet = false;
    pos_cost = 0.0;
    m_pos_cost_isSet = false;
    pos_cross = 0.0;
    m_pos_cross_isSet = false;
    pos_comm = 0.0;
    m_pos_comm_isSet = false;
    pos_loss = 0.0;
    m_pos_loss_isSet = false;
    pos_margin = 0.0;
    m_pos_margin_isSet = false;
    pos_maint = 0.0;
    m_pos_maint_isSet = false;
    init_margin = 0.0;
    m_init_margin_isSet = false;
    maint_margin = 0.0;
    m_maint_margin_isSet = false;
    realised_pnl = 0.0;
    m_realised_pnl_isSet = false;
    unrealised_pnl = 0.0;
    m_unrealised_pnl_isSet = false;
    unrealised_pnl_pcnt = 0.0;
    m_unrealised_pnl_pcnt_isSet = false;
    unrealised_roe_pcnt = 0.0;
    m_unrealised_roe_pcnt_isSet = false;
    avg_cost_price = 0.0;
    m_avg_cost_price_isSet = false;
    avg_entry_price = 0.0;
    m_avg_entry_price_isSet = false;
    break_even_price = 0.0;
    m_break_even_price_isSet = false;
    margin_call_price = 0.0;
    m_margin_call_price_isSet = false;
    liquidation_price = 0.0;
    m_liquidation_price_isSet = false;
    bankrupt_price = 0.0;
    m_bankrupt_price_isSet = false;
    timestamp = NULL;
    m_timestamp_isSet = false;
}

void
SWGPosition::cleanup() {
    if(account != nullptr) { 
        delete account;
    }
    if(symbol != nullptr) { 
        delete symbol;
    }
    if(currency != nullptr) { 
        delete currency;
    }
    if(underlying != nullptr) { 
        delete underlying;
    }
    if(quote_currency != nullptr) { 
        delete quote_currency;
    }



    if(risk_limit != nullptr) { 
        delete risk_limit;
    }



    if(rebalanced_pnl != nullptr) { 
        delete rebalanced_pnl;
    }
    if(prev_realised_pnl != nullptr) { 
        delete prev_realised_pnl;
    }
    if(prev_unrealised_pnl != nullptr) { 
        delete prev_unrealised_pnl;
    }
    if(opening_qty != nullptr) { 
        delete opening_qty;
    }
    if(open_order_buy_qty != nullptr) { 
        delete open_order_buy_qty;
    }
    if(open_order_buy_cost != nullptr) { 
        delete open_order_buy_cost;
    }
    if(open_order_buy_premium != nullptr) { 
        delete open_order_buy_premium;
    }
    if(open_order_sell_qty != nullptr) { 
        delete open_order_sell_qty;
    }
    if(open_order_sell_cost != nullptr) { 
        delete open_order_sell_cost;
    }
    if(open_order_sell_premium != nullptr) { 
        delete open_order_sell_premium;
    }
    if(current_qty != nullptr) { 
        delete current_qty;
    }
    if(current_cost != nullptr) { 
        delete current_cost;
    }
    if(current_comm != nullptr) { 
        delete current_comm;
    }
    if(realised_cost != nullptr) { 
        delete realised_cost;
    }
    if(unrealised_cost != nullptr) { 
        delete unrealised_cost;
    }
    if(gross_open_premium != nullptr) { 
        delete gross_open_premium;
    }


    if(mark_value != nullptr) { 
        delete mark_value;
    }
    if(risk_value != nullptr) { 
        delete risk_value;
    }


    if(pos_state != nullptr) { 
        delete pos_state;
    }
    if(pos_cost != nullptr) { 
        delete pos_cost;
    }
    if(pos_cross != nullptr) { 
        delete pos_cross;
    }
    if(pos_comm != nullptr) { 
        delete pos_comm;
    }
    if(pos_loss != nullptr) { 
        delete pos_loss;
    }
    if(pos_margin != nullptr) { 
        delete pos_margin;
    }
    if(pos_maint != nullptr) { 
        delete pos_maint;
    }
    if(init_margin != nullptr) { 
        delete init_margin;
    }
    if(maint_margin != nullptr) { 
        delete maint_margin;
    }
    if(realised_pnl != nullptr) { 
        delete realised_pnl;
    }
    if(unrealised_pnl != nullptr) { 
        delete unrealised_pnl;
    }








    if(timestamp != nullptr) { 
        delete timestamp;
    }
}

SWGPosition*
SWGPosition::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGPosition::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&account, pJson["account"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&symbol, pJson["symbol"], "QString", "QString");
    
    ::Swagger::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::Swagger::setValue(&underlying, pJson["underlying"], "QString", "QString");
    
    ::Swagger::setValue(&quote_currency, pJson["quoteCurrency"], "QString", "QString");
    
    ::Swagger::setValue(&commission, pJson["commission"], "double", "");
    
    ::Swagger::setValue(&init_margin_req, pJson["initMarginReq"], "double", "");
    
    ::Swagger::setValue(&maint_margin_req, pJson["maintMarginReq"], "double", "");
    
    ::Swagger::setValue(&risk_limit, pJson["riskLimit"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&leverage, pJson["leverage"], "double", "");
    
    ::Swagger::setValue(&cross_margin, pJson["crossMargin"], "bool", "");
    
    ::Swagger::setValue(&deleverage_percentile, pJson["deleveragePercentile"], "double", "");
    
    ::Swagger::setValue(&rebalanced_pnl, pJson["rebalancedPnl"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&prev_realised_pnl, pJson["prevRealisedPnl"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&prev_unrealised_pnl, pJson["prevUnrealisedPnl"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&opening_qty, pJson["openingQty"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&open_order_buy_qty, pJson["openOrderBuyQty"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&open_order_buy_cost, pJson["openOrderBuyCost"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&open_order_buy_premium, pJson["openOrderBuyPremium"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&open_order_sell_qty, pJson["openOrderSellQty"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&open_order_sell_cost, pJson["openOrderSellCost"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&open_order_sell_premium, pJson["openOrderSellPremium"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&current_qty, pJson["currentQty"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&current_cost, pJson["currentCost"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&current_comm, pJson["currentComm"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&realised_cost, pJson["realisedCost"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&unrealised_cost, pJson["unrealisedCost"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&gross_open_premium, pJson["grossOpenPremium"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&is_open, pJson["isOpen"], "bool", "");
    
    ::Swagger::setValue(&mark_price, pJson["markPrice"], "double", "");
    
    ::Swagger::setValue(&mark_value, pJson["markValue"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&risk_value, pJson["riskValue"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&home_notional, pJson["homeNotional"], "double", "");
    
    ::Swagger::setValue(&foreign_notional, pJson["foreignNotional"], "double", "");
    
    ::Swagger::setValue(&pos_state, pJson["posState"], "QString", "QString");
    
    ::Swagger::setValue(&pos_cost, pJson["posCost"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&pos_cross, pJson["posCross"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&pos_comm, pJson["posComm"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&pos_loss, pJson["posLoss"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&pos_margin, pJson["posMargin"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&pos_maint, pJson["posMaint"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&init_margin, pJson["initMargin"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&maint_margin, pJson["maintMargin"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&realised_pnl, pJson["realisedPnl"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&unrealised_pnl, pJson["unrealisedPnl"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&unrealised_pnl_pcnt, pJson["unrealisedPnlPcnt"], "double", "");
    
    ::Swagger::setValue(&unrealised_roe_pcnt, pJson["unrealisedRoePcnt"], "double", "");
    
    ::Swagger::setValue(&avg_cost_price, pJson["avgCostPrice"], "double", "");
    
    ::Swagger::setValue(&avg_entry_price, pJson["avgEntryPrice"], "double", "");
    
    ::Swagger::setValue(&break_even_price, pJson["breakEvenPrice"], "double", "");
    
    ::Swagger::setValue(&margin_call_price, pJson["marginCallPrice"], "double", "");
    
    ::Swagger::setValue(&liquidation_price, pJson["liquidationPrice"], "double", "");
    
    ::Swagger::setValue(&bankrupt_price, pJson["bankruptPrice"], "double", "");
    
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "QDateTime", "QDateTime");
    
}

QString
SWGPosition::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGPosition::asJsonObject() {
    QJsonObject obj;
    if((account != nullptr) && (account->isSet())){
        toJsonValue(QString("account"), account, obj, QString("SWGNumber"));
    }
    if(symbol != nullptr && *symbol != QString("")){
        toJsonValue(QString("symbol"), symbol, obj, QString("QString"));
    }
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if(underlying != nullptr && *underlying != QString("")){
        toJsonValue(QString("underlying"), underlying, obj, QString("QString"));
    }
    if(quote_currency != nullptr && *quote_currency != QString("")){
        toJsonValue(QString("quoteCurrency"), quote_currency, obj, QString("QString"));
    }
    if(m_commission_isSet){
        obj.insert("commission", QJsonValue(commission));
    }
    if(m_init_margin_req_isSet){
        obj.insert("initMarginReq", QJsonValue(init_margin_req));
    }
    if(m_maint_margin_req_isSet){
        obj.insert("maintMarginReq", QJsonValue(maint_margin_req));
    }
    if((risk_limit != nullptr) && (risk_limit->isSet())){
        toJsonValue(QString("riskLimit"), risk_limit, obj, QString("SWGNumber"));
    }
    if(m_leverage_isSet){
        obj.insert("leverage", QJsonValue(leverage));
    }
    if(m_cross_margin_isSet){
        obj.insert("crossMargin", QJsonValue(cross_margin));
    }
    if(m_deleverage_percentile_isSet){
        obj.insert("deleveragePercentile", QJsonValue(deleverage_percentile));
    }
    if((rebalanced_pnl != nullptr) && (rebalanced_pnl->isSet())){
        toJsonValue(QString("rebalancedPnl"), rebalanced_pnl, obj, QString("SWGNumber"));
    }
    if((prev_realised_pnl != nullptr) && (prev_realised_pnl->isSet())){
        toJsonValue(QString("prevRealisedPnl"), prev_realised_pnl, obj, QString("SWGNumber"));
    }
    if((prev_unrealised_pnl != nullptr) && (prev_unrealised_pnl->isSet())){
        toJsonValue(QString("prevUnrealisedPnl"), prev_unrealised_pnl, obj, QString("SWGNumber"));
    }
    if((opening_qty != nullptr) && (opening_qty->isSet())){
        toJsonValue(QString("openingQty"), opening_qty, obj, QString("SWGNumber"));
    }
    if((open_order_buy_qty != nullptr) && (open_order_buy_qty->isSet())){
        toJsonValue(QString("openOrderBuyQty"), open_order_buy_qty, obj, QString("SWGNumber"));
    }
    if((open_order_buy_cost != nullptr) && (open_order_buy_cost->isSet())){
        toJsonValue(QString("openOrderBuyCost"), open_order_buy_cost, obj, QString("SWGNumber"));
    }
    if((open_order_buy_premium != nullptr) && (open_order_buy_premium->isSet())){
        toJsonValue(QString("openOrderBuyPremium"), open_order_buy_premium, obj, QString("SWGNumber"));
    }
    if((open_order_sell_qty != nullptr) && (open_order_sell_qty->isSet())){
        toJsonValue(QString("openOrderSellQty"), open_order_sell_qty, obj, QString("SWGNumber"));
    }
    if((open_order_sell_cost != nullptr) && (open_order_sell_cost->isSet())){
        toJsonValue(QString("openOrderSellCost"), open_order_sell_cost, obj, QString("SWGNumber"));
    }
    if((open_order_sell_premium != nullptr) && (open_order_sell_premium->isSet())){
        toJsonValue(QString("openOrderSellPremium"), open_order_sell_premium, obj, QString("SWGNumber"));
    }
    if((current_qty != nullptr) && (current_qty->isSet())){
        toJsonValue(QString("currentQty"), current_qty, obj, QString("SWGNumber"));
    }
    if((current_cost != nullptr) && (current_cost->isSet())){
        toJsonValue(QString("currentCost"), current_cost, obj, QString("SWGNumber"));
    }
    if((current_comm != nullptr) && (current_comm->isSet())){
        toJsonValue(QString("currentComm"), current_comm, obj, QString("SWGNumber"));
    }
    if((realised_cost != nullptr) && (realised_cost->isSet())){
        toJsonValue(QString("realisedCost"), realised_cost, obj, QString("SWGNumber"));
    }
    if((unrealised_cost != nullptr) && (unrealised_cost->isSet())){
        toJsonValue(QString("unrealisedCost"), unrealised_cost, obj, QString("SWGNumber"));
    }
    if((gross_open_premium != nullptr) && (gross_open_premium->isSet())){
        toJsonValue(QString("grossOpenPremium"), gross_open_premium, obj, QString("SWGNumber"));
    }
    if(m_is_open_isSet){
        obj.insert("isOpen", QJsonValue(is_open));
    }
    if(m_mark_price_isSet){
        obj.insert("markPrice", QJsonValue(mark_price));
    }
    if((mark_value != nullptr) && (mark_value->isSet())){
        toJsonValue(QString("markValue"), mark_value, obj, QString("SWGNumber"));
    }
    if((risk_value != nullptr) && (risk_value->isSet())){
        toJsonValue(QString("riskValue"), risk_value, obj, QString("SWGNumber"));
    }
    if(m_home_notional_isSet){
        obj.insert("homeNotional", QJsonValue(home_notional));
    }
    if(m_foreign_notional_isSet){
        obj.insert("foreignNotional", QJsonValue(foreign_notional));
    }
    if(pos_state != nullptr && *pos_state != QString("")){
        toJsonValue(QString("posState"), pos_state, obj, QString("QString"));
    }
    if((pos_cost != nullptr) && (pos_cost->isSet())){
        toJsonValue(QString("posCost"), pos_cost, obj, QString("SWGNumber"));
    }
    if((pos_cross != nullptr) && (pos_cross->isSet())){
        toJsonValue(QString("posCross"), pos_cross, obj, QString("SWGNumber"));
    }
    if((pos_comm != nullptr) && (pos_comm->isSet())){
        toJsonValue(QString("posComm"), pos_comm, obj, QString("SWGNumber"));
    }
    if((pos_loss != nullptr) && (pos_loss->isSet())){
        toJsonValue(QString("posLoss"), pos_loss, obj, QString("SWGNumber"));
    }
    if((pos_margin != nullptr) && (pos_margin->isSet())){
        toJsonValue(QString("posMargin"), pos_margin, obj, QString("SWGNumber"));
    }
    if((pos_maint != nullptr) && (pos_maint->isSet())){
        toJsonValue(QString("posMaint"), pos_maint, obj, QString("SWGNumber"));
    }
    if((init_margin != nullptr) && (init_margin->isSet())){
        toJsonValue(QString("initMargin"), init_margin, obj, QString("SWGNumber"));
    }
    if((maint_margin != nullptr) && (maint_margin->isSet())){
        toJsonValue(QString("maintMargin"), maint_margin, obj, QString("SWGNumber"));
    }
    if((realised_pnl != nullptr) && (realised_pnl->isSet())){
        toJsonValue(QString("realisedPnl"), realised_pnl, obj, QString("SWGNumber"));
    }
    if((unrealised_pnl != nullptr) && (unrealised_pnl->isSet())){
        toJsonValue(QString("unrealisedPnl"), unrealised_pnl, obj, QString("SWGNumber"));
    }
    if(m_unrealised_pnl_pcnt_isSet){
        obj.insert("unrealisedPnlPcnt", QJsonValue(unrealised_pnl_pcnt));
    }
    if(m_unrealised_roe_pcnt_isSet){
        obj.insert("unrealisedRoePcnt", QJsonValue(unrealised_roe_pcnt));
    }
    if(m_avg_cost_price_isSet){
        obj.insert("avgCostPrice", QJsonValue(avg_cost_price));
    }
    if(m_avg_entry_price_isSet){
        obj.insert("avgEntryPrice", QJsonValue(avg_entry_price));
    }
    if(m_break_even_price_isSet){
        obj.insert("breakEvenPrice", QJsonValue(break_even_price));
    }
    if(m_margin_call_price_isSet){
        obj.insert("marginCallPrice", QJsonValue(margin_call_price));
    }
    if(m_liquidation_price_isSet){
        obj.insert("liquidationPrice", QJsonValue(liquidation_price));
    }
    if(m_bankrupt_price_isSet){
        obj.insert("bankruptPrice", QJsonValue(bankrupt_price));
    }
    if(timestamp != nullptr) { 
        toJsonValue(QString("timestamp"), timestamp, obj, QString("QDateTime"));
    }

    return obj;
}

SWGNumber*
SWGPosition::getAccount() {
    return account;
}
void
SWGPosition::setAccount(SWGNumber* account) {
    this->account = account;
    this->m_account_isSet = true;
}

QString*
SWGPosition::getSymbol() {
    return symbol;
}
void
SWGPosition::setSymbol(QString* symbol) {
    this->symbol = symbol;
    this->m_symbol_isSet = true;
}

QString*
SWGPosition::getCurrency() {
    return currency;
}
void
SWGPosition::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

QString*
SWGPosition::getUnderlying() {
    return underlying;
}
void
SWGPosition::setUnderlying(QString* underlying) {
    this->underlying = underlying;
    this->m_underlying_isSet = true;
}

QString*
SWGPosition::getQuoteCurrency() {
    return quote_currency;
}
void
SWGPosition::setQuoteCurrency(QString* quote_currency) {
    this->quote_currency = quote_currency;
    this->m_quote_currency_isSet = true;
}

double
SWGPosition::getCommission() {
    return commission;
}
void
SWGPosition::setCommission(double commission) {
    this->commission = commission;
    this->m_commission_isSet = true;
}

double
SWGPosition::getInitMarginReq() {
    return init_margin_req;
}
void
SWGPosition::setInitMarginReq(double init_margin_req) {
    this->init_margin_req = init_margin_req;
    this->m_init_margin_req_isSet = true;
}

double
SWGPosition::getMaintMarginReq() {
    return maint_margin_req;
}
void
SWGPosition::setMaintMarginReq(double maint_margin_req) {
    this->maint_margin_req = maint_margin_req;
    this->m_maint_margin_req_isSet = true;
}

SWGNumber*
SWGPosition::getRiskLimit() {
    return risk_limit;
}
void
SWGPosition::setRiskLimit(SWGNumber* risk_limit) {
    this->risk_limit = risk_limit;
    this->m_risk_limit_isSet = true;
}

double
SWGPosition::getLeverage() {
    return leverage;
}
void
SWGPosition::setLeverage(double leverage) {
    this->leverage = leverage;
    this->m_leverage_isSet = true;
}

bool
SWGPosition::isCrossMargin() {
    return cross_margin;
}
void
SWGPosition::setCrossMargin(bool cross_margin) {
    this->cross_margin = cross_margin;
    this->m_cross_margin_isSet = true;
}

double
SWGPosition::getDeleveragePercentile() {
    return deleverage_percentile;
}
void
SWGPosition::setDeleveragePercentile(double deleverage_percentile) {
    this->deleverage_percentile = deleverage_percentile;
    this->m_deleverage_percentile_isSet = true;
}

SWGNumber*
SWGPosition::getRebalancedPnl() {
    return rebalanced_pnl;
}
void
SWGPosition::setRebalancedPnl(SWGNumber* rebalanced_pnl) {
    this->rebalanced_pnl = rebalanced_pnl;
    this->m_rebalanced_pnl_isSet = true;
}

SWGNumber*
SWGPosition::getPrevRealisedPnl() {
    return prev_realised_pnl;
}
void
SWGPosition::setPrevRealisedPnl(SWGNumber* prev_realised_pnl) {
    this->prev_realised_pnl = prev_realised_pnl;
    this->m_prev_realised_pnl_isSet = true;
}

SWGNumber*
SWGPosition::getPrevUnrealisedPnl() {
    return prev_unrealised_pnl;
}
void
SWGPosition::setPrevUnrealisedPnl(SWGNumber* prev_unrealised_pnl) {
    this->prev_unrealised_pnl = prev_unrealised_pnl;
    this->m_prev_unrealised_pnl_isSet = true;
}

SWGNumber*
SWGPosition::getOpeningQty() {
    return opening_qty;
}
void
SWGPosition::setOpeningQty(SWGNumber* opening_qty) {
    this->opening_qty = opening_qty;
    this->m_opening_qty_isSet = true;
}

SWGNumber*
SWGPosition::getOpenOrderBuyQty() {
    return open_order_buy_qty;
}
void
SWGPosition::setOpenOrderBuyQty(SWGNumber* open_order_buy_qty) {
    this->open_order_buy_qty = open_order_buy_qty;
    this->m_open_order_buy_qty_isSet = true;
}

SWGNumber*
SWGPosition::getOpenOrderBuyCost() {
    return open_order_buy_cost;
}
void
SWGPosition::setOpenOrderBuyCost(SWGNumber* open_order_buy_cost) {
    this->open_order_buy_cost = open_order_buy_cost;
    this->m_open_order_buy_cost_isSet = true;
}

SWGNumber*
SWGPosition::getOpenOrderBuyPremium() {
    return open_order_buy_premium;
}
void
SWGPosition::setOpenOrderBuyPremium(SWGNumber* open_order_buy_premium) {
    this->open_order_buy_premium = open_order_buy_premium;
    this->m_open_order_buy_premium_isSet = true;
}

SWGNumber*
SWGPosition::getOpenOrderSellQty() {
    return open_order_sell_qty;
}
void
SWGPosition::setOpenOrderSellQty(SWGNumber* open_order_sell_qty) {
    this->open_order_sell_qty = open_order_sell_qty;
    this->m_open_order_sell_qty_isSet = true;
}

SWGNumber*
SWGPosition::getOpenOrderSellCost() {
    return open_order_sell_cost;
}
void
SWGPosition::setOpenOrderSellCost(SWGNumber* open_order_sell_cost) {
    this->open_order_sell_cost = open_order_sell_cost;
    this->m_open_order_sell_cost_isSet = true;
}

SWGNumber*
SWGPosition::getOpenOrderSellPremium() {
    return open_order_sell_premium;
}
void
SWGPosition::setOpenOrderSellPremium(SWGNumber* open_order_sell_premium) {
    this->open_order_sell_premium = open_order_sell_premium;
    this->m_open_order_sell_premium_isSet = true;
}

SWGNumber*
SWGPosition::getCurrentQty() {
    return current_qty;
}
void
SWGPosition::setCurrentQty(SWGNumber* current_qty) {
    this->current_qty = current_qty;
    this->m_current_qty_isSet = true;
}

SWGNumber*
SWGPosition::getCurrentCost() {
    return current_cost;
}
void
SWGPosition::setCurrentCost(SWGNumber* current_cost) {
    this->current_cost = current_cost;
    this->m_current_cost_isSet = true;
}

SWGNumber*
SWGPosition::getCurrentComm() {
    return current_comm;
}
void
SWGPosition::setCurrentComm(SWGNumber* current_comm) {
    this->current_comm = current_comm;
    this->m_current_comm_isSet = true;
}

SWGNumber*
SWGPosition::getRealisedCost() {
    return realised_cost;
}
void
SWGPosition::setRealisedCost(SWGNumber* realised_cost) {
    this->realised_cost = realised_cost;
    this->m_realised_cost_isSet = true;
}

SWGNumber*
SWGPosition::getUnrealisedCost() {
    return unrealised_cost;
}
void
SWGPosition::setUnrealisedCost(SWGNumber* unrealised_cost) {
    this->unrealised_cost = unrealised_cost;
    this->m_unrealised_cost_isSet = true;
}

SWGNumber*
SWGPosition::getGrossOpenPremium() {
    return gross_open_premium;
}
void
SWGPosition::setGrossOpenPremium(SWGNumber* gross_open_premium) {
    this->gross_open_premium = gross_open_premium;
    this->m_gross_open_premium_isSet = true;
}

bool
SWGPosition::isIsOpen() {
    return is_open;
}
void
SWGPosition::setIsOpen(bool is_open) {
    this->is_open = is_open;
    this->m_is_open_isSet = true;
}

double
SWGPosition::getMarkPrice() {
    return mark_price;
}
void
SWGPosition::setMarkPrice(double mark_price) {
    this->mark_price = mark_price;
    this->m_mark_price_isSet = true;
}

SWGNumber*
SWGPosition::getMarkValue() {
    return mark_value;
}
void
SWGPosition::setMarkValue(SWGNumber* mark_value) {
    this->mark_value = mark_value;
    this->m_mark_value_isSet = true;
}

SWGNumber*
SWGPosition::getRiskValue() {
    return risk_value;
}
void
SWGPosition::setRiskValue(SWGNumber* risk_value) {
    this->risk_value = risk_value;
    this->m_risk_value_isSet = true;
}

double
SWGPosition::getHomeNotional() {
    return home_notional;
}
void
SWGPosition::setHomeNotional(double home_notional) {
    this->home_notional = home_notional;
    this->m_home_notional_isSet = true;
}

double
SWGPosition::getForeignNotional() {
    return foreign_notional;
}
void
SWGPosition::setForeignNotional(double foreign_notional) {
    this->foreign_notional = foreign_notional;
    this->m_foreign_notional_isSet = true;
}

QString*
SWGPosition::getPosState() {
    return pos_state;
}
void
SWGPosition::setPosState(QString* pos_state) {
    this->pos_state = pos_state;
    this->m_pos_state_isSet = true;
}

SWGNumber*
SWGPosition::getPosCost() {
    return pos_cost;
}
void
SWGPosition::setPosCost(SWGNumber* pos_cost) {
    this->pos_cost = pos_cost;
    this->m_pos_cost_isSet = true;
}

SWGNumber*
SWGPosition::getPosCross() {
    return pos_cross;
}
void
SWGPosition::setPosCross(SWGNumber* pos_cross) {
    this->pos_cross = pos_cross;
    this->m_pos_cross_isSet = true;
}

SWGNumber*
SWGPosition::getPosComm() {
    return pos_comm;
}
void
SWGPosition::setPosComm(SWGNumber* pos_comm) {
    this->pos_comm = pos_comm;
    this->m_pos_comm_isSet = true;
}

SWGNumber*
SWGPosition::getPosLoss() {
    return pos_loss;
}
void
SWGPosition::setPosLoss(SWGNumber* pos_loss) {
    this->pos_loss = pos_loss;
    this->m_pos_loss_isSet = true;
}

SWGNumber*
SWGPosition::getPosMargin() {
    return pos_margin;
}
void
SWGPosition::setPosMargin(SWGNumber* pos_margin) {
    this->pos_margin = pos_margin;
    this->m_pos_margin_isSet = true;
}

SWGNumber*
SWGPosition::getPosMaint() {
    return pos_maint;
}
void
SWGPosition::setPosMaint(SWGNumber* pos_maint) {
    this->pos_maint = pos_maint;
    this->m_pos_maint_isSet = true;
}

SWGNumber*
SWGPosition::getInitMargin() {
    return init_margin;
}
void
SWGPosition::setInitMargin(SWGNumber* init_margin) {
    this->init_margin = init_margin;
    this->m_init_margin_isSet = true;
}

SWGNumber*
SWGPosition::getMaintMargin() {
    return maint_margin;
}
void
SWGPosition::setMaintMargin(SWGNumber* maint_margin) {
    this->maint_margin = maint_margin;
    this->m_maint_margin_isSet = true;
}

SWGNumber*
SWGPosition::getRealisedPnl() {
    return realised_pnl;
}
void
SWGPosition::setRealisedPnl(SWGNumber* realised_pnl) {
    this->realised_pnl = realised_pnl;
    this->m_realised_pnl_isSet = true;
}

SWGNumber*
SWGPosition::getUnrealisedPnl() {
    return unrealised_pnl;
}
void
SWGPosition::setUnrealisedPnl(SWGNumber* unrealised_pnl) {
    this->unrealised_pnl = unrealised_pnl;
    this->m_unrealised_pnl_isSet = true;
}

double
SWGPosition::getUnrealisedPnlPcnt() {
    return unrealised_pnl_pcnt;
}
void
SWGPosition::setUnrealisedPnlPcnt(double unrealised_pnl_pcnt) {
    this->unrealised_pnl_pcnt = unrealised_pnl_pcnt;
    this->m_unrealised_pnl_pcnt_isSet = true;
}

double
SWGPosition::getUnrealisedRoePcnt() {
    return unrealised_roe_pcnt;
}
void
SWGPosition::setUnrealisedRoePcnt(double unrealised_roe_pcnt) {
    this->unrealised_roe_pcnt = unrealised_roe_pcnt;
    this->m_unrealised_roe_pcnt_isSet = true;
}

double
SWGPosition::getAvgCostPrice() {
    return avg_cost_price;
}
void
SWGPosition::setAvgCostPrice(double avg_cost_price) {
    this->avg_cost_price = avg_cost_price;
    this->m_avg_cost_price_isSet = true;
}

double
SWGPosition::getAvgEntryPrice() {
    return avg_entry_price;
}
void
SWGPosition::setAvgEntryPrice(double avg_entry_price) {
    this->avg_entry_price = avg_entry_price;
    this->m_avg_entry_price_isSet = true;
}

double
SWGPosition::getBreakEvenPrice() {
    return break_even_price;
}
void
SWGPosition::setBreakEvenPrice(double break_even_price) {
    this->break_even_price = break_even_price;
    this->m_break_even_price_isSet = true;
}

double
SWGPosition::getMarginCallPrice() {
    return margin_call_price;
}
void
SWGPosition::setMarginCallPrice(double margin_call_price) {
    this->margin_call_price = margin_call_price;
    this->m_margin_call_price_isSet = true;
}

double
SWGPosition::getLiquidationPrice() {
    return liquidation_price;
}
void
SWGPosition::setLiquidationPrice(double liquidation_price) {
    this->liquidation_price = liquidation_price;
    this->m_liquidation_price_isSet = true;
}

double
SWGPosition::getBankruptPrice() {
    return bankrupt_price;
}
void
SWGPosition::setBankruptPrice(double bankrupt_price) {
    this->bankrupt_price = bankrupt_price;
    this->m_bankrupt_price_isSet = true;
}

QDateTime*
SWGPosition::getTimestamp() {
    return timestamp;
}
void
SWGPosition::setTimestamp(QDateTime* timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}


bool
SWGPosition::isSet(){
    bool isObjectUpdated = false;
    do{
        if(account != nullptr && account->isSet()){ isObjectUpdated = true; break;}
        if(symbol != nullptr && *symbol != QString("")){ isObjectUpdated = true; break;}
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(underlying != nullptr && *underlying != QString("")){ isObjectUpdated = true; break;}
        if(quote_currency != nullptr && *quote_currency != QString("")){ isObjectUpdated = true; break;}
        if(m_commission_isSet){ isObjectUpdated = true; break;}
        if(m_init_margin_req_isSet){ isObjectUpdated = true; break;}
        if(m_maint_margin_req_isSet){ isObjectUpdated = true; break;}
        if(risk_limit != nullptr && risk_limit->isSet()){ isObjectUpdated = true; break;}
        if(m_leverage_isSet){ isObjectUpdated = true; break;}
        if(m_cross_margin_isSet){ isObjectUpdated = true; break;}
        if(m_deleverage_percentile_isSet){ isObjectUpdated = true; break;}
        if(rebalanced_pnl != nullptr && rebalanced_pnl->isSet()){ isObjectUpdated = true; break;}
        if(prev_realised_pnl != nullptr && prev_realised_pnl->isSet()){ isObjectUpdated = true; break;}
        if(prev_unrealised_pnl != nullptr && prev_unrealised_pnl->isSet()){ isObjectUpdated = true; break;}
        if(opening_qty != nullptr && opening_qty->isSet()){ isObjectUpdated = true; break;}
        if(open_order_buy_qty != nullptr && open_order_buy_qty->isSet()){ isObjectUpdated = true; break;}
        if(open_order_buy_cost != nullptr && open_order_buy_cost->isSet()){ isObjectUpdated = true; break;}
        if(open_order_buy_premium != nullptr && open_order_buy_premium->isSet()){ isObjectUpdated = true; break;}
        if(open_order_sell_qty != nullptr && open_order_sell_qty->isSet()){ isObjectUpdated = true; break;}
        if(open_order_sell_cost != nullptr && open_order_sell_cost->isSet()){ isObjectUpdated = true; break;}
        if(open_order_sell_premium != nullptr && open_order_sell_premium->isSet()){ isObjectUpdated = true; break;}
        if(current_qty != nullptr && current_qty->isSet()){ isObjectUpdated = true; break;}
        if(current_cost != nullptr && current_cost->isSet()){ isObjectUpdated = true; break;}
        if(current_comm != nullptr && current_comm->isSet()){ isObjectUpdated = true; break;}
        if(realised_cost != nullptr && realised_cost->isSet()){ isObjectUpdated = true; break;}
        if(unrealised_cost != nullptr && unrealised_cost->isSet()){ isObjectUpdated = true; break;}
        if(gross_open_premium != nullptr && gross_open_premium->isSet()){ isObjectUpdated = true; break;}
        if(m_is_open_isSet){ isObjectUpdated = true; break;}
        if(m_mark_price_isSet){ isObjectUpdated = true; break;}
        if(mark_value != nullptr && mark_value->isSet()){ isObjectUpdated = true; break;}
        if(risk_value != nullptr && risk_value->isSet()){ isObjectUpdated = true; break;}
        if(m_home_notional_isSet){ isObjectUpdated = true; break;}
        if(m_foreign_notional_isSet){ isObjectUpdated = true; break;}
        if(pos_state != nullptr && *pos_state != QString("")){ isObjectUpdated = true; break;}
        if(pos_cost != nullptr && pos_cost->isSet()){ isObjectUpdated = true; break;}
        if(pos_cross != nullptr && pos_cross->isSet()){ isObjectUpdated = true; break;}
        if(pos_comm != nullptr && pos_comm->isSet()){ isObjectUpdated = true; break;}
        if(pos_loss != nullptr && pos_loss->isSet()){ isObjectUpdated = true; break;}
        if(pos_margin != nullptr && pos_margin->isSet()){ isObjectUpdated = true; break;}
        if(pos_maint != nullptr && pos_maint->isSet()){ isObjectUpdated = true; break;}
        if(init_margin != nullptr && init_margin->isSet()){ isObjectUpdated = true; break;}
        if(maint_margin != nullptr && maint_margin->isSet()){ isObjectUpdated = true; break;}
        if(realised_pnl != nullptr && realised_pnl->isSet()){ isObjectUpdated = true; break;}
        if(unrealised_pnl != nullptr && unrealised_pnl->isSet()){ isObjectUpdated = true; break;}
        if(m_unrealised_pnl_pcnt_isSet){ isObjectUpdated = true; break;}
        if(m_unrealised_roe_pcnt_isSet){ isObjectUpdated = true; break;}
        if(m_avg_cost_price_isSet){ isObjectUpdated = true; break;}
        if(m_avg_entry_price_isSet){ isObjectUpdated = true; break;}
        if(m_break_even_price_isSet){ isObjectUpdated = true; break;}
        if(m_margin_call_price_isSet){ isObjectUpdated = true; break;}
        if(m_liquidation_price_isSet){ isObjectUpdated = true; break;}
        if(m_bankrupt_price_isSet){ isObjectUpdated = true; break;}
        
    }while(false);
    return isObjectUpdated;
}
}

